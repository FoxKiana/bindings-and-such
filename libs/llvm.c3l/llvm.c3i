
module llvm;

const DISASSEMBLER_VARIANTKIND_NONE = 0;
const DISASSEMBLER_VARIANTKIND_ARM_HI16 = 1;
const DISASSEMBLER_VARIANTKIND_ARM_LO16 = 2;
const DISASSEMBLER_VARIANTKIND_ARM64_PAGE = 1;
const DISASSEMBLER_VARIANTKIND_ARM64_PAGEOFF = 2;
const DISASSEMBLER_VARIANTKIND_ARM64_GOTPAGE = 3;
const DISASSEMBLER_VARIANTKIND_ARM64_GOTPAGEOFF = 4;
const DISASSEMBLER_VARIANTKIND_ARM64_TLVP = 5;
const DISASSEMBLER_VARIANTKIND_ARM64_TLVOFF = 6;
const DISASSEMBLER_REFERENCETYPE_INOUT_NONE = 0;
const DISASSEMBLER_REFERENCETYPE_IN_BRANCH = 1;
const DISASSEMBLER_REFERENCETYPE_IN_PCREL_LOAD = 2;
const DISASSEMBLER_REFERENCETYPE_IN_ARM64_ADRP = 0x100000001;
const DISASSEMBLER_REFERENCETYPE_IN_ARM64_ADDXRI = 0x100000002;
const DISASSEMBLER_REFERENCETYPE_IN_ARM64_LDRXUI = 0x100000003;
const DISASSEMBLER_REFERENCETYPE_IN_ARM64_LDRXL = 0x100000004;
const DISASSEMBLER_REFERENCETYPE_IN_ARM64_ADR = 0x100000005;
const DISASSEMBLER_REFERENCETYPE_OUT_SYMBOLSTUB = 1;
const DISASSEMBLER_REFERENCETYPE_OUT_LITPOOL_SYMADDR = 2;
const DISASSEMBLER_REFERENCETYPE_OUT_LITPOOL_CSTRADDR = 3;
const DISASSEMBLER_REFERENCETYPE_OUT_OBJC_CFSTRING_REF = 4;
const DISASSEMBLER_REFERENCETYPE_OUT_OBJC_MESSAGE = 5;
const DISASSEMBLER_REFERENCETYPE_OUT_OBJC_MESSAGE_REF = 6;
const DISASSEMBLER_REFERENCETYPE_OUT_OBJC_SELECTOR_REF = 7;
const DISASSEMBLER_REFERENCETYPE_OUT_OBJC_CLASS_REF = 8;
const DISASSEMBLER_REFERENCETYPE_DEMANGLED_NAME = 9;
const DISASSEMBLER_OPTION_USEMARKUP = 1;
const DISASSEMBLER_OPTION_PRINTIMMHEX = 2;
const DISASSEMBLER_OPTION_ASMPRINTERVARIANT = 4;
const DISASSEMBLER_OPTION_SETINSTRCOMMENTS = 8;
const DISASSEMBLER_OPTION_PRINTLATENCY = 16;
const DISASSEMBLER_OPTION_COLOR = 32;
const ERROR_SUCCESS = 0;
const REMARKS_API_VERSION = 1;
const BLAKE3_VERSION_STRING = "1.3.1";
const BLAKE3_KEY_LEN = 32;
const BLAKE3_OUT_LEN = 32;
const BLAKE3_BLOCK_LEN = 64;
const BLAKE3_CHUNK_LEN = 1024;
const BLAKE3_MAX_DEPTH = 54;
const LTO_API_VERSION = 29;

alias LLVMBool = CInt;

typedef LLVMOpaqueMemoryBuffer = void;

alias LLVMMemoryBufferRef = LLVMOpaqueMemoryBuffer*;

typedef LLVMOpaqueContext = void;

alias LLVMContextRef = LLVMOpaqueContext*;

typedef LLVMOpaqueModule = void;

alias LLVMModuleRef = LLVMOpaqueModule*;

typedef LLVMOpaqueType = void;

alias LLVMTypeRef = LLVMOpaqueType*;

typedef LLVMOpaqueValue = void;

alias LLVMValueRef = LLVMOpaqueValue*;

typedef LLVMOpaqueBasicBlock = void;

alias LLVMBasicBlockRef = LLVMOpaqueBasicBlock*;

typedef LLVMOpaqueMetadata = void;

alias LLVMMetadataRef = LLVMOpaqueMetadata*;

typedef LLVMOpaqueNamedMDNode = void;

alias LLVMNamedMDNodeRef = LLVMOpaqueNamedMDNode*;

typedef LLVMOpaqueValueMetadataEntry = void;

alias LLVMValueMetadataEntry = LLVMOpaqueValueMetadataEntry;

typedef LLVMOpaqueBuilder = void;

alias LLVMBuilderRef = LLVMOpaqueBuilder*;

typedef LLVMOpaqueDIBuilder = void;

alias LLVMDIBuilderRef = LLVMOpaqueDIBuilder*;

typedef LLVMOpaqueModuleProvider = void;

alias LLVMModuleProviderRef = LLVMOpaqueModuleProvider*;

typedef LLVMOpaquePassManager = void;

alias LLVMPassManagerRef = LLVMOpaquePassManager*;

typedef LLVMOpaqueUse = void;

alias LLVMUseRef = LLVMOpaqueUse*;

typedef LLVMOpaqueOperandBundle = void;

alias LLVMOperandBundleRef = LLVMOpaqueOperandBundle*;

typedef LLVMOpaqueAttributeRef = void;

alias LLVMAttributeRef = LLVMOpaqueAttributeRef*;

typedef LLVMOpaqueDiagnosticInfo = void;

alias LLVMDiagnosticInfoRef = LLVMOpaqueDiagnosticInfo*;

typedef LLVMComdat = void;

alias LLVMComdatRef = LLVMComdat*;

typedef LLVMOpaqueModuleFlagEntry = void;

alias LLVMModuleFlagEntry = LLVMOpaqueModuleFlagEntry;

typedef LLVMOpaqueJITEventListener = void;

alias LLVMJITEventListenerRef = LLVMOpaqueJITEventListener*;

typedef LLVMOpaqueBinary = void;

alias LLVMBinaryRef = LLVMOpaqueBinary*;

typedef LLVMOpaqueDbgRecord = void;

alias LLVMDbgRecordRef = LLVMOpaqueDbgRecord*;

typedef LLVMVerifierFailureAction = inline CUInt;
const LLVMVerifierFailureAction ABORT_PROCESS_ACTION = 0;
const LLVMVerifierFailureAction PRINT_MESSAGE_ACTION = 1;
const LLVMVerifierFailureAction RETURN_STATUS_ACTION = 2;

fn LLVMBool verifyModule(
  LLVMModuleRef m, 
  LLVMVerifierFailureAction action, 
  CChar** out_message)
@extern("LLVMVerifyModule");

fn LLVMBool verifyFunction(
  LLVMValueRef fn_, 
  LLVMVerifierFailureAction action)
@extern("LLVMVerifyFunction");

fn void viewFunctionCFG(
  LLVMValueRef fn_)
@extern("LLVMViewFunctionCFG");

fn void viewFunctionCFGOnly(
  LLVMValueRef fn_)
@extern("LLVMViewFunctionCFGOnly");

fn LLVMBool parseBitcode(
  LLVMMemoryBufferRef mem_buf, 
  LLVMModuleRef* out_module, 
  CChar** out_message)
@extern("LLVMParseBitcode");

fn LLVMBool parseBitcode2(
  LLVMMemoryBufferRef mem_buf, 
  LLVMModuleRef* out_module)
@extern("LLVMParseBitcode2");

fn LLVMBool parseBitcodeInContext(
  LLVMContextRef context_ref, 
  LLVMMemoryBufferRef mem_buf, 
  LLVMModuleRef* out_module, 
  CChar** out_message)
@extern("LLVMParseBitcodeInContext");

fn LLVMBool parseBitcodeInContext2(
  LLVMContextRef context_ref, 
  LLVMMemoryBufferRef mem_buf, 
  LLVMModuleRef* out_module)
@extern("LLVMParseBitcodeInContext2");

fn LLVMBool getBitcodeModuleInContext(
  LLVMContextRef context_ref, 
  LLVMMemoryBufferRef mem_buf, 
  LLVMModuleRef* out_m, 
  CChar** out_message)
@extern("LLVMGetBitcodeModuleInContext");

fn LLVMBool getBitcodeModuleInContext2(
  LLVMContextRef context_ref, 
  LLVMMemoryBufferRef mem_buf, 
  LLVMModuleRef* out_m)
@extern("LLVMGetBitcodeModuleInContext2");

fn LLVMBool getBitcodeModule(
  LLVMMemoryBufferRef mem_buf, 
  LLVMModuleRef* out_m, 
  CChar** out_message)
@extern("LLVMGetBitcodeModule");

fn LLVMBool getBitcodeModule2(
  LLVMMemoryBufferRef mem_buf, 
  LLVMModuleRef* out_m)
@extern("LLVMGetBitcodeModule2");

fn CInt writeBitcodeToFile(
  LLVMModuleRef m, 
  CChar* path)
@extern("LLVMWriteBitcodeToFile");

fn CInt writeBitcodeToFD(
  LLVMModuleRef m, 
  CInt fd, 
  CInt should_close, 
  CInt unbuffered)
@extern("LLVMWriteBitcodeToFD");

fn CInt writeBitcodeToFileHandle(
  LLVMModuleRef m, 
  CInt handle)
@extern("LLVMWriteBitcodeToFileHandle");

fn LLVMMemoryBufferRef writeBitcodeToMemoryBuffer(
  LLVMModuleRef m)
@extern("LLVMWriteBitcodeToMemoryBuffer");

typedef LLVMComdatSelectionKind = inline CUInt;
const LLVMComdatSelectionKind ANY_COMDAT_SELECTION_KIND = 0;
const LLVMComdatSelectionKind EXACT_MATCH_COMDAT_SELECTION_KIND = 1;
const LLVMComdatSelectionKind LARGEST_COMDAT_SELECTION_KIND = 2;
const LLVMComdatSelectionKind NO_DEDUPLICATE_COMDAT_SELECTION_KIND = 3;
const LLVMComdatSelectionKind SAME_SIZE_COMDAT_SELECTION_KIND = 4;

fn LLVMComdatRef getOrInsertComdat(
  LLVMModuleRef m, 
  CChar* name)
@extern("LLVMGetOrInsertComdat");

fn LLVMComdatRef getComdat(
  LLVMValueRef v)
@extern("LLVMGetComdat");

fn void setComdat(
  LLVMValueRef v, 
  LLVMComdatRef c)
@extern("LLVMSetComdat");

fn LLVMComdatSelectionKind getComdatSelectionKind(
  LLVMComdatRef c)
@extern("LLVMGetComdatSelectionKind");

fn void setComdatSelectionKind(
  LLVMComdatRef c, 
  LLVMComdatSelectionKind kind)
@extern("LLVMSetComdatSelectionKind");

alias LLVMFatalErrorHandler = fn void(
  CChar* reason);

fn void installFatalErrorHandler(
  LLVMFatalErrorHandler handler)
@extern("LLVMInstallFatalErrorHandler");

fn void resetFatalErrorHandler()
@extern("LLVMResetFatalErrorHandler");

fn void enablePrettyStackTrace()
@extern("LLVMEnablePrettyStackTrace");

typedef LLVMOpcode = inline CUInt;
const LLVMOpcode RET = 1;
const LLVMOpcode BR = 2;
const LLVMOpcode SWITCH = 3;
const LLVMOpcode INDIRECT_BR = 4;
const LLVMOpcode INVOKE = 5;
const LLVMOpcode UNREACHABLE = 7;
const LLVMOpcode CALL_BR = 67;
const LLVMOpcode F_NEG = 66;
const LLVMOpcode ADD = 8;
const LLVMOpcode F_ADD = 9;
const LLVMOpcode SUB = 10;
const LLVMOpcode F_SUB = 11;
const LLVMOpcode MUL = 12;
const LLVMOpcode F_MUL = 13;
const LLVMOpcode U_DIV = 14;
const LLVMOpcode S_DIV = 15;
const LLVMOpcode F_DIV = 16;
const LLVMOpcode U_REM = 17;
const LLVMOpcode S_REM = 18;
const LLVMOpcode F_REM = 19;
const LLVMOpcode SHL = 20;
const LLVMOpcode L_SHR = 21;
const LLVMOpcode A_SHR = 22;
const LLVMOpcode AND = 23;
const LLVMOpcode OR = 24;
const LLVMOpcode XOR = 25;
const LLVMOpcode ALLOCA = 26;
const LLVMOpcode LOAD = 27;
const LLVMOpcode STORE = 28;
const LLVMOpcode GET_ELEMENT_PTR = 29;
const LLVMOpcode TRUNC = 30;
const LLVMOpcode Z_EXT = 31;
const LLVMOpcode S_EXT = 32;
const LLVMOpcode FP_TO_UI = 33;
const LLVMOpcode FP_TO_SI = 34;
const LLVMOpcode UI_TO_FP = 35;
const LLVMOpcode SI_TO_FP = 36;
const LLVMOpcode FP_TRUNC = 37;
const LLVMOpcode FP_EXT = 38;
const LLVMOpcode PTR_TO_INT = 39;
const LLVMOpcode INT_TO_PTR = 40;
const LLVMOpcode BIT_CAST = 41;
const LLVMOpcode ADDR_SPACE_CAST = 60;
const LLVMOpcode I_CMP = 42;
const LLVMOpcode F_CMP = 43;
const LLVMOpcode PHI = 44;
const LLVMOpcode CALL = 45;
const LLVMOpcode SELECT = 46;
const LLVMOpcode USER_OP_1 = 47;
const LLVMOpcode USER_OP_2 = 48;
const LLVMOpcode VA_ARG = 49;
const LLVMOpcode EXTRACT_ELEMENT = 50;
const LLVMOpcode INSERT_ELEMENT = 51;
const LLVMOpcode SHUFFLE_VECTOR = 52;
const LLVMOpcode EXTRACT_VALUE = 53;
const LLVMOpcode INSERT_VALUE = 54;
const LLVMOpcode FREEZE = 68;
const LLVMOpcode FENCE = 55;
const LLVMOpcode ATOMIC_CMP_XCHG = 56;
const LLVMOpcode ATOMIC_RMW = 57;
const LLVMOpcode RESUME = 58;
const LLVMOpcode LANDING_PAD = 59;
const LLVMOpcode CLEANUP_RET = 61;
const LLVMOpcode CATCH_RET = 62;
const LLVMOpcode CATCH_PAD = 63;
const LLVMOpcode CLEANUP_PAD = 64;
const LLVMOpcode CATCH_SWITCH = 65;

typedef LLVMTypeKind = inline CUInt;
const LLVMTypeKind VOID_TYPE_KIND = 0;
const LLVMTypeKind HALF_TYPE_KIND = 1;
const LLVMTypeKind FLOAT_TYPE_KIND = 2;
const LLVMTypeKind DOUBLE_TYPE_KIND = 3;
const LLVMTypeKind X_86__F_P_80_TYPE_KIND = 4;
const LLVMTypeKind F_P_128_TYPE_KIND = 5;
const LLVMTypeKind PP_C__F_P_128_TYPE_KIND = 6;
const LLVMTypeKind LABEL_TYPE_KIND = 7;
const LLVMTypeKind INTEGER_TYPE_KIND = 8;
const LLVMTypeKind FUNCTION_TYPE_KIND = 9;
const LLVMTypeKind STRUCT_TYPE_KIND = 10;
const LLVMTypeKind ARRAY_TYPE_KIND = 11;
const LLVMTypeKind POINTER_TYPE_KIND = 12;
const LLVMTypeKind VECTOR_TYPE_KIND = 13;
const LLVMTypeKind METADATA_TYPE_KIND = 14;
const LLVMTypeKind TOKEN_TYPE_KIND = 16;
const LLVMTypeKind SCALABLE_VECTOR_TYPE_KIND = 17;
const LLVMTypeKind B_FLOAT_TYPE_KIND = 18;
const LLVMTypeKind X_86__AMX_TYPE_KIND = 19;
const LLVMTypeKind TARGET_EXT_TYPE_KIND = 20;

typedef LLVMLinkage = inline CUInt;
const LLVMLinkage EXTERNAL_LINKAGE = 0;
const LLVMLinkage AVAILABLE_EXTERNALLY_LINKAGE = 1;
const LLVMLinkage LINK_ONCE_ANY_LINKAGE = 2;
const LLVMLinkage LINK_ONCE_ODR_LINKAGE = 3;
const LLVMLinkage LINK_ONCE_ODR_AUTO_HIDE_LINKAGE = 4;
const LLVMLinkage WEAK_ANY_LINKAGE = 5;
const LLVMLinkage WEAK_ODR_LINKAGE = 6;
const LLVMLinkage APPENDING_LINKAGE = 7;
const LLVMLinkage INTERNAL_LINKAGE = 8;
const LLVMLinkage PRIVATE_LINKAGE = 9;
const LLVMLinkage DLL_IMPORT_LINKAGE = 10;
const LLVMLinkage DLL_EXPORT_LINKAGE = 11;
const LLVMLinkage EXTERNAL_WEAK_LINKAGE = 12;
const LLVMLinkage GHOST_LINKAGE = 13;
const LLVMLinkage COMMON_LINKAGE = 14;
const LLVMLinkage LINKER_PRIVATE_LINKAGE = 15;
const LLVMLinkage LINKER_PRIVATE_WEAK_LINKAGE = 16;

typedef LLVMVisibility = inline CUInt;
const LLVMVisibility DEFAULT_VISIBILITY = 0;
const LLVMVisibility HIDDEN_VISIBILITY = 1;
const LLVMVisibility PROTECTED_VISIBILITY = 2;

typedef LLVMUnnamedAddr = inline CUInt;
const LLVMUnnamedAddr NO_UNNAMED_ADDR = 0;
const LLVMUnnamedAddr LOCAL_UNNAMED_ADDR = 1;
const LLVMUnnamedAddr GLOBAL_UNNAMED_ADDR = 2;

typedef LLVMDLLStorageClass = inline CUInt;
const LLVMDLLStorageClass DEFAULT_STORAGE_CLASS = 0;
const LLVMDLLStorageClass DLL_IMPORT_STORAGE_CLASS = 1;
const LLVMDLLStorageClass DLL_EXPORT_STORAGE_CLASS = 2;

typedef LLVMCallConv = inline CUInt;
const LLVMCallConv C_CALL_CONV = 0;
const LLVMCallConv FAST_CALL_CONV = 8;
const LLVMCallConv COLD_CALL_CONV = 9;
const LLVMCallConv GHC_CALL_CONV = 10;
const LLVMCallConv HI_PE_CALL_CONV = 11;
const LLVMCallConv ANY_REG_CALL_CONV = 13;
const LLVMCallConv PRESERVE_MOST_CALL_CONV = 14;
const LLVMCallConv PRESERVE_ALL_CALL_CONV = 15;
const LLVMCallConv SWIFT_CALL_CONV = 16;
const LLVMCallConv CXXFASTTLS_CALL_CONV = 17;
const LLVMCallConv X_86_STDCALL_CALL_CONV = 64;
const LLVMCallConv X_86_FASTCALL_CALL_CONV = 65;
const LLVMCallConv ARMAPCS_CALL_CONV = 66;
const LLVMCallConv ARMAAPCS_CALL_CONV = 67;
const LLVMCallConv ARMAAPCSVFP_CALL_CONV = 68;
const LLVMCallConv MS_P_430_INTR_CALL_CONV = 69;
const LLVMCallConv X_86_THIS_CALL_CALL_CONV = 70;
const LLVMCallConv PTX_KERNEL_CALL_CONV = 71;
const LLVMCallConv PTX_DEVICE_CALL_CONV = 72;
const LLVMCallConv SPIRFUNC_CALL_CONV = 75;
const LLVMCallConv SPIRKERNEL_CALL_CONV = 76;
const LLVMCallConv INTEL_OCLBI_CALL_CONV = 77;
const LLVMCallConv X_8664_SYS_V_CALL_CONV = 78;
const LLVMCallConv WIN_64_CALL_CONV = 79;
const LLVMCallConv X_86_VECTOR_CALL_CALL_CONV = 80;
const LLVMCallConv HHVM_CALL_CONV = 81;
const LLVMCallConv HHVMC_CALL_CONV = 82;
const LLVMCallConv X_86_INTR_CALL_CONV = 83;
const LLVMCallConv AVRINTR_CALL_CONV = 84;
const LLVMCallConv AVRSIGNAL_CALL_CONV = 85;
const LLVMCallConv AVRBUILTIN_CALL_CONV = 86;
const LLVMCallConv AMDGPUVS_CALL_CONV = 87;
const LLVMCallConv AMDGPUGS_CALL_CONV = 88;
const LLVMCallConv AMDGPUPS_CALL_CONV = 89;
const LLVMCallConv AMDGPUCS_CALL_CONV = 90;
const LLVMCallConv AMDGPUKERNEL_CALL_CONV = 91;
const LLVMCallConv X_86_REG_CALL_CALL_CONV = 92;
const LLVMCallConv AMDGPUHS_CALL_CONV = 93;
const LLVMCallConv MS_P_430_BUILTIN_CALL_CONV = 94;
const LLVMCallConv AMDGPULS_CALL_CONV = 95;
const LLVMCallConv AMDGPUES_CALL_CONV = 96;

typedef LLVMValueKind = inline CUInt;
const LLVMValueKind ARGUMENT_VALUE_KIND = 0;
const LLVMValueKind BASIC_BLOCK_VALUE_KIND = 1;
const LLVMValueKind MEMORY_USE_VALUE_KIND = 2;
const LLVMValueKind MEMORY_DEF_VALUE_KIND = 3;
const LLVMValueKind MEMORY_PHI_VALUE_KIND = 4;
const LLVMValueKind FUNCTION_VALUE_KIND = 5;
const LLVMValueKind GLOBAL_ALIAS_VALUE_KIND = 6;
const LLVMValueKind GLOBAL_I_FUNC_VALUE_KIND = 7;
const LLVMValueKind GLOBAL_VARIABLE_VALUE_KIND = 8;
const LLVMValueKind BLOCK_ADDRESS_VALUE_KIND = 9;
const LLVMValueKind CONSTANT_EXPR_VALUE_KIND = 10;
const LLVMValueKind CONSTANT_ARRAY_VALUE_KIND = 11;
const LLVMValueKind CONSTANT_STRUCT_VALUE_KIND = 12;
const LLVMValueKind CONSTANT_VECTOR_VALUE_KIND = 13;
const LLVMValueKind UNDEF_VALUE_VALUE_KIND = 14;
const LLVMValueKind CONSTANT_AGGREGATE_ZERO_VALUE_KIND = 15;
const LLVMValueKind CONSTANT_DATA_ARRAY_VALUE_KIND = 16;
const LLVMValueKind CONSTANT_DATA_VECTOR_VALUE_KIND = 17;
const LLVMValueKind CONSTANT_INT_VALUE_KIND = 18;
const LLVMValueKind CONSTANT_FP_VALUE_KIND = 19;
const LLVMValueKind CONSTANT_POINTER_NULL_VALUE_KIND = 20;
const LLVMValueKind CONSTANT_TOKEN_NONE_VALUE_KIND = 21;
const LLVMValueKind METADATA_AS_VALUE_VALUE_KIND = 22;
const LLVMValueKind INLINE_ASM_VALUE_KIND = 23;
const LLVMValueKind INSTRUCTION_VALUE_KIND = 24;
const LLVMValueKind POISON_VALUE_VALUE_KIND = 25;
const LLVMValueKind CONSTANT_TARGET_NONE_VALUE_KIND = 26;
const LLVMValueKind CONSTANT_PTR_AUTH_VALUE_KIND = 27;

typedef LLVMIntPredicate = inline CUInt;
const LLVMIntPredicate INT_EQ = 32;
const LLVMIntPredicate INT_NE = 33;
const LLVMIntPredicate INT_UGT = 34;
const LLVMIntPredicate INT_UGE = 35;
const LLVMIntPredicate INT_ULT = 36;
const LLVMIntPredicate INT_ULE = 37;
const LLVMIntPredicate INT_SGT = 38;
const LLVMIntPredicate INT_SGE = 39;
const LLVMIntPredicate INT_SLT = 40;
const LLVMIntPredicate INT_SLE = 41;

typedef LLVMRealPredicate = inline CUInt;
const LLVMRealPredicate REAL_PREDICATE_FALSE = 0;
const LLVMRealPredicate REAL_OEQ = 1;
const LLVMRealPredicate REAL_OGT = 2;
const LLVMRealPredicate REAL_OGE = 3;
const LLVMRealPredicate REAL_OLT = 4;
const LLVMRealPredicate REAL_OLE = 5;
const LLVMRealPredicate REAL_ONE = 6;
const LLVMRealPredicate REAL_ORD = 7;
const LLVMRealPredicate REAL_UNO = 8;
const LLVMRealPredicate REAL_UEQ = 9;
const LLVMRealPredicate REAL_UGT = 10;
const LLVMRealPredicate REAL_UGE = 11;
const LLVMRealPredicate REAL_ULT = 12;
const LLVMRealPredicate REAL_ULE = 13;
const LLVMRealPredicate REAL_UNE = 14;
const LLVMRealPredicate REAL_PREDICATE_TRUE = 15;

typedef LLVMLandingPadClauseTy = inline CUInt;
const LLVMLandingPadClauseTy LANDING_PAD_CATCH = 0;
const LLVMLandingPadClauseTy LANDING_PAD_FILTER = 1;

typedef LLVMThreadLocalMode = inline CUInt;
const LLVMThreadLocalMode NOT_THREAD_LOCAL = 0;
const LLVMThreadLocalMode GENERAL_DYNAMIC_TLS_MODEL = 1;
const LLVMThreadLocalMode LOCAL_DYNAMIC_TLS_MODEL = 2;
const LLVMThreadLocalMode INITIAL_EXEC_TLS_MODEL = 3;
const LLVMThreadLocalMode LOCAL_EXEC_TLS_MODEL = 4;

typedef LLVMAtomicOrdering = inline CUInt;
const LLVMAtomicOrdering ATOMIC_ORDERING_NOT_ATOMIC = 0;
const LLVMAtomicOrdering ATOMIC_ORDERING_UNORDERED = 1;
const LLVMAtomicOrdering ATOMIC_ORDERING_MONOTONIC = 2;
const LLVMAtomicOrdering ATOMIC_ORDERING_ACQUIRE = 4;
const LLVMAtomicOrdering ATOMIC_ORDERING_RELEASE = 5;
const LLVMAtomicOrdering ATOMIC_ORDERING_ACQUIRE_RELEASE = 6;
const LLVMAtomicOrdering ATOMIC_ORDERING_SEQUENTIALLY_CONSISTENT = 7;

typedef LLVMAtomicRMWBinOp = inline CUInt;
const LLVMAtomicRMWBinOp ATOMIC_RMW_BIN_OP_XCHG = 0;
const LLVMAtomicRMWBinOp ATOMIC_RMW_BIN_OP_ADD = 1;
const LLVMAtomicRMWBinOp ATOMIC_RMW_BIN_OP_SUB = 2;
const LLVMAtomicRMWBinOp ATOMIC_RMW_BIN_OP_AND = 3;
const LLVMAtomicRMWBinOp ATOMIC_RMW_BIN_OP_NAND = 4;
const LLVMAtomicRMWBinOp ATOMIC_RMW_BIN_OP_OR = 5;
const LLVMAtomicRMWBinOp ATOMIC_RMW_BIN_OP_XOR = 6;
const LLVMAtomicRMWBinOp ATOMIC_RMW_BIN_OP_MAX = 7;
const LLVMAtomicRMWBinOp ATOMIC_RMW_BIN_OP_MIN = 8;
const LLVMAtomicRMWBinOp ATOMIC_RMW_BIN_OP_U_MAX = 9;
const LLVMAtomicRMWBinOp ATOMIC_RMW_BIN_OP_U_MIN = 10;
const LLVMAtomicRMWBinOp ATOMIC_RMW_BIN_OP_F_ADD = 11;
const LLVMAtomicRMWBinOp ATOMIC_RMW_BIN_OP_F_SUB = 12;
const LLVMAtomicRMWBinOp ATOMIC_RMW_BIN_OP_F_MAX = 13;
const LLVMAtomicRMWBinOp ATOMIC_RMW_BIN_OP_F_MIN = 14;
const LLVMAtomicRMWBinOp ATOMIC_RMW_BIN_OP_U_INC_WRAP = 15;
const LLVMAtomicRMWBinOp ATOMIC_RMW_BIN_OP_U_DEC_WRAP = 16;
const LLVMAtomicRMWBinOp ATOMIC_RMW_BIN_OP_U_SUB_COND = 17;
const LLVMAtomicRMWBinOp ATOMIC_RMW_BIN_OP_U_SUB_SAT = 18;

typedef LLVMDiagnosticSeverity = inline CUInt;
const LLVMDiagnosticSeverity DS_ERROR = 0;
const LLVMDiagnosticSeverity DS_WARNING = 1;
const LLVMDiagnosticSeverity DS_REMARK = 2;
const LLVMDiagnosticSeverity DS_NOTE = 3;

typedef LLVMInlineAsmDialect = inline CUInt;
const LLVMInlineAsmDialect INLINE_ASM_DIALECT_ATT = 0;
const LLVMInlineAsmDialect INLINE_ASM_DIALECT_INTEL = 1;

typedef LLVMModuleFlagBehavior = inline CUInt;
const LLVMModuleFlagBehavior MODULE_FLAG_BEHAVIOR_ERROR = 0;
const LLVMModuleFlagBehavior MODULE_FLAG_BEHAVIOR_WARNING = 1;
const LLVMModuleFlagBehavior MODULE_FLAG_BEHAVIOR_REQUIRE = 2;
const LLVMModuleFlagBehavior MODULE_FLAG_BEHAVIOR_OVERRIDE = 3;
const LLVMModuleFlagBehavior MODULE_FLAG_BEHAVIOR_APPEND = 4;
const LLVMModuleFlagBehavior MODULE_FLAG_BEHAVIOR_APPEND_UNIQUE = 5;
const CInt ATTRIBUTE_RETURN_INDEX = 0U;
const CInt ATTRIBUTE_FUNCTION_INDEX = -1;

alias LLVMAttributeIndex = CUInt;

typedef LLVMTailCallKind = inline CUInt;
const LLVMTailCallKind TAIL_CALL_KIND_NONE = 0;
const LLVMTailCallKind TAIL_CALL_KIND_TAIL = 1;
const LLVMTailCallKind TAIL_CALL_KIND_MUST_TAIL = 2;
const LLVMTailCallKind TAIL_CALL_KIND_NO_TAIL = 3;
const CUInt FAST_MATH_ALLOW_REASSOC = (1<<0);
const CUInt FAST_MATH_NO_NA_NS = (1<<1);
const CUInt FAST_MATH_NO_INFS = (1<<2);
const CUInt FAST_MATH_NO_SIGNED_ZEROS = (1<<3);
const CUInt FAST_MATH_ALLOW_RECIPROCAL = (1<<4);
const CUInt FAST_MATH_ALLOW_CONTRACT = (1<<5);
const CUInt FAST_MATH_APPROX_FUNC = (1<<6);
const CUInt FAST_MATH_NONE = 0;
const CUInt FAST_MATH_ALL = FAST_MATH_ALLOW_REASSOC|FAST_MATH_NO_NA_NS|FAST_MATH_NO_INFS|FAST_MATH_NO_SIGNED_ZEROS|FAST_MATH_ALLOW_RECIPROCAL|FAST_MATH_ALLOW_CONTRACT|FAST_MATH_APPROX_FUNC;

alias LLVMFastMathFlags = CUInt;

const CUInt GEP_FLAG_IN_BOUNDS = (1<<0);
const CUInt GEP_FLAG_NUSW = (1<<1);
const CUInt GEP_FLAG_NUW = (1<<2);

alias LLVMGEPNoWrapFlags = CUInt;

fn void shutdown()
@extern("LLVMShutdown");

fn void getVersion(
  CUInt* major, 
  CUInt* minor, 
  CUInt* patch)
@extern("LLVMGetVersion");

fn CChar* createMessage(
  CChar* message)
@extern("LLVMCreateMessage");

fn void disposeMessage(
  CChar* message)
@extern("LLVMDisposeMessage");

alias LLVMDiagnosticHandler = fn void(
  LLVMDiagnosticInfoRef, 
  void*);

alias LLVMYieldCallback = fn void(
  LLVMContextRef, 
  void*);

fn LLVMContextRef contextCreate()
@extern("LLVMContextCreate");

fn LLVMContextRef getGlobalContext()
@extern("LLVMGetGlobalContext");

fn void contextSetDiagnosticHandler(
  LLVMContextRef c, 
  LLVMDiagnosticHandler handler, 
  void* diagnostic_context)
@extern("LLVMContextSetDiagnosticHandler");

fn LLVMDiagnosticHandler contextGetDiagnosticHandler(
  LLVMContextRef c)
@extern("LLVMContextGetDiagnosticHandler");

fn void* contextGetDiagnosticContext(
  LLVMContextRef c)
@extern("LLVMContextGetDiagnosticContext");

fn void contextSetYieldCallback(
  LLVMContextRef c, 
  LLVMYieldCallback callback, 
  void* opaque_handle)
@extern("LLVMContextSetYieldCallback");

fn LLVMBool contextShouldDiscardValueNames(
  LLVMContextRef c)
@extern("LLVMContextShouldDiscardValueNames");

fn void contextSetDiscardValueNames(
  LLVMContextRef c, 
  LLVMBool discard)
@extern("LLVMContextSetDiscardValueNames");

fn void contextDispose(
  LLVMContextRef c)
@extern("LLVMContextDispose");

fn CChar* getDiagInfoDescription(
  LLVMDiagnosticInfoRef di)
@extern("LLVMGetDiagInfoDescription");

fn LLVMDiagnosticSeverity getDiagInfoSeverity(
  LLVMDiagnosticInfoRef di)
@extern("LLVMGetDiagInfoSeverity");

fn CUInt getMDKindIDInContext(
  LLVMContextRef c, 
  CChar* name, 
  CUInt s_len)
@extern("LLVMGetMDKindIDInContext");

fn CUInt getMDKindID(
  CChar* name, 
  CUInt s_len)
@extern("LLVMGetMDKindID");

fn CUInt getSyncScopeID(
  LLVMContextRef c, 
  CChar* name, 
  usz s_len)
@extern("LLVMGetSyncScopeID");

fn CUInt getEnumAttributeKindForName(
  CChar* name, 
  usz s_len)
@extern("LLVMGetEnumAttributeKindForName");

fn CUInt getLastEnumAttributeKind()
@extern("LLVMGetLastEnumAttributeKind");

fn LLVMAttributeRef createEnumAttribute(
  LLVMContextRef c, 
  CUInt kind_id, 
  ulong val)
@extern("LLVMCreateEnumAttribute");

fn CUInt getEnumAttributeKind(
  LLVMAttributeRef a)
@extern("LLVMGetEnumAttributeKind");

fn ulong getEnumAttributeValue(
  LLVMAttributeRef a)
@extern("LLVMGetEnumAttributeValue");

fn LLVMAttributeRef createTypeAttribute(
  LLVMContextRef c, 
  CUInt kind_id, 
  LLVMTypeRef type_ref)
@extern("LLVMCreateTypeAttribute");

fn LLVMTypeRef getTypeAttributeValue(
  LLVMAttributeRef a)
@extern("LLVMGetTypeAttributeValue");

fn LLVMAttributeRef createConstantRangeAttribute(
  LLVMContextRef c, 
  CUInt kind_id, 
  CUInt num_bits, 
  ulong* lower_words, 
  ulong* upper_words)
@extern("LLVMCreateConstantRangeAttribute");

fn LLVMAttributeRef createStringAttribute(
  LLVMContextRef c, 
  CChar* k, 
  CUInt k_length, 
  CChar* v, 
  CUInt v_length)
@extern("LLVMCreateStringAttribute");

fn CChar* getStringAttributeKind(
  LLVMAttributeRef a, 
  CUInt* length)
@extern("LLVMGetStringAttributeKind");

fn CChar* getStringAttributeValue(
  LLVMAttributeRef a, 
  CUInt* length)
@extern("LLVMGetStringAttributeValue");

fn LLVMBool isEnumAttribute(
  LLVMAttributeRef a)
@extern("LLVMIsEnumAttribute");

fn LLVMBool isStringAttribute(
  LLVMAttributeRef a)
@extern("LLVMIsStringAttribute");

fn LLVMBool isTypeAttribute(
  LLVMAttributeRef a)
@extern("LLVMIsTypeAttribute");

fn LLVMTypeRef getTypeByName2(
  LLVMContextRef c, 
  CChar* name)
@extern("LLVMGetTypeByName2");

fn LLVMModuleRef moduleCreateWithName(
  CChar* module_id)
@extern("LLVMModuleCreateWithName");

fn LLVMModuleRef moduleCreateWithNameInContext(
  CChar* module_id, 
  LLVMContextRef c)
@extern("LLVMModuleCreateWithNameInContext");

fn LLVMModuleRef cloneModule(
  LLVMModuleRef m)
@extern("LLVMCloneModule");

fn void disposeModule(
  LLVMModuleRef m)
@extern("LLVMDisposeModule");

fn LLVMBool isNewDbgInfoFormat(
  LLVMModuleRef m)
@extern("LLVMIsNewDbgInfoFormat");

fn void setIsNewDbgInfoFormat(
  LLVMModuleRef m, 
  LLVMBool use_new_format)
@extern("LLVMSetIsNewDbgInfoFormat");

fn CChar* getModuleIdentifier(
  LLVMModuleRef m, 
  usz* len)
@extern("LLVMGetModuleIdentifier");

fn void setModuleIdentifier(
  LLVMModuleRef m, 
  CChar* ident, 
  usz len)
@extern("LLVMSetModuleIdentifier");

fn CChar* getSourceFileName(
  LLVMModuleRef m, 
  usz* len)
@extern("LLVMGetSourceFileName");

fn void setSourceFileName(
  LLVMModuleRef m, 
  CChar* name, 
  usz len)
@extern("LLVMSetSourceFileName");

fn CChar* getDataLayoutStr(
  LLVMModuleRef m)
@extern("LLVMGetDataLayoutStr");

fn CChar* getDataLayout(
  LLVMModuleRef m)
@extern("LLVMGetDataLayout");

fn void setDataLayout(
  LLVMModuleRef m, 
  CChar* data_layout_str)
@extern("LLVMSetDataLayout");

fn CChar* getTarget(
  LLVMModuleRef m)
@extern("LLVMGetTarget");

fn void setTarget(
  LLVMModuleRef m, 
  CChar* triple)
@extern("LLVMSetTarget");

fn LLVMModuleFlagEntry* copyModuleFlagsMetadata(
  LLVMModuleRef m, 
  usz* len)
@extern("LLVMCopyModuleFlagsMetadata");

fn void disposeModuleFlagsMetadata(
  LLVMModuleFlagEntry* entries)
@extern("LLVMDisposeModuleFlagsMetadata");

fn LLVMModuleFlagBehavior moduleFlagEntriesGetFlagBehavior(
  LLVMModuleFlagEntry* entries, 
  CUInt index)
@extern("LLVMModuleFlagEntriesGetFlagBehavior");

fn CChar* moduleFlagEntriesGetKey(
  LLVMModuleFlagEntry* entries, 
  CUInt index, 
  usz* len)
@extern("LLVMModuleFlagEntriesGetKey");

fn LLVMMetadataRef moduleFlagEntriesGetMetadata(
  LLVMModuleFlagEntry* entries, 
  CUInt index)
@extern("LLVMModuleFlagEntriesGetMetadata");

fn LLVMMetadataRef getModuleFlag(
  LLVMModuleRef m, 
  CChar* key, 
  usz key_len)
@extern("LLVMGetModuleFlag");

fn void addModuleFlag(
  LLVMModuleRef m, 
  LLVMModuleFlagBehavior behavior, 
  CChar* key, 
  usz key_len, 
  LLVMMetadataRef val)
@extern("LLVMAddModuleFlag");

fn void dumpModule(
  LLVMModuleRef m)
@extern("LLVMDumpModule");

fn LLVMBool printModuleToFile(
  LLVMModuleRef m, 
  CChar* filename, 
  CChar** error_message)
@extern("LLVMPrintModuleToFile");

fn CChar* printModuleToString(
  LLVMModuleRef m)
@extern("LLVMPrintModuleToString");

fn CChar* getModuleInlineAsm(
  LLVMModuleRef m, 
  usz* len)
@extern("LLVMGetModuleInlineAsm");

fn void setModuleInlineAsm2(
  LLVMModuleRef m, 
  CChar* asm_, 
  usz len)
@extern("LLVMSetModuleInlineAsm2");

fn void appendModuleInlineAsm(
  LLVMModuleRef m, 
  CChar* asm_, 
  usz len)
@extern("LLVMAppendModuleInlineAsm");

fn LLVMValueRef getInlineAsm(
  LLVMTypeRef ty, 
  CChar* asm_string, 
  usz asm_string_size, 
  CChar* constraints, 
  usz constraints_size, 
  LLVMBool has_side_effects, 
  LLVMBool is_align_stack, 
  LLVMInlineAsmDialect dialect, 
  LLVMBool can_throw)
@extern("LLVMGetInlineAsm");

fn CChar* getInlineAsmAsmString(
  LLVMValueRef inline_asm_val, 
  usz* len)
@extern("LLVMGetInlineAsmAsmString");

fn CChar* getInlineAsmConstraintString(
  LLVMValueRef inline_asm_val, 
  usz* len)
@extern("LLVMGetInlineAsmConstraintString");

fn LLVMInlineAsmDialect getInlineAsmDialect(
  LLVMValueRef inline_asm_val)
@extern("LLVMGetInlineAsmDialect");

fn LLVMTypeRef getInlineAsmFunctionType(
  LLVMValueRef inline_asm_val)
@extern("LLVMGetInlineAsmFunctionType");

fn LLVMBool getInlineAsmHasSideEffects(
  LLVMValueRef inline_asm_val)
@extern("LLVMGetInlineAsmHasSideEffects");

fn LLVMBool getInlineAsmNeedsAlignedStack(
  LLVMValueRef inline_asm_val)
@extern("LLVMGetInlineAsmNeedsAlignedStack");

fn LLVMBool getInlineAsmCanUnwind(
  LLVMValueRef inline_asm_val)
@extern("LLVMGetInlineAsmCanUnwind");

fn LLVMContextRef getModuleContext(
  LLVMModuleRef m)
@extern("LLVMGetModuleContext");

fn LLVMTypeRef getTypeByName(
  LLVMModuleRef m, 
  CChar* name)
@extern("LLVMGetTypeByName");

fn LLVMNamedMDNodeRef getFirstNamedMetadata(
  LLVMModuleRef m)
@extern("LLVMGetFirstNamedMetadata");

fn LLVMNamedMDNodeRef getLastNamedMetadata(
  LLVMModuleRef m)
@extern("LLVMGetLastNamedMetadata");

fn LLVMNamedMDNodeRef getNextNamedMetadata(
  LLVMNamedMDNodeRef named_md_node)
@extern("LLVMGetNextNamedMetadata");

fn LLVMNamedMDNodeRef getPreviousNamedMetadata(
  LLVMNamedMDNodeRef named_md_node)
@extern("LLVMGetPreviousNamedMetadata");

fn LLVMNamedMDNodeRef getNamedMetadata(
  LLVMModuleRef m, 
  CChar* name, 
  usz name_len)
@extern("LLVMGetNamedMetadata");

fn LLVMNamedMDNodeRef getOrInsertNamedMetadata(
  LLVMModuleRef m, 
  CChar* name, 
  usz name_len)
@extern("LLVMGetOrInsertNamedMetadata");

fn CChar* getNamedMetadataName(
  LLVMNamedMDNodeRef named_md, 
  usz* name_len)
@extern("LLVMGetNamedMetadataName");

fn CUInt getNamedMetadataNumOperands(
  LLVMModuleRef m, 
  CChar* name)
@extern("LLVMGetNamedMetadataNumOperands");

fn void getNamedMetadataOperands(
  LLVMModuleRef m, 
  CChar* name, 
  LLVMValueRef* dest)
@extern("LLVMGetNamedMetadataOperands");

fn void addNamedMetadataOperand(
  LLVMModuleRef m, 
  CChar* name, 
  LLVMValueRef val)
@extern("LLVMAddNamedMetadataOperand");

fn CChar* getDebugLocDirectory(
  LLVMValueRef val, 
  CUInt* length)
@extern("LLVMGetDebugLocDirectory");

fn CChar* getDebugLocFilename(
  LLVMValueRef val, 
  CUInt* length)
@extern("LLVMGetDebugLocFilename");

fn CUInt getDebugLocLine(
  LLVMValueRef val)
@extern("LLVMGetDebugLocLine");

fn CUInt getDebugLocColumn(
  LLVMValueRef val)
@extern("LLVMGetDebugLocColumn");

fn LLVMValueRef addFunction(
  LLVMModuleRef m, 
  CChar* name, 
  LLVMTypeRef function_ty)
@extern("LLVMAddFunction");

fn LLVMValueRef getNamedFunction(
  LLVMModuleRef m, 
  CChar* name)
@extern("LLVMGetNamedFunction");

fn LLVMValueRef getNamedFunctionWithLength(
  LLVMModuleRef m, 
  CChar* name, 
  usz length)
@extern("LLVMGetNamedFunctionWithLength");

fn LLVMValueRef getFirstFunction(
  LLVMModuleRef m)
@extern("LLVMGetFirstFunction");

fn LLVMValueRef getLastFunction(
  LLVMModuleRef m)
@extern("LLVMGetLastFunction");

fn LLVMValueRef getNextFunction(
  LLVMValueRef fn_)
@extern("LLVMGetNextFunction");

fn LLVMValueRef getPreviousFunction(
  LLVMValueRef fn_)
@extern("LLVMGetPreviousFunction");

fn void setModuleInlineAsm(
  LLVMModuleRef m, 
  CChar* asm_)
@extern("LLVMSetModuleInlineAsm");

fn LLVMTypeKind getTypeKind(
  LLVMTypeRef ty)
@extern("LLVMGetTypeKind");

fn LLVMBool typeIsSized(
  LLVMTypeRef ty)
@extern("LLVMTypeIsSized");

fn LLVMContextRef getTypeContext(
  LLVMTypeRef ty)
@extern("LLVMGetTypeContext");

fn void dumpType(
  LLVMTypeRef val)
@extern("LLVMDumpType");

fn CChar* printTypeToString(
  LLVMTypeRef val)
@extern("LLVMPrintTypeToString");

fn LLVMTypeRef int1TypeInContext(
  LLVMContextRef c)
@extern("LLVMInt1TypeInContext");

fn LLVMTypeRef int8TypeInContext(
  LLVMContextRef c)
@extern("LLVMInt8TypeInContext");

fn LLVMTypeRef int16TypeInContext(
  LLVMContextRef c)
@extern("LLVMInt16TypeInContext");

fn LLVMTypeRef int32TypeInContext(
  LLVMContextRef c)
@extern("LLVMInt32TypeInContext");

fn LLVMTypeRef int64TypeInContext(
  LLVMContextRef c)
@extern("LLVMInt64TypeInContext");

fn LLVMTypeRef int128TypeInContext(
  LLVMContextRef c)
@extern("LLVMInt128TypeInContext");

fn LLVMTypeRef intTypeInContext(
  LLVMContextRef c, 
  CUInt num_bits)
@extern("LLVMIntTypeInContext");

fn LLVMTypeRef int1Type()
@extern("LLVMInt1Type");

fn LLVMTypeRef int8Type()
@extern("LLVMInt8Type");

fn LLVMTypeRef int16Type()
@extern("LLVMInt16Type");

fn LLVMTypeRef int32Type()
@extern("LLVMInt32Type");

fn LLVMTypeRef int64Type()
@extern("LLVMInt64Type");

fn LLVMTypeRef int128Type()
@extern("LLVMInt128Type");

fn LLVMTypeRef intType(
  CUInt num_bits)
@extern("LLVMIntType");

fn CUInt getIntTypeWidth(
  LLVMTypeRef integer_ty)
@extern("LLVMGetIntTypeWidth");

fn LLVMTypeRef halfTypeInContext(
  LLVMContextRef c)
@extern("LLVMHalfTypeInContext");

fn LLVMTypeRef bFloatTypeInContext(
  LLVMContextRef c)
@extern("LLVMBFloatTypeInContext");

fn LLVMTypeRef floatTypeInContext(
  LLVMContextRef c)
@extern("LLVMFloatTypeInContext");

fn LLVMTypeRef doubleTypeInContext(
  LLVMContextRef c)
@extern("LLVMDoubleTypeInContext");

fn LLVMTypeRef x86FP80TypeInContext(
  LLVMContextRef c)
@extern("LLVMX86FP80TypeInContext");

fn LLVMTypeRef fP128TypeInContext(
  LLVMContextRef c)
@extern("LLVMFP128TypeInContext");

fn LLVMTypeRef pPCFP128TypeInContext(
  LLVMContextRef c)
@extern("LLVMPPCFP128TypeInContext");

fn LLVMTypeRef halfType()
@extern("LLVMHalfType");

fn LLVMTypeRef bFloatType()
@extern("LLVMBFloatType");

fn LLVMTypeRef floatType()
@extern("LLVMFloatType");

fn LLVMTypeRef doubleType()
@extern("LLVMDoubleType");

fn LLVMTypeRef x86FP80Type()
@extern("LLVMX86FP80Type");

fn LLVMTypeRef fP128Type()
@extern("LLVMFP128Type");

fn LLVMTypeRef pPCFP128Type()
@extern("LLVMPPCFP128Type");

fn LLVMTypeRef functionType(
  LLVMTypeRef return_type, 
  LLVMTypeRef* param_types, 
  CUInt param_count, 
  LLVMBool is_var_arg)
@extern("LLVMFunctionType");

fn LLVMBool isFunctionVarArg(
  LLVMTypeRef function_ty)
@extern("LLVMIsFunctionVarArg");

fn LLVMTypeRef getReturnType(
  LLVMTypeRef function_ty)
@extern("LLVMGetReturnType");

fn CUInt countParamTypes(
  LLVMTypeRef function_ty)
@extern("LLVMCountParamTypes");

fn void getParamTypes(
  LLVMTypeRef function_ty, 
  LLVMTypeRef* dest)
@extern("LLVMGetParamTypes");

fn LLVMTypeRef structTypeInContext(
  LLVMContextRef c, 
  LLVMTypeRef* element_types, 
  CUInt element_count, 
  LLVMBool packed)
@extern("LLVMStructTypeInContext");

fn LLVMTypeRef structType(
  LLVMTypeRef* element_types, 
  CUInt element_count, 
  LLVMBool packed)
@extern("LLVMStructType");

fn LLVMTypeRef structCreateNamed(
  LLVMContextRef c, 
  CChar* name)
@extern("LLVMStructCreateNamed");

fn CChar* getStructName(
  LLVMTypeRef ty)
@extern("LLVMGetStructName");

fn void structSetBody(
  LLVMTypeRef struct_ty, 
  LLVMTypeRef* element_types, 
  CUInt element_count, 
  LLVMBool packed)
@extern("LLVMStructSetBody");

fn CUInt countStructElementTypes(
  LLVMTypeRef struct_ty)
@extern("LLVMCountStructElementTypes");

fn void getStructElementTypes(
  LLVMTypeRef struct_ty, 
  LLVMTypeRef* dest)
@extern("LLVMGetStructElementTypes");

fn LLVMTypeRef structGetTypeAtIndex(
  LLVMTypeRef struct_ty, 
  CUInt i)
@extern("LLVMStructGetTypeAtIndex");

fn LLVMBool isPackedStruct(
  LLVMTypeRef struct_ty)
@extern("LLVMIsPackedStruct");

fn LLVMBool isOpaqueStruct(
  LLVMTypeRef struct_ty)
@extern("LLVMIsOpaqueStruct");

fn LLVMBool isLiteralStruct(
  LLVMTypeRef struct_ty)
@extern("LLVMIsLiteralStruct");

fn LLVMTypeRef getElementType(
  LLVMTypeRef ty)
@extern("LLVMGetElementType");

fn void getSubtypes(
  LLVMTypeRef tp, 
  LLVMTypeRef* arr)
@extern("LLVMGetSubtypes");

fn CUInt getNumContainedTypes(
  LLVMTypeRef tp)
@extern("LLVMGetNumContainedTypes");

fn LLVMTypeRef arrayType(
  LLVMTypeRef element_type, 
  CUInt element_count)
@extern("LLVMArrayType");

fn LLVMTypeRef arrayType2(
  LLVMTypeRef element_type, 
  ulong element_count)
@extern("LLVMArrayType2");

fn CUInt getArrayLength(
  LLVMTypeRef array_ty)
@extern("LLVMGetArrayLength");

fn ulong getArrayLength2(
  LLVMTypeRef array_ty)
@extern("LLVMGetArrayLength2");

fn LLVMTypeRef pointerType(
  LLVMTypeRef element_type, 
  CUInt address_space)
@extern("LLVMPointerType");

fn LLVMBool pointerTypeIsOpaque(
  LLVMTypeRef ty)
@extern("LLVMPointerTypeIsOpaque");

fn LLVMTypeRef pointerTypeInContext(
  LLVMContextRef c, 
  CUInt address_space)
@extern("LLVMPointerTypeInContext");

fn CUInt getPointerAddressSpace(
  LLVMTypeRef pointer_ty)
@extern("LLVMGetPointerAddressSpace");

fn LLVMTypeRef vectorType(
  LLVMTypeRef element_type, 
  CUInt element_count)
@extern("LLVMVectorType");

fn LLVMTypeRef scalableVectorType(
  LLVMTypeRef element_type, 
  CUInt element_count)
@extern("LLVMScalableVectorType");

fn CUInt getVectorSize(
  LLVMTypeRef vector_ty)
@extern("LLVMGetVectorSize");

fn LLVMValueRef getConstantPtrAuthPointer(
  LLVMValueRef ptr_auth)
@extern("LLVMGetConstantPtrAuthPointer");

fn LLVMValueRef getConstantPtrAuthKey(
  LLVMValueRef ptr_auth)
@extern("LLVMGetConstantPtrAuthKey");

fn LLVMValueRef getConstantPtrAuthDiscriminator(
  LLVMValueRef ptr_auth)
@extern("LLVMGetConstantPtrAuthDiscriminator");

fn LLVMValueRef getConstantPtrAuthAddrDiscriminator(
  LLVMValueRef ptr_auth)
@extern("LLVMGetConstantPtrAuthAddrDiscriminator");

fn LLVMTypeRef voidTypeInContext(
  LLVMContextRef c)
@extern("LLVMVoidTypeInContext");

fn LLVMTypeRef labelTypeInContext(
  LLVMContextRef c)
@extern("LLVMLabelTypeInContext");

fn LLVMTypeRef x86AMXTypeInContext(
  LLVMContextRef c)
@extern("LLVMX86AMXTypeInContext");

fn LLVMTypeRef tokenTypeInContext(
  LLVMContextRef c)
@extern("LLVMTokenTypeInContext");

fn LLVMTypeRef metadataTypeInContext(
  LLVMContextRef c)
@extern("LLVMMetadataTypeInContext");

fn LLVMTypeRef voidType()
@extern("LLVMVoidType");

fn LLVMTypeRef labelType()
@extern("LLVMLabelType");

fn LLVMTypeRef x86AMXType()
@extern("LLVMX86AMXType");

fn LLVMTypeRef targetExtTypeInContext(
  LLVMContextRef c, 
  CChar* name, 
  LLVMTypeRef* type_params, 
  CUInt type_param_count, 
  CUInt* int_params, 
  CUInt int_param_count)
@extern("LLVMTargetExtTypeInContext");

fn CChar* getTargetExtTypeName(
  LLVMTypeRef target_ext_ty)
@extern("LLVMGetTargetExtTypeName");

fn CUInt getTargetExtTypeNumTypeParams(
  LLVMTypeRef target_ext_ty)
@extern("LLVMGetTargetExtTypeNumTypeParams");

fn LLVMTypeRef getTargetExtTypeTypeParam(
  LLVMTypeRef target_ext_ty, 
  CUInt idx)
@extern("LLVMGetTargetExtTypeTypeParam");

fn CUInt getTargetExtTypeNumIntParams(
  LLVMTypeRef target_ext_ty)
@extern("LLVMGetTargetExtTypeNumIntParams");

fn CUInt getTargetExtTypeIntParam(
  LLVMTypeRef target_ext_ty, 
  CUInt idx)
@extern("LLVMGetTargetExtTypeIntParam");

fn LLVMTypeRef typeOf(
  LLVMValueRef val)
@extern("LLVMTypeOf");

fn LLVMValueKind getValueKind(
  LLVMValueRef val)
@extern("LLVMGetValueKind");

fn CChar* getValueName2(
  LLVMValueRef val, 
  usz* length)
@extern("LLVMGetValueName2");

fn void setValueName2(
  LLVMValueRef val, 
  CChar* name, 
  usz name_len)
@extern("LLVMSetValueName2");

fn void dumpValue(
  LLVMValueRef val)
@extern("LLVMDumpValue");

fn CChar* printValueToString(
  LLVMValueRef val)
@extern("LLVMPrintValueToString");

fn LLVMContextRef getValueContext(
  LLVMValueRef val)
@extern("LLVMGetValueContext");

fn CChar* printDbgRecordToString(
  LLVMDbgRecordRef record)
@extern("LLVMPrintDbgRecordToString");

fn void replaceAllUsesWith(
  LLVMValueRef old_val, 
  LLVMValueRef new_val)
@extern("LLVMReplaceAllUsesWith");

fn LLVMBool isConstant(
  LLVMValueRef val)
@extern("LLVMIsConstant");

fn LLVMBool isUndef(
  LLVMValueRef val)
@extern("LLVMIsUndef");

fn LLVMBool isPoison(
  LLVMValueRef val)
@extern("LLVMIsPoison");

fn LLVMValueRef isAArgument(
  LLVMValueRef val)
@extern("LLVMIsAArgument");

fn LLVMValueRef isABasicBlock(
  LLVMValueRef val)
@extern("LLVMIsABasicBlock");

fn LLVMValueRef isAInlineAsm(
  LLVMValueRef val)
@extern("LLVMIsAInlineAsm");

fn LLVMValueRef isAUser(
  LLVMValueRef val)
@extern("LLVMIsAUser");

fn LLVMValueRef isAConstant(
  LLVMValueRef val)
@extern("LLVMIsAConstant");

fn LLVMValueRef isABlockAddress(
  LLVMValueRef val)
@extern("LLVMIsABlockAddress");

fn LLVMValueRef isAConstantAggregateZero(
  LLVMValueRef val)
@extern("LLVMIsAConstantAggregateZero");

fn LLVMValueRef isAConstantArray(
  LLVMValueRef val)
@extern("LLVMIsAConstantArray");

fn LLVMValueRef isAConstantDataSequential(
  LLVMValueRef val)
@extern("LLVMIsAConstantDataSequential");

fn LLVMValueRef isAConstantDataArray(
  LLVMValueRef val)
@extern("LLVMIsAConstantDataArray");

fn LLVMValueRef isAConstantDataVector(
  LLVMValueRef val)
@extern("LLVMIsAConstantDataVector");

fn LLVMValueRef isAConstantExpr(
  LLVMValueRef val)
@extern("LLVMIsAConstantExpr");

fn LLVMValueRef isAConstantFP(
  LLVMValueRef val)
@extern("LLVMIsAConstantFP");

fn LLVMValueRef isAConstantInt(
  LLVMValueRef val)
@extern("LLVMIsAConstantInt");

fn LLVMValueRef isAConstantPointerNull(
  LLVMValueRef val)
@extern("LLVMIsAConstantPointerNull");

fn LLVMValueRef isAConstantStruct(
  LLVMValueRef val)
@extern("LLVMIsAConstantStruct");

fn LLVMValueRef isAConstantTokenNone(
  LLVMValueRef val)
@extern("LLVMIsAConstantTokenNone");

fn LLVMValueRef isAConstantVector(
  LLVMValueRef val)
@extern("LLVMIsAConstantVector");

fn LLVMValueRef isAConstantPtrAuth(
  LLVMValueRef val)
@extern("LLVMIsAConstantPtrAuth");

fn LLVMValueRef isAGlobalValue(
  LLVMValueRef val)
@extern("LLVMIsAGlobalValue");

fn LLVMValueRef isAGlobalAlias(
  LLVMValueRef val)
@extern("LLVMIsAGlobalAlias");

fn LLVMValueRef isAGlobalObject(
  LLVMValueRef val)
@extern("LLVMIsAGlobalObject");

fn LLVMValueRef isAFunction(
  LLVMValueRef val)
@extern("LLVMIsAFunction");

fn LLVMValueRef isAGlobalVariable(
  LLVMValueRef val)
@extern("LLVMIsAGlobalVariable");

fn LLVMValueRef isAGlobalIFunc(
  LLVMValueRef val)
@extern("LLVMIsAGlobalIFunc");

fn LLVMValueRef isAUndefValue(
  LLVMValueRef val)
@extern("LLVMIsAUndefValue");

fn LLVMValueRef isAPoisonValue(
  LLVMValueRef val)
@extern("LLVMIsAPoisonValue");

fn LLVMValueRef isAInstruction(
  LLVMValueRef val)
@extern("LLVMIsAInstruction");

fn LLVMValueRef isAUnaryOperator(
  LLVMValueRef val)
@extern("LLVMIsAUnaryOperator");

fn LLVMValueRef isABinaryOperator(
  LLVMValueRef val)
@extern("LLVMIsABinaryOperator");

fn LLVMValueRef isACallInst(
  LLVMValueRef val)
@extern("LLVMIsACallInst");

fn LLVMValueRef isAIntrinsicInst(
  LLVMValueRef val)
@extern("LLVMIsAIntrinsicInst");

fn LLVMValueRef isADbgInfoIntrinsic(
  LLVMValueRef val)
@extern("LLVMIsADbgInfoIntrinsic");

fn LLVMValueRef isADbgVariableIntrinsic(
  LLVMValueRef val)
@extern("LLVMIsADbgVariableIntrinsic");

fn LLVMValueRef isADbgDeclareInst(
  LLVMValueRef val)
@extern("LLVMIsADbgDeclareInst");

fn LLVMValueRef isADbgLabelInst(
  LLVMValueRef val)
@extern("LLVMIsADbgLabelInst");

fn LLVMValueRef isAMemIntrinsic(
  LLVMValueRef val)
@extern("LLVMIsAMemIntrinsic");

fn LLVMValueRef isAMemCpyInst(
  LLVMValueRef val)
@extern("LLVMIsAMemCpyInst");

fn LLVMValueRef isAMemMoveInst(
  LLVMValueRef val)
@extern("LLVMIsAMemMoveInst");

fn LLVMValueRef isAMemSetInst(
  LLVMValueRef val)
@extern("LLVMIsAMemSetInst");

fn LLVMValueRef isACmpInst(
  LLVMValueRef val)
@extern("LLVMIsACmpInst");

fn LLVMValueRef isAFCmpInst(
  LLVMValueRef val)
@extern("LLVMIsAFCmpInst");

fn LLVMValueRef isAICmpInst(
  LLVMValueRef val)
@extern("LLVMIsAICmpInst");

fn LLVMValueRef isAExtractElementInst(
  LLVMValueRef val)
@extern("LLVMIsAExtractElementInst");

fn LLVMValueRef isAGetElementPtrInst(
  LLVMValueRef val)
@extern("LLVMIsAGetElementPtrInst");

fn LLVMValueRef isAInsertElementInst(
  LLVMValueRef val)
@extern("LLVMIsAInsertElementInst");

fn LLVMValueRef isAInsertValueInst(
  LLVMValueRef val)
@extern("LLVMIsAInsertValueInst");

fn LLVMValueRef isALandingPadInst(
  LLVMValueRef val)
@extern("LLVMIsALandingPadInst");

fn LLVMValueRef isAPHINode(
  LLVMValueRef val)
@extern("LLVMIsAPHINode");

fn LLVMValueRef isASelectInst(
  LLVMValueRef val)
@extern("LLVMIsASelectInst");

fn LLVMValueRef isAShuffleVectorInst(
  LLVMValueRef val)
@extern("LLVMIsAShuffleVectorInst");

fn LLVMValueRef isAStoreInst(
  LLVMValueRef val)
@extern("LLVMIsAStoreInst");

fn LLVMValueRef isABranchInst(
  LLVMValueRef val)
@extern("LLVMIsABranchInst");

fn LLVMValueRef isAIndirectBrInst(
  LLVMValueRef val)
@extern("LLVMIsAIndirectBrInst");

fn LLVMValueRef isAInvokeInst(
  LLVMValueRef val)
@extern("LLVMIsAInvokeInst");

fn LLVMValueRef isAReturnInst(
  LLVMValueRef val)
@extern("LLVMIsAReturnInst");

fn LLVMValueRef isASwitchInst(
  LLVMValueRef val)
@extern("LLVMIsASwitchInst");

fn LLVMValueRef isAUnreachableInst(
  LLVMValueRef val)
@extern("LLVMIsAUnreachableInst");

fn LLVMValueRef isAResumeInst(
  LLVMValueRef val)
@extern("LLVMIsAResumeInst");

fn LLVMValueRef isACleanupReturnInst(
  LLVMValueRef val)
@extern("LLVMIsACleanupReturnInst");

fn LLVMValueRef isACatchReturnInst(
  LLVMValueRef val)
@extern("LLVMIsACatchReturnInst");

fn LLVMValueRef isACatchSwitchInst(
  LLVMValueRef val)
@extern("LLVMIsACatchSwitchInst");

fn LLVMValueRef isACallBrInst(
  LLVMValueRef val)
@extern("LLVMIsACallBrInst");

fn LLVMValueRef isAFuncletPadInst(
  LLVMValueRef val)
@extern("LLVMIsAFuncletPadInst");

fn LLVMValueRef isACatchPadInst(
  LLVMValueRef val)
@extern("LLVMIsACatchPadInst");

fn LLVMValueRef isACleanupPadInst(
  LLVMValueRef val)
@extern("LLVMIsACleanupPadInst");

fn LLVMValueRef isAUnaryInstruction(
  LLVMValueRef val)
@extern("LLVMIsAUnaryInstruction");

fn LLVMValueRef isAAllocaInst(
  LLVMValueRef val)
@extern("LLVMIsAAllocaInst");

fn LLVMValueRef isACastInst(
  LLVMValueRef val)
@extern("LLVMIsACastInst");

fn LLVMValueRef isAAddrSpaceCastInst(
  LLVMValueRef val)
@extern("LLVMIsAAddrSpaceCastInst");

fn LLVMValueRef isABitCastInst(
  LLVMValueRef val)
@extern("LLVMIsABitCastInst");

fn LLVMValueRef isAFPExtInst(
  LLVMValueRef val)
@extern("LLVMIsAFPExtInst");

fn LLVMValueRef isAFPToSIInst(
  LLVMValueRef val)
@extern("LLVMIsAFPToSIInst");

fn LLVMValueRef isAFPToUIInst(
  LLVMValueRef val)
@extern("LLVMIsAFPToUIInst");

fn LLVMValueRef isAFPTruncInst(
  LLVMValueRef val)
@extern("LLVMIsAFPTruncInst");

fn LLVMValueRef isAIntToPtrInst(
  LLVMValueRef val)
@extern("LLVMIsAIntToPtrInst");

fn LLVMValueRef isAPtrToIntInst(
  LLVMValueRef val)
@extern("LLVMIsAPtrToIntInst");

fn LLVMValueRef isASExtInst(
  LLVMValueRef val)
@extern("LLVMIsASExtInst");

fn LLVMValueRef isASIToFPInst(
  LLVMValueRef val)
@extern("LLVMIsASIToFPInst");

fn LLVMValueRef isATruncInst(
  LLVMValueRef val)
@extern("LLVMIsATruncInst");

fn LLVMValueRef isAUIToFPInst(
  LLVMValueRef val)
@extern("LLVMIsAUIToFPInst");

fn LLVMValueRef isAZExtInst(
  LLVMValueRef val)
@extern("LLVMIsAZExtInst");

fn LLVMValueRef isAExtractValueInst(
  LLVMValueRef val)
@extern("LLVMIsAExtractValueInst");

fn LLVMValueRef isALoadInst(
  LLVMValueRef val)
@extern("LLVMIsALoadInst");

fn LLVMValueRef isAVAArgInst(
  LLVMValueRef val)
@extern("LLVMIsAVAArgInst");

fn LLVMValueRef isAFreezeInst(
  LLVMValueRef val)
@extern("LLVMIsAFreezeInst");

fn LLVMValueRef isAAtomicCmpXchgInst(
  LLVMValueRef val)
@extern("LLVMIsAAtomicCmpXchgInst");

fn LLVMValueRef isAAtomicRMWInst(
  LLVMValueRef val)
@extern("LLVMIsAAtomicRMWInst");

fn LLVMValueRef isAFenceInst(
  LLVMValueRef val)
@extern("LLVMIsAFenceInst");

fn LLVMValueRef isAMDNode(
  LLVMValueRef val)
@extern("LLVMIsAMDNode");

fn LLVMValueRef isAValueAsMetadata(
  LLVMValueRef val)
@extern("LLVMIsAValueAsMetadata");

fn LLVMValueRef isAMDString(
  LLVMValueRef val)
@extern("LLVMIsAMDString");

fn CChar* getValueName(
  LLVMValueRef val)
@extern("LLVMGetValueName");

fn void setValueName(
  LLVMValueRef val, 
  CChar* name)
@extern("LLVMSetValueName");

fn LLVMUseRef getFirstUse(
  LLVMValueRef val)
@extern("LLVMGetFirstUse");

fn LLVMUseRef getNextUse(
  LLVMUseRef u)
@extern("LLVMGetNextUse");

fn LLVMValueRef getUser(
  LLVMUseRef u)
@extern("LLVMGetUser");

fn LLVMValueRef getUsedValue(
  LLVMUseRef u)
@extern("LLVMGetUsedValue");

fn LLVMValueRef getOperand(
  LLVMValueRef val, 
  CUInt index)
@extern("LLVMGetOperand");

fn LLVMUseRef getOperandUse(
  LLVMValueRef val, 
  CUInt index)
@extern("LLVMGetOperandUse");

fn void setOperand(
  LLVMValueRef user, 
  CUInt index, 
  LLVMValueRef val)
@extern("LLVMSetOperand");

fn CInt getNumOperands(
  LLVMValueRef val)
@extern("LLVMGetNumOperands");

fn LLVMValueRef constNull(
  LLVMTypeRef ty)
@extern("LLVMConstNull");

fn LLVMValueRef constAllOnes(
  LLVMTypeRef ty)
@extern("LLVMConstAllOnes");

fn LLVMValueRef getUndef(
  LLVMTypeRef ty)
@extern("LLVMGetUndef");

fn LLVMValueRef getPoison(
  LLVMTypeRef ty)
@extern("LLVMGetPoison");

fn LLVMBool isNull(
  LLVMValueRef val)
@extern("LLVMIsNull");

fn LLVMValueRef constPointerNull(
  LLVMTypeRef ty)
@extern("LLVMConstPointerNull");

fn LLVMValueRef constInt(
  LLVMTypeRef int_ty, 
  CULongLong n, 
  LLVMBool sign_extend)
@extern("LLVMConstInt");

fn LLVMValueRef constIntOfArbitraryPrecision(
  LLVMTypeRef int_ty, 
  CUInt num_words, 
  ulong* words)
@extern("LLVMConstIntOfArbitraryPrecision");

fn LLVMValueRef constIntOfString(
  LLVMTypeRef int_ty, 
  CChar* text, 
  char radix)
@extern("LLVMConstIntOfString");

fn LLVMValueRef constIntOfStringAndSize(
  LLVMTypeRef int_ty, 
  CChar* text, 
  CUInt s_len, 
  char radix)
@extern("LLVMConstIntOfStringAndSize");

fn LLVMValueRef constReal(
  LLVMTypeRef real_ty, 
  double n)
@extern("LLVMConstReal");

fn LLVMValueRef constRealOfString(
  LLVMTypeRef real_ty, 
  CChar* text)
@extern("LLVMConstRealOfString");

fn LLVMValueRef constRealOfStringAndSize(
  LLVMTypeRef real_ty, 
  CChar* text, 
  CUInt s_len)
@extern("LLVMConstRealOfStringAndSize");

fn CULongLong constIntGetZExtValue(
  LLVMValueRef constant_val)
@extern("LLVMConstIntGetZExtValue");

fn CLongLong constIntGetSExtValue(
  LLVMValueRef constant_val)
@extern("LLVMConstIntGetSExtValue");

fn double constRealGetDouble(
  LLVMValueRef constant_val, 
  LLVMBool* loses_info)
@extern("LLVMConstRealGetDouble");

fn LLVMValueRef constStringInContext(
  LLVMContextRef c, 
  CChar* str, 
  CUInt length, 
  LLVMBool dont_null_terminate)
@extern("LLVMConstStringInContext");

fn LLVMValueRef constStringInContext2(
  LLVMContextRef c, 
  CChar* str, 
  usz length, 
  LLVMBool dont_null_terminate)
@extern("LLVMConstStringInContext2");

fn LLVMValueRef constString(
  CChar* str, 
  CUInt length, 
  LLVMBool dont_null_terminate)
@extern("LLVMConstString");

fn LLVMBool isConstantString(
  LLVMValueRef c)
@extern("LLVMIsConstantString");

fn CChar* getAsString(
  LLVMValueRef c, 
  usz* length)
@extern("LLVMGetAsString");

fn LLVMValueRef constStructInContext(
  LLVMContextRef c, 
  LLVMValueRef* constant_vals, 
  CUInt count, 
  LLVMBool packed)
@extern("LLVMConstStructInContext");

fn LLVMValueRef constStruct(
  LLVMValueRef* constant_vals, 
  CUInt count, 
  LLVMBool packed)
@extern("LLVMConstStruct");

fn LLVMValueRef constArray(
  LLVMTypeRef element_ty, 
  LLVMValueRef* constant_vals, 
  CUInt length)
@extern("LLVMConstArray");

fn LLVMValueRef constArray2(
  LLVMTypeRef element_ty, 
  LLVMValueRef* constant_vals, 
  ulong length)
@extern("LLVMConstArray2");

fn LLVMValueRef constNamedStruct(
  LLVMTypeRef struct_ty, 
  LLVMValueRef* constant_vals, 
  CUInt count)
@extern("LLVMConstNamedStruct");

fn LLVMValueRef getAggregateElement(
  LLVMValueRef c, 
  CUInt idx)
@extern("LLVMGetAggregateElement");

fn LLVMValueRef getElementAsConstant(
  LLVMValueRef c, 
  CUInt idx)
@extern("LLVMGetElementAsConstant");

fn LLVMValueRef constVector(
  LLVMValueRef* scalar_constant_vals, 
  CUInt size)
@extern("LLVMConstVector");

fn LLVMValueRef constantPtrAuth(
  LLVMValueRef ptr, 
  LLVMValueRef key, 
  LLVMValueRef disc, 
  LLVMValueRef addr_disc)
@extern("LLVMConstantPtrAuth");

fn LLVMOpcode getConstOpcode(
  LLVMValueRef constant_val)
@extern("LLVMGetConstOpcode");

fn LLVMValueRef alignOf(
  LLVMTypeRef ty)
@extern("LLVMAlignOf");

fn LLVMValueRef sizeOf(
  LLVMTypeRef ty)
@extern("LLVMSizeOf");

fn LLVMValueRef constNeg(
  LLVMValueRef constant_val)
@extern("LLVMConstNeg");

fn LLVMValueRef constNSWNeg(
  LLVMValueRef constant_val)
@extern("LLVMConstNSWNeg");

fn LLVMValueRef constNUWNeg(
  LLVMValueRef constant_val)
@extern("LLVMConstNUWNeg");

fn LLVMValueRef constNot(
  LLVMValueRef constant_val)
@extern("LLVMConstNot");

fn LLVMValueRef constAdd(
  LLVMValueRef lhs_constant, 
  LLVMValueRef rhs_constant)
@extern("LLVMConstAdd");

fn LLVMValueRef constNSWAdd(
  LLVMValueRef lhs_constant, 
  LLVMValueRef rhs_constant)
@extern("LLVMConstNSWAdd");

fn LLVMValueRef constNUWAdd(
  LLVMValueRef lhs_constant, 
  LLVMValueRef rhs_constant)
@extern("LLVMConstNUWAdd");

fn LLVMValueRef constSub(
  LLVMValueRef lhs_constant, 
  LLVMValueRef rhs_constant)
@extern("LLVMConstSub");

fn LLVMValueRef constNSWSub(
  LLVMValueRef lhs_constant, 
  LLVMValueRef rhs_constant)
@extern("LLVMConstNSWSub");

fn LLVMValueRef constNUWSub(
  LLVMValueRef lhs_constant, 
  LLVMValueRef rhs_constant)
@extern("LLVMConstNUWSub");

fn LLVMValueRef constMul(
  LLVMValueRef lhs_constant, 
  LLVMValueRef rhs_constant)
@extern("LLVMConstMul");

fn LLVMValueRef constNSWMul(
  LLVMValueRef lhs_constant, 
  LLVMValueRef rhs_constant)
@extern("LLVMConstNSWMul");

fn LLVMValueRef constNUWMul(
  LLVMValueRef lhs_constant, 
  LLVMValueRef rhs_constant)
@extern("LLVMConstNUWMul");

fn LLVMValueRef constXor(
  LLVMValueRef lhs_constant, 
  LLVMValueRef rhs_constant)
@extern("LLVMConstXor");

fn LLVMValueRef constGEP2(
  LLVMTypeRef ty, 
  LLVMValueRef constant_val, 
  LLVMValueRef* constant_indices, 
  CUInt num_indices)
@extern("LLVMConstGEP2");

fn LLVMValueRef constInBoundsGEP2(
  LLVMTypeRef ty, 
  LLVMValueRef constant_val, 
  LLVMValueRef* constant_indices, 
  CUInt num_indices)
@extern("LLVMConstInBoundsGEP2");

fn LLVMValueRef constGEPWithNoWrapFlags(
  LLVMTypeRef ty, 
  LLVMValueRef constant_val, 
  LLVMValueRef* constant_indices, 
  CUInt num_indices, 
  LLVMGEPNoWrapFlags no_wrap_flags)
@extern("LLVMConstGEPWithNoWrapFlags");

fn LLVMValueRef constTrunc(
  LLVMValueRef constant_val, 
  LLVMTypeRef to_type)
@extern("LLVMConstTrunc");

fn LLVMValueRef constPtrToInt(
  LLVMValueRef constant_val, 
  LLVMTypeRef to_type)
@extern("LLVMConstPtrToInt");

fn LLVMValueRef constIntToPtr(
  LLVMValueRef constant_val, 
  LLVMTypeRef to_type)
@extern("LLVMConstIntToPtr");

fn LLVMValueRef constBitCast(
  LLVMValueRef constant_val, 
  LLVMTypeRef to_type)
@extern("LLVMConstBitCast");

fn LLVMValueRef constAddrSpaceCast(
  LLVMValueRef constant_val, 
  LLVMTypeRef to_type)
@extern("LLVMConstAddrSpaceCast");

fn LLVMValueRef constTruncOrBitCast(
  LLVMValueRef constant_val, 
  LLVMTypeRef to_type)
@extern("LLVMConstTruncOrBitCast");

fn LLVMValueRef constPointerCast(
  LLVMValueRef constant_val, 
  LLVMTypeRef to_type)
@extern("LLVMConstPointerCast");

fn LLVMValueRef constExtractElement(
  LLVMValueRef vector_constant, 
  LLVMValueRef index_constant)
@extern("LLVMConstExtractElement");

fn LLVMValueRef constInsertElement(
  LLVMValueRef vector_constant, 
  LLVMValueRef element_value_constant, 
  LLVMValueRef index_constant)
@extern("LLVMConstInsertElement");

fn LLVMValueRef constShuffleVector(
  LLVMValueRef vector_a_constant, 
  LLVMValueRef vector_b_constant, 
  LLVMValueRef mask_constant)
@extern("LLVMConstShuffleVector");

fn LLVMValueRef blockAddress(
  LLVMValueRef f, 
  LLVMBasicBlockRef bb)
@extern("LLVMBlockAddress");

fn LLVMValueRef getBlockAddressFunction(
  LLVMValueRef block_addr)
@extern("LLVMGetBlockAddressFunction");

fn LLVMBasicBlockRef getBlockAddressBasicBlock(
  LLVMValueRef block_addr)
@extern("LLVMGetBlockAddressBasicBlock");

fn LLVMValueRef constInlineAsm(
  LLVMTypeRef ty, 
  CChar* asm_string, 
  CChar* constraints, 
  LLVMBool has_side_effects, 
  LLVMBool is_align_stack)
@extern("LLVMConstInlineAsm");

fn LLVMModuleRef getGlobalParent(
  LLVMValueRef global)
@extern("LLVMGetGlobalParent");

fn LLVMBool isDeclaration(
  LLVMValueRef global)
@extern("LLVMIsDeclaration");

fn LLVMLinkage getLinkage(
  LLVMValueRef global)
@extern("LLVMGetLinkage");

fn void setLinkage(
  LLVMValueRef global, 
  LLVMLinkage linkage)
@extern("LLVMSetLinkage");

fn CChar* getSection(
  LLVMValueRef global)
@extern("LLVMGetSection");

fn void setSection(
  LLVMValueRef global, 
  CChar* section)
@extern("LLVMSetSection");

fn LLVMVisibility getVisibility(
  LLVMValueRef global)
@extern("LLVMGetVisibility");

fn void setVisibility(
  LLVMValueRef global, 
  LLVMVisibility viz)
@extern("LLVMSetVisibility");

fn LLVMDLLStorageClass getDLLStorageClass(
  LLVMValueRef global)
@extern("LLVMGetDLLStorageClass");

fn void setDLLStorageClass(
  LLVMValueRef global, 
  LLVMDLLStorageClass class)
@extern("LLVMSetDLLStorageClass");

fn LLVMUnnamedAddr getUnnamedAddress(
  LLVMValueRef global)
@extern("LLVMGetUnnamedAddress");

fn void setUnnamedAddress(
  LLVMValueRef global, 
  LLVMUnnamedAddr unnamed_addr)
@extern("LLVMSetUnnamedAddress");

fn LLVMTypeRef globalGetValueType(
  LLVMValueRef global)
@extern("LLVMGlobalGetValueType");

fn LLVMBool hasUnnamedAddr(
  LLVMValueRef global)
@extern("LLVMHasUnnamedAddr");

fn void setUnnamedAddr(
  LLVMValueRef global, 
  LLVMBool has_unnamed_addr)
@extern("LLVMSetUnnamedAddr");

fn CUInt getAlignment(
  LLVMValueRef v)
@extern("LLVMGetAlignment");

fn void setAlignment(
  LLVMValueRef v, 
  CUInt bytes)
@extern("LLVMSetAlignment");

fn void globalSetMetadata(
  LLVMValueRef global, 
  CUInt kind, 
  LLVMMetadataRef md)
@extern("LLVMGlobalSetMetadata");

fn void globalEraseMetadata(
  LLVMValueRef global, 
  CUInt kind)
@extern("LLVMGlobalEraseMetadata");

fn void globalClearMetadata(
  LLVMValueRef global)
@extern("LLVMGlobalClearMetadata");

fn LLVMValueMetadataEntry* globalCopyAllMetadata(
  LLVMValueRef value, 
  usz* num_entries)
@extern("LLVMGlobalCopyAllMetadata");

fn void disposeValueMetadataEntries(
  LLVMValueMetadataEntry* entries)
@extern("LLVMDisposeValueMetadataEntries");

fn CUInt valueMetadataEntriesGetKind(
  LLVMValueMetadataEntry* entries, 
  CUInt index)
@extern("LLVMValueMetadataEntriesGetKind");

fn LLVMMetadataRef valueMetadataEntriesGetMetadata(
  LLVMValueMetadataEntry* entries, 
  CUInt index)
@extern("LLVMValueMetadataEntriesGetMetadata");

fn LLVMValueRef addGlobal(
  LLVMModuleRef m, 
  LLVMTypeRef ty, 
  CChar* name)
@extern("LLVMAddGlobal");

fn LLVMValueRef addGlobalInAddressSpace(
  LLVMModuleRef m, 
  LLVMTypeRef ty, 
  CChar* name, 
  CUInt address_space)
@extern("LLVMAddGlobalInAddressSpace");

fn LLVMValueRef getNamedGlobal(
  LLVMModuleRef m, 
  CChar* name)
@extern("LLVMGetNamedGlobal");

fn LLVMValueRef getNamedGlobalWithLength(
  LLVMModuleRef m, 
  CChar* name, 
  usz length)
@extern("LLVMGetNamedGlobalWithLength");

fn LLVMValueRef getFirstGlobal(
  LLVMModuleRef m)
@extern("LLVMGetFirstGlobal");

fn LLVMValueRef getLastGlobal(
  LLVMModuleRef m)
@extern("LLVMGetLastGlobal");

fn LLVMValueRef getNextGlobal(
  LLVMValueRef global_var)
@extern("LLVMGetNextGlobal");

fn LLVMValueRef getPreviousGlobal(
  LLVMValueRef global_var)
@extern("LLVMGetPreviousGlobal");

fn void deleteGlobal(
  LLVMValueRef global_var)
@extern("LLVMDeleteGlobal");

fn LLVMValueRef getInitializer(
  LLVMValueRef global_var)
@extern("LLVMGetInitializer");

fn void setInitializer(
  LLVMValueRef global_var, 
  LLVMValueRef constant_val)
@extern("LLVMSetInitializer");

fn LLVMBool isThreadLocal(
  LLVMValueRef global_var)
@extern("LLVMIsThreadLocal");

fn void setThreadLocal(
  LLVMValueRef global_var, 
  LLVMBool is_thread_local)
@extern("LLVMSetThreadLocal");

fn LLVMBool isGlobalConstant(
  LLVMValueRef global_var)
@extern("LLVMIsGlobalConstant");

fn void setGlobalConstant(
  LLVMValueRef global_var, 
  LLVMBool is_constant)
@extern("LLVMSetGlobalConstant");

fn LLVMThreadLocalMode getThreadLocalMode(
  LLVMValueRef global_var)
@extern("LLVMGetThreadLocalMode");

fn void setThreadLocalMode(
  LLVMValueRef global_var, 
  LLVMThreadLocalMode mode)
@extern("LLVMSetThreadLocalMode");

fn LLVMBool isExternallyInitialized(
  LLVMValueRef global_var)
@extern("LLVMIsExternallyInitialized");

fn void setExternallyInitialized(
  LLVMValueRef global_var, 
  LLVMBool is_ext_init)
@extern("LLVMSetExternallyInitialized");

fn LLVMValueRef addAlias2(
  LLVMModuleRef m, 
  LLVMTypeRef value_ty, 
  CUInt addr_space, 
  LLVMValueRef aliasee, 
  CChar* name)
@extern("LLVMAddAlias2");

fn LLVMValueRef getNamedGlobalAlias(
  LLVMModuleRef m, 
  CChar* name, 
  usz name_len)
@extern("LLVMGetNamedGlobalAlias");

fn LLVMValueRef getFirstGlobalAlias(
  LLVMModuleRef m)
@extern("LLVMGetFirstGlobalAlias");

fn LLVMValueRef getLastGlobalAlias(
  LLVMModuleRef m)
@extern("LLVMGetLastGlobalAlias");

fn LLVMValueRef getNextGlobalAlias(
  LLVMValueRef ga)
@extern("LLVMGetNextGlobalAlias");

fn LLVMValueRef getPreviousGlobalAlias(
  LLVMValueRef ga)
@extern("LLVMGetPreviousGlobalAlias");

fn LLVMValueRef aliasGetAliasee(
  LLVMValueRef alias_)
@extern("LLVMAliasGetAliasee");

fn void aliasSetAliasee(
  LLVMValueRef alias_, 
  LLVMValueRef aliasee)
@extern("LLVMAliasSetAliasee");

fn void deleteFunction(
  LLVMValueRef fn_)
@extern("LLVMDeleteFunction");

fn LLVMBool hasPersonalityFn(
  LLVMValueRef fn_)
@extern("LLVMHasPersonalityFn");

fn LLVMValueRef getPersonalityFn(
  LLVMValueRef fn_)
@extern("LLVMGetPersonalityFn");

fn void setPersonalityFn(
  LLVMValueRef fn_, 
  LLVMValueRef personality_fn)
@extern("LLVMSetPersonalityFn");

fn CUInt lookupIntrinsicID(
  CChar* name, 
  usz name_len)
@extern("LLVMLookupIntrinsicID");

fn CUInt getIntrinsicID(
  LLVMValueRef fn_)
@extern("LLVMGetIntrinsicID");

fn LLVMValueRef getIntrinsicDeclaration(
  LLVMModuleRef mod, 
  CUInt id, 
  LLVMTypeRef* param_types, 
  usz param_count)
@extern("LLVMGetIntrinsicDeclaration");

fn LLVMTypeRef intrinsicGetType(
  LLVMContextRef ctx, 
  CUInt id, 
  LLVMTypeRef* param_types, 
  usz param_count)
@extern("LLVMIntrinsicGetType");

fn CChar* intrinsicGetName(
  CUInt id, 
  usz* name_length)
@extern("LLVMIntrinsicGetName");

fn CChar* intrinsicCopyOverloadedName(
  CUInt id, 
  LLVMTypeRef* param_types, 
  usz param_count, 
  usz* name_length)
@extern("LLVMIntrinsicCopyOverloadedName");

fn CChar* intrinsicCopyOverloadedName2(
  LLVMModuleRef mod, 
  CUInt id, 
  LLVMTypeRef* param_types, 
  usz param_count, 
  usz* name_length)
@extern("LLVMIntrinsicCopyOverloadedName2");

fn LLVMBool intrinsicIsOverloaded(
  CUInt id)
@extern("LLVMIntrinsicIsOverloaded");

fn CUInt getFunctionCallConv(
  LLVMValueRef fn_)
@extern("LLVMGetFunctionCallConv");

fn void setFunctionCallConv(
  LLVMValueRef fn_, 
  CUInt cc)
@extern("LLVMSetFunctionCallConv");

fn CChar* getGC(
  LLVMValueRef fn_)
@extern("LLVMGetGC");

fn void setGC(
  LLVMValueRef fn_, 
  CChar* name)
@extern("LLVMSetGC");

fn LLVMValueRef getPrefixData(
  LLVMValueRef fn_)
@extern("LLVMGetPrefixData");

fn LLVMBool hasPrefixData(
  LLVMValueRef fn_)
@extern("LLVMHasPrefixData");

fn void setPrefixData(
  LLVMValueRef fn_, 
  LLVMValueRef prefix_data)
@extern("LLVMSetPrefixData");

fn LLVMValueRef getPrologueData(
  LLVMValueRef fn_)
@extern("LLVMGetPrologueData");

fn LLVMBool hasPrologueData(
  LLVMValueRef fn_)
@extern("LLVMHasPrologueData");

fn void setPrologueData(
  LLVMValueRef fn_, 
  LLVMValueRef prologue_data)
@extern("LLVMSetPrologueData");

fn void addAttributeAtIndex(
  LLVMValueRef f, 
  LLVMAttributeIndex idx, 
  LLVMAttributeRef a)
@extern("LLVMAddAttributeAtIndex");

fn CUInt getAttributeCountAtIndex(
  LLVMValueRef f, 
  LLVMAttributeIndex idx)
@extern("LLVMGetAttributeCountAtIndex");

fn void getAttributesAtIndex(
  LLVMValueRef f, 
  LLVMAttributeIndex idx, 
  LLVMAttributeRef* attrs)
@extern("LLVMGetAttributesAtIndex");

fn LLVMAttributeRef getEnumAttributeAtIndex(
  LLVMValueRef f, 
  LLVMAttributeIndex idx, 
  CUInt kind_id)
@extern("LLVMGetEnumAttributeAtIndex");

fn LLVMAttributeRef getStringAttributeAtIndex(
  LLVMValueRef f, 
  LLVMAttributeIndex idx, 
  CChar* k, 
  CUInt k_len)
@extern("LLVMGetStringAttributeAtIndex");

fn void removeEnumAttributeAtIndex(
  LLVMValueRef f, 
  LLVMAttributeIndex idx, 
  CUInt kind_id)
@extern("LLVMRemoveEnumAttributeAtIndex");

fn void removeStringAttributeAtIndex(
  LLVMValueRef f, 
  LLVMAttributeIndex idx, 
  CChar* k, 
  CUInt k_len)
@extern("LLVMRemoveStringAttributeAtIndex");

fn void addTargetDependentFunctionAttr(
  LLVMValueRef fn_, 
  CChar* a, 
  CChar* v)
@extern("LLVMAddTargetDependentFunctionAttr");

fn CUInt countParams(
  LLVMValueRef fn_)
@extern("LLVMCountParams");

fn void getParams(
  LLVMValueRef fn_, 
  LLVMValueRef* params)
@extern("LLVMGetParams");

fn LLVMValueRef getParam(
  LLVMValueRef fn_, 
  CUInt index)
@extern("LLVMGetParam");

fn LLVMValueRef getParamParent(
  LLVMValueRef inst)
@extern("LLVMGetParamParent");

fn LLVMValueRef getFirstParam(
  LLVMValueRef fn_)
@extern("LLVMGetFirstParam");

fn LLVMValueRef getLastParam(
  LLVMValueRef fn_)
@extern("LLVMGetLastParam");

fn LLVMValueRef getNextParam(
  LLVMValueRef arg)
@extern("LLVMGetNextParam");

fn LLVMValueRef getPreviousParam(
  LLVMValueRef arg)
@extern("LLVMGetPreviousParam");

fn void setParamAlignment(
  LLVMValueRef arg, 
  CUInt align)
@extern("LLVMSetParamAlignment");

fn LLVMValueRef addGlobalIFunc(
  LLVMModuleRef m, 
  CChar* name, 
  usz name_len, 
  LLVMTypeRef ty, 
  CUInt addr_space, 
  LLVMValueRef resolver)
@extern("LLVMAddGlobalIFunc");

fn LLVMValueRef getNamedGlobalIFunc(
  LLVMModuleRef m, 
  CChar* name, 
  usz name_len)
@extern("LLVMGetNamedGlobalIFunc");

fn LLVMValueRef getFirstGlobalIFunc(
  LLVMModuleRef m)
@extern("LLVMGetFirstGlobalIFunc");

fn LLVMValueRef getLastGlobalIFunc(
  LLVMModuleRef m)
@extern("LLVMGetLastGlobalIFunc");

fn LLVMValueRef getNextGlobalIFunc(
  LLVMValueRef i_func)
@extern("LLVMGetNextGlobalIFunc");

fn LLVMValueRef getPreviousGlobalIFunc(
  LLVMValueRef i_func)
@extern("LLVMGetPreviousGlobalIFunc");

fn LLVMValueRef getGlobalIFuncResolver(
  LLVMValueRef i_func)
@extern("LLVMGetGlobalIFuncResolver");

fn void setGlobalIFuncResolver(
  LLVMValueRef i_func, 
  LLVMValueRef resolver)
@extern("LLVMSetGlobalIFuncResolver");

fn void eraseGlobalIFunc(
  LLVMValueRef i_func)
@extern("LLVMEraseGlobalIFunc");

fn void removeGlobalIFunc(
  LLVMValueRef i_func)
@extern("LLVMRemoveGlobalIFunc");

fn LLVMMetadataRef mDStringInContext2(
  LLVMContextRef c, 
  CChar* str, 
  usz s_len)
@extern("LLVMMDStringInContext2");

fn LLVMMetadataRef mDNodeInContext2(
  LLVMContextRef c, 
  LLVMMetadataRef* m_ds, 
  usz count)
@extern("LLVMMDNodeInContext2");

fn LLVMValueRef metadataAsValue(
  LLVMContextRef c, 
  LLVMMetadataRef md)
@extern("LLVMMetadataAsValue");

fn LLVMMetadataRef valueAsMetadata(
  LLVMValueRef val)
@extern("LLVMValueAsMetadata");

fn CChar* getMDString(
  LLVMValueRef v, 
  CUInt* length)
@extern("LLVMGetMDString");

fn CUInt getMDNodeNumOperands(
  LLVMValueRef v)
@extern("LLVMGetMDNodeNumOperands");

fn void getMDNodeOperands(
  LLVMValueRef v, 
  LLVMValueRef* dest)
@extern("LLVMGetMDNodeOperands");

fn void replaceMDNodeOperandWith(
  LLVMValueRef v, 
  CUInt index, 
  LLVMMetadataRef replacement)
@extern("LLVMReplaceMDNodeOperandWith");

fn LLVMValueRef mDStringInContext(
  LLVMContextRef c, 
  CChar* str, 
  CUInt s_len)
@extern("LLVMMDStringInContext");

fn LLVMValueRef mDString(
  CChar* str, 
  CUInt s_len)
@extern("LLVMMDString");

fn LLVMValueRef mDNodeInContext(
  LLVMContextRef c, 
  LLVMValueRef* vals, 
  CUInt count)
@extern("LLVMMDNodeInContext");

fn LLVMValueRef mDNode(
  LLVMValueRef* vals, 
  CUInt count)
@extern("LLVMMDNode");

fn LLVMOperandBundleRef createOperandBundle(
  CChar* tag, 
  usz tag_len, 
  LLVMValueRef* args, 
  CUInt num_args)
@extern("LLVMCreateOperandBundle");

fn void disposeOperandBundle(
  LLVMOperandBundleRef bundle)
@extern("LLVMDisposeOperandBundle");

fn CChar* getOperandBundleTag(
  LLVMOperandBundleRef bundle, 
  usz* len)
@extern("LLVMGetOperandBundleTag");

fn CUInt getNumOperandBundleArgs(
  LLVMOperandBundleRef bundle)
@extern("LLVMGetNumOperandBundleArgs");

fn LLVMValueRef getOperandBundleArgAtIndex(
  LLVMOperandBundleRef bundle, 
  CUInt index)
@extern("LLVMGetOperandBundleArgAtIndex");

fn LLVMValueRef basicBlockAsValue(
  LLVMBasicBlockRef bb)
@extern("LLVMBasicBlockAsValue");

fn LLVMBool valueIsBasicBlock(
  LLVMValueRef val)
@extern("LLVMValueIsBasicBlock");

fn LLVMBasicBlockRef valueAsBasicBlock(
  LLVMValueRef val)
@extern("LLVMValueAsBasicBlock");

fn CChar* getBasicBlockName(
  LLVMBasicBlockRef bb)
@extern("LLVMGetBasicBlockName");

fn LLVMValueRef getBasicBlockParent(
  LLVMBasicBlockRef bb)
@extern("LLVMGetBasicBlockParent");

fn LLVMValueRef getBasicBlockTerminator(
  LLVMBasicBlockRef bb)
@extern("LLVMGetBasicBlockTerminator");

fn CUInt countBasicBlocks(
  LLVMValueRef fn_)
@extern("LLVMCountBasicBlocks");

fn void getBasicBlocks(
  LLVMValueRef fn_, 
  LLVMBasicBlockRef* basic_blocks)
@extern("LLVMGetBasicBlocks");

fn LLVMBasicBlockRef getFirstBasicBlock(
  LLVMValueRef fn_)
@extern("LLVMGetFirstBasicBlock");

fn LLVMBasicBlockRef getLastBasicBlock(
  LLVMValueRef fn_)
@extern("LLVMGetLastBasicBlock");

fn LLVMBasicBlockRef getNextBasicBlock(
  LLVMBasicBlockRef bb)
@extern("LLVMGetNextBasicBlock");

fn LLVMBasicBlockRef getPreviousBasicBlock(
  LLVMBasicBlockRef bb)
@extern("LLVMGetPreviousBasicBlock");

fn LLVMBasicBlockRef getEntryBasicBlock(
  LLVMValueRef fn_)
@extern("LLVMGetEntryBasicBlock");

fn void insertExistingBasicBlockAfterInsertBlock(
  LLVMBuilderRef builder, 
  LLVMBasicBlockRef bb)
@extern("LLVMInsertExistingBasicBlockAfterInsertBlock");

fn void appendExistingBasicBlock(
  LLVMValueRef fn_, 
  LLVMBasicBlockRef bb)
@extern("LLVMAppendExistingBasicBlock");

fn LLVMBasicBlockRef createBasicBlockInContext(
  LLVMContextRef c, 
  CChar* name)
@extern("LLVMCreateBasicBlockInContext");

fn LLVMBasicBlockRef appendBasicBlockInContext(
  LLVMContextRef c, 
  LLVMValueRef fn_, 
  CChar* name)
@extern("LLVMAppendBasicBlockInContext");

fn LLVMBasicBlockRef appendBasicBlock(
  LLVMValueRef fn_, 
  CChar* name)
@extern("LLVMAppendBasicBlock");

fn LLVMBasicBlockRef insertBasicBlockInContext(
  LLVMContextRef c, 
  LLVMBasicBlockRef bb, 
  CChar* name)
@extern("LLVMInsertBasicBlockInContext");

fn LLVMBasicBlockRef insertBasicBlock(
  LLVMBasicBlockRef insert_before_bb, 
  CChar* name)
@extern("LLVMInsertBasicBlock");

fn void deleteBasicBlock(
  LLVMBasicBlockRef bb)
@extern("LLVMDeleteBasicBlock");

fn void removeBasicBlockFromParent(
  LLVMBasicBlockRef bb)
@extern("LLVMRemoveBasicBlockFromParent");

fn void moveBasicBlockBefore(
  LLVMBasicBlockRef bb, 
  LLVMBasicBlockRef move_pos)
@extern("LLVMMoveBasicBlockBefore");

fn void moveBasicBlockAfter(
  LLVMBasicBlockRef bb, 
  LLVMBasicBlockRef move_pos)
@extern("LLVMMoveBasicBlockAfter");

fn LLVMValueRef getFirstInstruction(
  LLVMBasicBlockRef bb)
@extern("LLVMGetFirstInstruction");

fn LLVMValueRef getLastInstruction(
  LLVMBasicBlockRef bb)
@extern("LLVMGetLastInstruction");

fn CInt hasMetadata(
  LLVMValueRef val)
@extern("LLVMHasMetadata");

fn LLVMValueRef getMetadata(
  LLVMValueRef val, 
  CUInt kind_id)
@extern("LLVMGetMetadata");

fn void setMetadata(
  LLVMValueRef val, 
  CUInt kind_id, 
  LLVMValueRef node)
@extern("LLVMSetMetadata");

fn LLVMValueMetadataEntry* instructionGetAllMetadataOtherThanDebugLoc(
  LLVMValueRef instr, 
  usz* num_entries)
@extern("LLVMInstructionGetAllMetadataOtherThanDebugLoc");

fn LLVMBasicBlockRef getInstructionParent(
  LLVMValueRef inst)
@extern("LLVMGetInstructionParent");

fn LLVMValueRef getNextInstruction(
  LLVMValueRef inst)
@extern("LLVMGetNextInstruction");

fn LLVMValueRef getPreviousInstruction(
  LLVMValueRef inst)
@extern("LLVMGetPreviousInstruction");

fn void instructionRemoveFromParent(
  LLVMValueRef inst)
@extern("LLVMInstructionRemoveFromParent");

fn void instructionEraseFromParent(
  LLVMValueRef inst)
@extern("LLVMInstructionEraseFromParent");

fn void deleteInstruction(
  LLVMValueRef inst)
@extern("LLVMDeleteInstruction");

fn LLVMOpcode getInstructionOpcode(
  LLVMValueRef inst)
@extern("LLVMGetInstructionOpcode");

fn LLVMIntPredicate getICmpPredicate(
  LLVMValueRef inst)
@extern("LLVMGetICmpPredicate");

fn LLVMRealPredicate getFCmpPredicate(
  LLVMValueRef inst)
@extern("LLVMGetFCmpPredicate");

fn LLVMValueRef instructionClone(
  LLVMValueRef inst)
@extern("LLVMInstructionClone");

fn LLVMValueRef isATerminatorInst(
  LLVMValueRef inst)
@extern("LLVMIsATerminatorInst");

fn LLVMDbgRecordRef getFirstDbgRecord(
  LLVMValueRef inst)
@extern("LLVMGetFirstDbgRecord");

fn LLVMDbgRecordRef getLastDbgRecord(
  LLVMValueRef inst)
@extern("LLVMGetLastDbgRecord");

fn LLVMDbgRecordRef getNextDbgRecord(
  LLVMDbgRecordRef dbg_record)
@extern("LLVMGetNextDbgRecord");

fn LLVMDbgRecordRef getPreviousDbgRecord(
  LLVMDbgRecordRef dbg_record)
@extern("LLVMGetPreviousDbgRecord");

fn CUInt getNumArgOperands(
  LLVMValueRef instr)
@extern("LLVMGetNumArgOperands");

fn void setInstructionCallConv(
  LLVMValueRef instr, 
  CUInt cc)
@extern("LLVMSetInstructionCallConv");

fn CUInt getInstructionCallConv(
  LLVMValueRef instr)
@extern("LLVMGetInstructionCallConv");

fn void setInstrParamAlignment(
  LLVMValueRef instr, 
  LLVMAttributeIndex idx, 
  CUInt align)
@extern("LLVMSetInstrParamAlignment");

fn void addCallSiteAttribute(
  LLVMValueRef c, 
  LLVMAttributeIndex idx, 
  LLVMAttributeRef a)
@extern("LLVMAddCallSiteAttribute");

fn CUInt getCallSiteAttributeCount(
  LLVMValueRef c, 
  LLVMAttributeIndex idx)
@extern("LLVMGetCallSiteAttributeCount");

fn void getCallSiteAttributes(
  LLVMValueRef c, 
  LLVMAttributeIndex idx, 
  LLVMAttributeRef* attrs)
@extern("LLVMGetCallSiteAttributes");

fn LLVMAttributeRef getCallSiteEnumAttribute(
  LLVMValueRef c, 
  LLVMAttributeIndex idx, 
  CUInt kind_id)
@extern("LLVMGetCallSiteEnumAttribute");

fn LLVMAttributeRef getCallSiteStringAttribute(
  LLVMValueRef c, 
  LLVMAttributeIndex idx, 
  CChar* k, 
  CUInt k_len)
@extern("LLVMGetCallSiteStringAttribute");

fn void removeCallSiteEnumAttribute(
  LLVMValueRef c, 
  LLVMAttributeIndex idx, 
  CUInt kind_id)
@extern("LLVMRemoveCallSiteEnumAttribute");

fn void removeCallSiteStringAttribute(
  LLVMValueRef c, 
  LLVMAttributeIndex idx, 
  CChar* k, 
  CUInt k_len)
@extern("LLVMRemoveCallSiteStringAttribute");

fn LLVMTypeRef getCalledFunctionType(
  LLVMValueRef c)
@extern("LLVMGetCalledFunctionType");

fn LLVMValueRef getCalledValue(
  LLVMValueRef instr)
@extern("LLVMGetCalledValue");

fn CUInt getNumOperandBundles(
  LLVMValueRef c)
@extern("LLVMGetNumOperandBundles");

fn LLVMOperandBundleRef getOperandBundleAtIndex(
  LLVMValueRef c, 
  CUInt index)
@extern("LLVMGetOperandBundleAtIndex");

fn LLVMBool isTailCall(
  LLVMValueRef call_inst)
@extern("LLVMIsTailCall");

fn void setTailCall(
  LLVMValueRef call_inst, 
  LLVMBool is_tail_call)
@extern("LLVMSetTailCall");

fn LLVMTailCallKind getTailCallKind(
  LLVMValueRef call_inst)
@extern("LLVMGetTailCallKind");

fn void setTailCallKind(
  LLVMValueRef call_inst, 
  LLVMTailCallKind kind)
@extern("LLVMSetTailCallKind");

fn LLVMBasicBlockRef getNormalDest(
  LLVMValueRef invoke_inst)
@extern("LLVMGetNormalDest");

fn LLVMBasicBlockRef getUnwindDest(
  LLVMValueRef invoke_inst)
@extern("LLVMGetUnwindDest");

fn void setNormalDest(
  LLVMValueRef invoke_inst, 
  LLVMBasicBlockRef b)
@extern("LLVMSetNormalDest");

fn void setUnwindDest(
  LLVMValueRef invoke_inst, 
  LLVMBasicBlockRef b)
@extern("LLVMSetUnwindDest");

fn LLVMBasicBlockRef getCallBrDefaultDest(
  LLVMValueRef call_br)
@extern("LLVMGetCallBrDefaultDest");

fn CUInt getCallBrNumIndirectDests(
  LLVMValueRef call_br)
@extern("LLVMGetCallBrNumIndirectDests");

fn LLVMBasicBlockRef getCallBrIndirectDest(
  LLVMValueRef call_br, 
  CUInt idx)
@extern("LLVMGetCallBrIndirectDest");

fn CUInt getNumSuccessors(
  LLVMValueRef term)
@extern("LLVMGetNumSuccessors");

fn LLVMBasicBlockRef getSuccessor(
  LLVMValueRef term, 
  CUInt i)
@extern("LLVMGetSuccessor");

fn void setSuccessor(
  LLVMValueRef term, 
  CUInt i, 
  LLVMBasicBlockRef block)
@extern("LLVMSetSuccessor");

fn LLVMBool isConditional(
  LLVMValueRef branch)
@extern("LLVMIsConditional");

fn LLVMValueRef getCondition(
  LLVMValueRef branch)
@extern("LLVMGetCondition");

fn void setCondition(
  LLVMValueRef branch, 
  LLVMValueRef cond)
@extern("LLVMSetCondition");

fn LLVMBasicBlockRef getSwitchDefaultDest(
  LLVMValueRef switch_instr)
@extern("LLVMGetSwitchDefaultDest");

fn LLVMTypeRef getAllocatedType(
  LLVMValueRef alloca)
@extern("LLVMGetAllocatedType");

fn LLVMBool isInBounds(
  LLVMValueRef gep)
@extern("LLVMIsInBounds");

fn void setIsInBounds(
  LLVMValueRef gep, 
  LLVMBool in_bounds)
@extern("LLVMSetIsInBounds");

fn LLVMTypeRef getGEPSourceElementType(
  LLVMValueRef gep)
@extern("LLVMGetGEPSourceElementType");

fn LLVMGEPNoWrapFlags gEPGetNoWrapFlags(
  LLVMValueRef gep)
@extern("LLVMGEPGetNoWrapFlags");

fn void gEPSetNoWrapFlags(
  LLVMValueRef gep, 
  LLVMGEPNoWrapFlags no_wrap_flags)
@extern("LLVMGEPSetNoWrapFlags");

fn void addIncoming(
  LLVMValueRef phi_node, 
  LLVMValueRef* incoming_values, 
  LLVMBasicBlockRef* incoming_blocks, 
  CUInt count)
@extern("LLVMAddIncoming");

fn CUInt countIncoming(
  LLVMValueRef phi_node)
@extern("LLVMCountIncoming");

fn LLVMValueRef getIncomingValue(
  LLVMValueRef phi_node, 
  CUInt index)
@extern("LLVMGetIncomingValue");

fn LLVMBasicBlockRef getIncomingBlock(
  LLVMValueRef phi_node, 
  CUInt index)
@extern("LLVMGetIncomingBlock");

fn CUInt getNumIndices(
  LLVMValueRef inst)
@extern("LLVMGetNumIndices");

fn CUInt* getIndices(
  LLVMValueRef inst)
@extern("LLVMGetIndices");

fn LLVMBuilderRef createBuilderInContext(
  LLVMContextRef c)
@extern("LLVMCreateBuilderInContext");

fn LLVMBuilderRef createBuilder()
@extern("LLVMCreateBuilder");

fn void positionBuilder(
  LLVMBuilderRef builder, 
  LLVMBasicBlockRef block, 
  LLVMValueRef instr)
@extern("LLVMPositionBuilder");

fn void positionBuilderBeforeDbgRecords(
  LLVMBuilderRef builder, 
  LLVMBasicBlockRef block, 
  LLVMValueRef inst)
@extern("LLVMPositionBuilderBeforeDbgRecords");

fn void positionBuilderBefore(
  LLVMBuilderRef builder, 
  LLVMValueRef instr)
@extern("LLVMPositionBuilderBefore");

fn void positionBuilderBeforeInstrAndDbgRecords(
  LLVMBuilderRef builder, 
  LLVMValueRef instr)
@extern("LLVMPositionBuilderBeforeInstrAndDbgRecords");

fn void positionBuilderAtEnd(
  LLVMBuilderRef builder, 
  LLVMBasicBlockRef block)
@extern("LLVMPositionBuilderAtEnd");

fn LLVMBasicBlockRef getInsertBlock(
  LLVMBuilderRef builder)
@extern("LLVMGetInsertBlock");

fn void clearInsertionPosition(
  LLVMBuilderRef builder)
@extern("LLVMClearInsertionPosition");

fn void insertIntoBuilder(
  LLVMBuilderRef builder, 
  LLVMValueRef instr)
@extern("LLVMInsertIntoBuilder");

fn void insertIntoBuilderWithName(
  LLVMBuilderRef builder, 
  LLVMValueRef instr, 
  CChar* name)
@extern("LLVMInsertIntoBuilderWithName");

fn void disposeBuilder(
  LLVMBuilderRef builder)
@extern("LLVMDisposeBuilder");

fn LLVMMetadataRef getCurrentDebugLocation2(
  LLVMBuilderRef builder)
@extern("LLVMGetCurrentDebugLocation2");

fn void setCurrentDebugLocation2(
  LLVMBuilderRef builder, 
  LLVMMetadataRef loc)
@extern("LLVMSetCurrentDebugLocation2");

fn void setInstDebugLocation(
  LLVMBuilderRef builder, 
  LLVMValueRef inst)
@extern("LLVMSetInstDebugLocation");

fn void addMetadataToInst(
  LLVMBuilderRef builder, 
  LLVMValueRef inst)
@extern("LLVMAddMetadataToInst");

fn LLVMMetadataRef builderGetDefaultFPMathTag(
  LLVMBuilderRef builder)
@extern("LLVMBuilderGetDefaultFPMathTag");

fn void builderSetDefaultFPMathTag(
  LLVMBuilderRef builder, 
  LLVMMetadataRef fp_math_tag)
@extern("LLVMBuilderSetDefaultFPMathTag");

fn LLVMContextRef getBuilderContext(
  LLVMBuilderRef builder)
@extern("LLVMGetBuilderContext");

fn void setCurrentDebugLocation(
  LLVMBuilderRef builder, 
  LLVMValueRef l)
@extern("LLVMSetCurrentDebugLocation");

fn LLVMValueRef getCurrentDebugLocation(
  LLVMBuilderRef builder)
@extern("LLVMGetCurrentDebugLocation");

fn LLVMValueRef buildRetVoid(
  LLVMBuilderRef)
@extern("LLVMBuildRetVoid");

fn LLVMValueRef buildRet(
  LLVMBuilderRef, 
  LLVMValueRef v)
@extern("LLVMBuildRet");

fn LLVMValueRef buildAggregateRet(
  LLVMBuilderRef, 
  LLVMValueRef* ret_vals, 
  CUInt n)
@extern("LLVMBuildAggregateRet");

fn LLVMValueRef buildBr(
  LLVMBuilderRef, 
  LLVMBasicBlockRef dest)
@extern("LLVMBuildBr");

fn LLVMValueRef buildCondBr(
  LLVMBuilderRef, 
  LLVMValueRef if_, 
  LLVMBasicBlockRef then, 
  LLVMBasicBlockRef else_)
@extern("LLVMBuildCondBr");

fn LLVMValueRef buildSwitch(
  LLVMBuilderRef, 
  LLVMValueRef v, 
  LLVMBasicBlockRef else_, 
  CUInt num_cases)
@extern("LLVMBuildSwitch");

fn LLVMValueRef buildIndirectBr(
  LLVMBuilderRef b, 
  LLVMValueRef addr, 
  CUInt num_dests)
@extern("LLVMBuildIndirectBr");

fn LLVMValueRef buildCallBr(
  LLVMBuilderRef b, 
  LLVMTypeRef ty, 
  LLVMValueRef fn_, 
  LLVMBasicBlockRef default_dest, 
  LLVMBasicBlockRef* indirect_dests, 
  CUInt num_indirect_dests, 
  LLVMValueRef* args, 
  CUInt num_args, 
  LLVMOperandBundleRef* bundles, 
  CUInt num_bundles, 
  CChar* name)
@extern("LLVMBuildCallBr");

fn LLVMValueRef buildInvoke2(
  LLVMBuilderRef, 
  LLVMTypeRef ty, 
  LLVMValueRef fn_, 
  LLVMValueRef* args, 
  CUInt num_args, 
  LLVMBasicBlockRef then, 
  LLVMBasicBlockRef catch_, 
  CChar* name)
@extern("LLVMBuildInvoke2");

fn LLVMValueRef buildInvokeWithOperandBundles(
  LLVMBuilderRef, 
  LLVMTypeRef ty, 
  LLVMValueRef fn_, 
  LLVMValueRef* args, 
  CUInt num_args, 
  LLVMBasicBlockRef then, 
  LLVMBasicBlockRef catch_, 
  LLVMOperandBundleRef* bundles, 
  CUInt num_bundles, 
  CChar* name)
@extern("LLVMBuildInvokeWithOperandBundles");

fn LLVMValueRef buildUnreachable(
  LLVMBuilderRef)
@extern("LLVMBuildUnreachable");

fn LLVMValueRef buildResume(
  LLVMBuilderRef b, 
  LLVMValueRef exn)
@extern("LLVMBuildResume");

fn LLVMValueRef buildLandingPad(
  LLVMBuilderRef b, 
  LLVMTypeRef ty, 
  LLVMValueRef pers_fn, 
  CUInt num_clauses, 
  CChar* name)
@extern("LLVMBuildLandingPad");

fn LLVMValueRef buildCleanupRet(
  LLVMBuilderRef b, 
  LLVMValueRef catch_pad, 
  LLVMBasicBlockRef bb)
@extern("LLVMBuildCleanupRet");

fn LLVMValueRef buildCatchRet(
  LLVMBuilderRef b, 
  LLVMValueRef catch_pad, 
  LLVMBasicBlockRef bb)
@extern("LLVMBuildCatchRet");

fn LLVMValueRef buildCatchPad(
  LLVMBuilderRef b, 
  LLVMValueRef parent_pad, 
  LLVMValueRef* args, 
  CUInt num_args, 
  CChar* name)
@extern("LLVMBuildCatchPad");

fn LLVMValueRef buildCleanupPad(
  LLVMBuilderRef b, 
  LLVMValueRef parent_pad, 
  LLVMValueRef* args, 
  CUInt num_args, 
  CChar* name)
@extern("LLVMBuildCleanupPad");

fn LLVMValueRef buildCatchSwitch(
  LLVMBuilderRef b, 
  LLVMValueRef parent_pad, 
  LLVMBasicBlockRef unwind_bb, 
  CUInt num_handlers, 
  CChar* name)
@extern("LLVMBuildCatchSwitch");

fn void addCase(
  LLVMValueRef switch_, 
  LLVMValueRef on_val, 
  LLVMBasicBlockRef dest)
@extern("LLVMAddCase");

fn void addDestination(
  LLVMValueRef indirect_br, 
  LLVMBasicBlockRef dest)
@extern("LLVMAddDestination");

fn CUInt getNumClauses(
  LLVMValueRef landing_pad)
@extern("LLVMGetNumClauses");

fn LLVMValueRef getClause(
  LLVMValueRef landing_pad, 
  CUInt idx)
@extern("LLVMGetClause");

fn void addClause(
  LLVMValueRef landing_pad, 
  LLVMValueRef clause_val)
@extern("LLVMAddClause");

fn LLVMBool isCleanup(
  LLVMValueRef landing_pad)
@extern("LLVMIsCleanup");

fn void setCleanup(
  LLVMValueRef landing_pad, 
  LLVMBool val)
@extern("LLVMSetCleanup");

fn void addHandler(
  LLVMValueRef catch_switch, 
  LLVMBasicBlockRef dest)
@extern("LLVMAddHandler");

fn CUInt getNumHandlers(
  LLVMValueRef catch_switch)
@extern("LLVMGetNumHandlers");

fn void getHandlers(
  LLVMValueRef catch_switch, 
  LLVMBasicBlockRef* handlers)
@extern("LLVMGetHandlers");

fn LLVMValueRef getArgOperand(
  LLVMValueRef funclet, 
  CUInt i)
@extern("LLVMGetArgOperand");

fn void setArgOperand(
  LLVMValueRef funclet, 
  CUInt i, 
  LLVMValueRef value)
@extern("LLVMSetArgOperand");

fn LLVMValueRef getParentCatchSwitch(
  LLVMValueRef catch_pad)
@extern("LLVMGetParentCatchSwitch");

fn void setParentCatchSwitch(
  LLVMValueRef catch_pad, 
  LLVMValueRef catch_switch)
@extern("LLVMSetParentCatchSwitch");

fn LLVMValueRef buildAdd(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildAdd");

fn LLVMValueRef buildNSWAdd(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildNSWAdd");

fn LLVMValueRef buildNUWAdd(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildNUWAdd");

fn LLVMValueRef buildFAdd(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildFAdd");

fn LLVMValueRef buildSub(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildSub");

fn LLVMValueRef buildNSWSub(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildNSWSub");

fn LLVMValueRef buildNUWSub(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildNUWSub");

fn LLVMValueRef buildFSub(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildFSub");

fn LLVMValueRef buildMul(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildMul");

fn LLVMValueRef buildNSWMul(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildNSWMul");

fn LLVMValueRef buildNUWMul(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildNUWMul");

fn LLVMValueRef buildFMul(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildFMul");

fn LLVMValueRef buildUDiv(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildUDiv");

fn LLVMValueRef buildExactUDiv(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildExactUDiv");

fn LLVMValueRef buildSDiv(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildSDiv");

fn LLVMValueRef buildExactSDiv(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildExactSDiv");

fn LLVMValueRef buildFDiv(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildFDiv");

fn LLVMValueRef buildURem(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildURem");

fn LLVMValueRef buildSRem(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildSRem");

fn LLVMValueRef buildFRem(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildFRem");

fn LLVMValueRef buildShl(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildShl");

fn LLVMValueRef buildLShr(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildLShr");

fn LLVMValueRef buildAShr(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildAShr");

fn LLVMValueRef buildAnd(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildAnd");

fn LLVMValueRef buildOr(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildOr");

fn LLVMValueRef buildXor(
  LLVMBuilderRef, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildXor");

fn LLVMValueRef buildBinOp(
  LLVMBuilderRef b, 
  LLVMOpcode op, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildBinOp");

fn LLVMValueRef buildNeg(
  LLVMBuilderRef, 
  LLVMValueRef v, 
  CChar* name)
@extern("LLVMBuildNeg");

fn LLVMValueRef buildNSWNeg(
  LLVMBuilderRef b, 
  LLVMValueRef v, 
  CChar* name)
@extern("LLVMBuildNSWNeg");

fn LLVMValueRef buildNUWNeg(
  LLVMBuilderRef b, 
  LLVMValueRef v, 
  CChar* name)
@extern("LLVMBuildNUWNeg");

fn LLVMValueRef buildFNeg(
  LLVMBuilderRef, 
  LLVMValueRef v, 
  CChar* name)
@extern("LLVMBuildFNeg");

fn LLVMValueRef buildNot(
  LLVMBuilderRef, 
  LLVMValueRef v, 
  CChar* name)
@extern("LLVMBuildNot");

fn LLVMBool getNUW(
  LLVMValueRef arith_inst)
@extern("LLVMGetNUW");

fn void setNUW(
  LLVMValueRef arith_inst, 
  LLVMBool has_nuw)
@extern("LLVMSetNUW");

fn LLVMBool getNSW(
  LLVMValueRef arith_inst)
@extern("LLVMGetNSW");

fn void setNSW(
  LLVMValueRef arith_inst, 
  LLVMBool has_nsw)
@extern("LLVMSetNSW");

fn LLVMBool getExact(
  LLVMValueRef div_or_shr_inst)
@extern("LLVMGetExact");

fn void setExact(
  LLVMValueRef div_or_shr_inst, 
  LLVMBool is_exact)
@extern("LLVMSetExact");

fn LLVMBool getNNeg(
  LLVMValueRef non_neg_inst)
@extern("LLVMGetNNeg");

fn void setNNeg(
  LLVMValueRef non_neg_inst, 
  LLVMBool is_non_neg)
@extern("LLVMSetNNeg");

fn LLVMFastMathFlags getFastMathFlags(
  LLVMValueRef fp_math_inst)
@extern("LLVMGetFastMathFlags");

fn void setFastMathFlags(
  LLVMValueRef fp_math_inst, 
  LLVMFastMathFlags fmf)
@extern("LLVMSetFastMathFlags");

fn LLVMBool canValueUseFastMathFlags(
  LLVMValueRef inst)
@extern("LLVMCanValueUseFastMathFlags");

fn LLVMBool getIsDisjoint(
  LLVMValueRef inst)
@extern("LLVMGetIsDisjoint");

fn void setIsDisjoint(
  LLVMValueRef inst, 
  LLVMBool is_disjoint)
@extern("LLVMSetIsDisjoint");

fn LLVMValueRef buildMalloc(
  LLVMBuilderRef, 
  LLVMTypeRef ty, 
  CChar* name)
@extern("LLVMBuildMalloc");

fn LLVMValueRef buildArrayMalloc(
  LLVMBuilderRef, 
  LLVMTypeRef ty, 
  LLVMValueRef val, 
  CChar* name)
@extern("LLVMBuildArrayMalloc");

fn LLVMValueRef buildMemSet(
  LLVMBuilderRef b, 
  LLVMValueRef ptr, 
  LLVMValueRef val, 
  LLVMValueRef len, 
  CUInt align)
@extern("LLVMBuildMemSet");

fn LLVMValueRef buildMemCpy(
  LLVMBuilderRef b, 
  LLVMValueRef dst, 
  CUInt dst_align, 
  LLVMValueRef src, 
  CUInt src_align, 
  LLVMValueRef size)
@extern("LLVMBuildMemCpy");

fn LLVMValueRef buildMemMove(
  LLVMBuilderRef b, 
  LLVMValueRef dst, 
  CUInt dst_align, 
  LLVMValueRef src, 
  CUInt src_align, 
  LLVMValueRef size)
@extern("LLVMBuildMemMove");

fn LLVMValueRef buildAlloca(
  LLVMBuilderRef, 
  LLVMTypeRef ty, 
  CChar* name)
@extern("LLVMBuildAlloca");

fn LLVMValueRef buildArrayAlloca(
  LLVMBuilderRef, 
  LLVMTypeRef ty, 
  LLVMValueRef val, 
  CChar* name)
@extern("LLVMBuildArrayAlloca");

fn LLVMValueRef buildFree(
  LLVMBuilderRef, 
  LLVMValueRef pointer_val)
@extern("LLVMBuildFree");

fn LLVMValueRef buildLoad2(
  LLVMBuilderRef, 
  LLVMTypeRef ty, 
  LLVMValueRef pointer_val, 
  CChar* name)
@extern("LLVMBuildLoad2");

fn LLVMValueRef buildStore(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMValueRef ptr)
@extern("LLVMBuildStore");

fn LLVMValueRef buildGEP2(
  LLVMBuilderRef b, 
  LLVMTypeRef ty, 
  LLVMValueRef pointer, 
  LLVMValueRef* indices, 
  CUInt num_indices, 
  CChar* name)
@extern("LLVMBuildGEP2");

fn LLVMValueRef buildInBoundsGEP2(
  LLVMBuilderRef b, 
  LLVMTypeRef ty, 
  LLVMValueRef pointer, 
  LLVMValueRef* indices, 
  CUInt num_indices, 
  CChar* name)
@extern("LLVMBuildInBoundsGEP2");

fn LLVMValueRef buildGEPWithNoWrapFlags(
  LLVMBuilderRef b, 
  LLVMTypeRef ty, 
  LLVMValueRef pointer, 
  LLVMValueRef* indices, 
  CUInt num_indices, 
  CChar* name, 
  LLVMGEPNoWrapFlags no_wrap_flags)
@extern("LLVMBuildGEPWithNoWrapFlags");

fn LLVMValueRef buildStructGEP2(
  LLVMBuilderRef b, 
  LLVMTypeRef ty, 
  LLVMValueRef pointer, 
  CUInt idx, 
  CChar* name)
@extern("LLVMBuildStructGEP2");

fn LLVMValueRef buildGlobalString(
  LLVMBuilderRef b, 
  CChar* str, 
  CChar* name)
@extern("LLVMBuildGlobalString");

fn LLVMValueRef buildGlobalStringPtr(
  LLVMBuilderRef b, 
  CChar* str, 
  CChar* name)
@extern("LLVMBuildGlobalStringPtr");

fn LLVMBool getVolatile(
  LLVMValueRef memory_access_inst)
@extern("LLVMGetVolatile");

fn void setVolatile(
  LLVMValueRef memory_access_inst, 
  LLVMBool is_volatile)
@extern("LLVMSetVolatile");

fn LLVMBool getWeak(
  LLVMValueRef cmp_xchg_inst)
@extern("LLVMGetWeak");

fn void setWeak(
  LLVMValueRef cmp_xchg_inst, 
  LLVMBool is_weak)
@extern("LLVMSetWeak");

fn LLVMAtomicOrdering getOrdering(
  LLVMValueRef memory_access_inst)
@extern("LLVMGetOrdering");

fn void setOrdering(
  LLVMValueRef memory_access_inst, 
  LLVMAtomicOrdering ordering)
@extern("LLVMSetOrdering");

fn LLVMAtomicRMWBinOp getAtomicRMWBinOp(
  LLVMValueRef atomic_rmw_inst)
@extern("LLVMGetAtomicRMWBinOp");

fn void setAtomicRMWBinOp(
  LLVMValueRef atomic_rmw_inst, 
  LLVMAtomicRMWBinOp bin_op)
@extern("LLVMSetAtomicRMWBinOp");

fn LLVMValueRef buildTrunc(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  CChar* name)
@extern("LLVMBuildTrunc");

fn LLVMValueRef buildZExt(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  CChar* name)
@extern("LLVMBuildZExt");

fn LLVMValueRef buildSExt(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  CChar* name)
@extern("LLVMBuildSExt");

fn LLVMValueRef buildFPToUI(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  CChar* name)
@extern("LLVMBuildFPToUI");

fn LLVMValueRef buildFPToSI(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  CChar* name)
@extern("LLVMBuildFPToSI");

fn LLVMValueRef buildUIToFP(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  CChar* name)
@extern("LLVMBuildUIToFP");

fn LLVMValueRef buildSIToFP(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  CChar* name)
@extern("LLVMBuildSIToFP");

fn LLVMValueRef buildFPTrunc(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  CChar* name)
@extern("LLVMBuildFPTrunc");

fn LLVMValueRef buildFPExt(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  CChar* name)
@extern("LLVMBuildFPExt");

fn LLVMValueRef buildPtrToInt(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  CChar* name)
@extern("LLVMBuildPtrToInt");

fn LLVMValueRef buildIntToPtr(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  CChar* name)
@extern("LLVMBuildIntToPtr");

fn LLVMValueRef buildBitCast(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  CChar* name)
@extern("LLVMBuildBitCast");

fn LLVMValueRef buildAddrSpaceCast(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  CChar* name)
@extern("LLVMBuildAddrSpaceCast");

fn LLVMValueRef buildZExtOrBitCast(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  CChar* name)
@extern("LLVMBuildZExtOrBitCast");

fn LLVMValueRef buildSExtOrBitCast(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  CChar* name)
@extern("LLVMBuildSExtOrBitCast");

fn LLVMValueRef buildTruncOrBitCast(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  CChar* name)
@extern("LLVMBuildTruncOrBitCast");

fn LLVMValueRef buildCast(
  LLVMBuilderRef b, 
  LLVMOpcode op, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  CChar* name)
@extern("LLVMBuildCast");

fn LLVMValueRef buildPointerCast(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  CChar* name)
@extern("LLVMBuildPointerCast");

fn LLVMValueRef buildIntCast2(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  LLVMBool is_signed, 
  CChar* name)
@extern("LLVMBuildIntCast2");

fn LLVMValueRef buildFPCast(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  CChar* name)
@extern("LLVMBuildFPCast");

fn LLVMValueRef buildIntCast(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  LLVMTypeRef dest_ty, 
  CChar* name)
@extern("LLVMBuildIntCast");

fn LLVMOpcode getCastOpcode(
  LLVMValueRef src, 
  LLVMBool src_is_signed, 
  LLVMTypeRef dest_ty, 
  LLVMBool dest_is_signed)
@extern("LLVMGetCastOpcode");

fn LLVMValueRef buildICmp(
  LLVMBuilderRef, 
  LLVMIntPredicate op, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildICmp");

fn LLVMValueRef buildFCmp(
  LLVMBuilderRef, 
  LLVMRealPredicate op, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildFCmp");

fn LLVMValueRef buildPhi(
  LLVMBuilderRef, 
  LLVMTypeRef ty, 
  CChar* name)
@extern("LLVMBuildPhi");

fn LLVMValueRef buildCall2(
  LLVMBuilderRef, 
  LLVMTypeRef, 
  LLVMValueRef fn_, 
  LLVMValueRef* args, 
  CUInt num_args, 
  CChar* name)
@extern("LLVMBuildCall2");

fn LLVMValueRef buildCallWithOperandBundles(
  LLVMBuilderRef, 
  LLVMTypeRef, 
  LLVMValueRef fn_, 
  LLVMValueRef* args, 
  CUInt num_args, 
  LLVMOperandBundleRef* bundles, 
  CUInt num_bundles, 
  CChar* name)
@extern("LLVMBuildCallWithOperandBundles");

fn LLVMValueRef buildSelect(
  LLVMBuilderRef, 
  LLVMValueRef if_, 
  LLVMValueRef then, 
  LLVMValueRef else_, 
  CChar* name)
@extern("LLVMBuildSelect");

fn LLVMValueRef buildVAArg(
  LLVMBuilderRef, 
  LLVMValueRef list, 
  LLVMTypeRef ty, 
  CChar* name)
@extern("LLVMBuildVAArg");

fn LLVMValueRef buildExtractElement(
  LLVMBuilderRef, 
  LLVMValueRef vec_val, 
  LLVMValueRef index, 
  CChar* name)
@extern("LLVMBuildExtractElement");

fn LLVMValueRef buildInsertElement(
  LLVMBuilderRef, 
  LLVMValueRef vec_val, 
  LLVMValueRef elt_val, 
  LLVMValueRef index, 
  CChar* name)
@extern("LLVMBuildInsertElement");

fn LLVMValueRef buildShuffleVector(
  LLVMBuilderRef, 
  LLVMValueRef v_1, 
  LLVMValueRef v_2, 
  LLVMValueRef mask, 
  CChar* name)
@extern("LLVMBuildShuffleVector");

fn LLVMValueRef buildExtractValue(
  LLVMBuilderRef, 
  LLVMValueRef agg_val, 
  CUInt index, 
  CChar* name)
@extern("LLVMBuildExtractValue");

fn LLVMValueRef buildInsertValue(
  LLVMBuilderRef, 
  LLVMValueRef agg_val, 
  LLVMValueRef elt_val, 
  CUInt index, 
  CChar* name)
@extern("LLVMBuildInsertValue");

fn LLVMValueRef buildFreeze(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  CChar* name)
@extern("LLVMBuildFreeze");

fn LLVMValueRef buildIsNull(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  CChar* name)
@extern("LLVMBuildIsNull");

fn LLVMValueRef buildIsNotNull(
  LLVMBuilderRef, 
  LLVMValueRef val, 
  CChar* name)
@extern("LLVMBuildIsNotNull");

fn LLVMValueRef buildPtrDiff2(
  LLVMBuilderRef, 
  LLVMTypeRef elem_ty, 
  LLVMValueRef lhs, 
  LLVMValueRef rhs, 
  CChar* name)
@extern("LLVMBuildPtrDiff2");

fn LLVMValueRef buildFence(
  LLVMBuilderRef b, 
  LLVMAtomicOrdering ordering, 
  LLVMBool single_thread, 
  CChar* name)
@extern("LLVMBuildFence");

fn LLVMValueRef buildFenceSyncScope(
  LLVMBuilderRef b, 
  LLVMAtomicOrdering ordering, 
  CUInt ssid, 
  CChar* name)
@extern("LLVMBuildFenceSyncScope");

fn LLVMValueRef buildAtomicRMW(
  LLVMBuilderRef b, 
  LLVMAtomicRMWBinOp op, 
  LLVMValueRef ptr, 
  LLVMValueRef val, 
  LLVMAtomicOrdering ordering, 
  LLVMBool single_thread)
@extern("LLVMBuildAtomicRMW");

fn LLVMValueRef buildAtomicRMWSyncScope(
  LLVMBuilderRef b, 
  LLVMAtomicRMWBinOp op, 
  LLVMValueRef ptr, 
  LLVMValueRef val, 
  LLVMAtomicOrdering ordering, 
  CUInt ssid)
@extern("LLVMBuildAtomicRMWSyncScope");

fn LLVMValueRef buildAtomicCmpXchg(
  LLVMBuilderRef b, 
  LLVMValueRef ptr, 
  LLVMValueRef cmp, 
  LLVMValueRef new, 
  LLVMAtomicOrdering success_ordering, 
  LLVMAtomicOrdering failure_ordering, 
  LLVMBool single_thread)
@extern("LLVMBuildAtomicCmpXchg");

fn LLVMValueRef buildAtomicCmpXchgSyncScope(
  LLVMBuilderRef b, 
  LLVMValueRef ptr, 
  LLVMValueRef cmp, 
  LLVMValueRef new, 
  LLVMAtomicOrdering success_ordering, 
  LLVMAtomicOrdering failure_ordering, 
  CUInt ssid)
@extern("LLVMBuildAtomicCmpXchgSyncScope");

fn CUInt getNumMaskElements(
  LLVMValueRef shuffle_vector_inst)
@extern("LLVMGetNumMaskElements");

fn CInt getUndefMaskElem()
@extern("LLVMGetUndefMaskElem");

fn CInt getMaskValue(
  LLVMValueRef shuffle_vector_inst, 
  CUInt elt)
@extern("LLVMGetMaskValue");

fn LLVMBool isAtomicSingleThread(
  LLVMValueRef atomic_inst)
@extern("LLVMIsAtomicSingleThread");

fn void setAtomicSingleThread(
  LLVMValueRef atomic_inst, 
  LLVMBool single_thread)
@extern("LLVMSetAtomicSingleThread");

fn LLVMBool isAtomic(
  LLVMValueRef inst)
@extern("LLVMIsAtomic");

fn CUInt getAtomicSyncScopeID(
  LLVMValueRef atomic_inst)
@extern("LLVMGetAtomicSyncScopeID");

fn void setAtomicSyncScopeID(
  LLVMValueRef atomic_inst, 
  CUInt ssid)
@extern("LLVMSetAtomicSyncScopeID");

fn LLVMAtomicOrdering getCmpXchgSuccessOrdering(
  LLVMValueRef cmp_xchg_inst)
@extern("LLVMGetCmpXchgSuccessOrdering");

fn void setCmpXchgSuccessOrdering(
  LLVMValueRef cmp_xchg_inst, 
  LLVMAtomicOrdering ordering)
@extern("LLVMSetCmpXchgSuccessOrdering");

fn LLVMAtomicOrdering getCmpXchgFailureOrdering(
  LLVMValueRef cmp_xchg_inst)
@extern("LLVMGetCmpXchgFailureOrdering");

fn void setCmpXchgFailureOrdering(
  LLVMValueRef cmp_xchg_inst, 
  LLVMAtomicOrdering ordering)
@extern("LLVMSetCmpXchgFailureOrdering");

fn LLVMModuleProviderRef createModuleProviderForExistingModule(
  LLVMModuleRef m)
@extern("LLVMCreateModuleProviderForExistingModule");

fn void disposeModuleProvider(
  LLVMModuleProviderRef m)
@extern("LLVMDisposeModuleProvider");

fn LLVMBool createMemoryBufferWithContentsOfFile(
  CChar* path, 
  LLVMMemoryBufferRef* out_mem_buf, 
  CChar** out_message)
@extern("LLVMCreateMemoryBufferWithContentsOfFile");

fn LLVMBool createMemoryBufferWithSTDIN(
  LLVMMemoryBufferRef* out_mem_buf, 
  CChar** out_message)
@extern("LLVMCreateMemoryBufferWithSTDIN");

fn LLVMMemoryBufferRef createMemoryBufferWithMemoryRange(
  CChar* input_data, 
  usz input_data_length, 
  CChar* buffer_name, 
  LLVMBool requires_null_terminator)
@extern("LLVMCreateMemoryBufferWithMemoryRange");

fn LLVMMemoryBufferRef createMemoryBufferWithMemoryRangeCopy(
  CChar* input_data, 
  usz input_data_length, 
  CChar* buffer_name)
@extern("LLVMCreateMemoryBufferWithMemoryRangeCopy");

fn CChar* getBufferStart(
  LLVMMemoryBufferRef mem_buf)
@extern("LLVMGetBufferStart");

fn usz getBufferSize(
  LLVMMemoryBufferRef mem_buf)
@extern("LLVMGetBufferSize");

fn void disposeMemoryBuffer(
  LLVMMemoryBufferRef mem_buf)
@extern("LLVMDisposeMemoryBuffer");

fn LLVMPassManagerRef createPassManager()
@extern("LLVMCreatePassManager");

fn LLVMPassManagerRef createFunctionPassManagerForModule(
  LLVMModuleRef m)
@extern("LLVMCreateFunctionPassManagerForModule");

fn LLVMPassManagerRef createFunctionPassManager(
  LLVMModuleProviderRef mp)
@extern("LLVMCreateFunctionPassManager");

fn LLVMBool runPassManager(
  LLVMPassManagerRef pm, 
  LLVMModuleRef m)
@extern("LLVMRunPassManager");

fn LLVMBool initializeFunctionPassManager(
  LLVMPassManagerRef fpm)
@extern("LLVMInitializeFunctionPassManager");

fn LLVMBool runFunctionPassManager(
  LLVMPassManagerRef fpm, 
  LLVMValueRef f)
@extern("LLVMRunFunctionPassManager");

fn LLVMBool finalizeFunctionPassManager(
  LLVMPassManagerRef fpm)
@extern("LLVMFinalizeFunctionPassManager");

fn void disposePassManager(
  LLVMPassManagerRef pm)
@extern("LLVMDisposePassManager");

fn LLVMBool startMultithreaded()
@extern("LLVMStartMultithreaded");

fn void stopMultithreaded()
@extern("LLVMStopMultithreaded");

fn LLVMBool isMultithreaded()
@extern("LLVMIsMultithreaded");

typedef LLVMDIFlags = inline CUInt;
const LLVMDIFlags DI_FLAG_ZERO = 0;
const LLVMDIFlags DI_FLAG_PRIVATE = 1;
const LLVMDIFlags DI_FLAG_PROTECTED = 2;
const LLVMDIFlags DI_FLAG_PUBLIC = 3;
const LLVMDIFlags DI_FLAG_FWD_DECL = 1<<2;
const LLVMDIFlags DI_FLAG_APPLE_BLOCK = 1<<3;
const LLVMDIFlags DI_FLAG_RESERVED_BIT_4 = 1<<4;
const LLVMDIFlags DI_FLAG_VIRTUAL = 1<<5;
const LLVMDIFlags DI_FLAG_ARTIFICIAL = 1<<6;
const LLVMDIFlags DI_FLAG_EXPLICIT = 1<<7;
const LLVMDIFlags DI_FLAG_PROTOTYPED = 1<<8;
const LLVMDIFlags DI_FLAG_OBJC_CLASS_COMPLETE = 1<<9;
const LLVMDIFlags DI_FLAG_OBJECT_POINTER = 1<<10;
const LLVMDIFlags DI_FLAG_VECTOR = 1<<11;
const LLVMDIFlags DI_FLAG_STATIC_MEMBER = 1<<12;
const LLVMDIFlags DI_FLAG_L_VALUE_REFERENCE = 1<<13;
const LLVMDIFlags DI_FLAG_R_VALUE_REFERENCE = 1<<14;
const LLVMDIFlags DI_FLAG_RESERVED = 1<<15;
const LLVMDIFlags DI_FLAG_SINGLE_INHERITANCE = 1<<16;
const LLVMDIFlags DI_FLAG_MULTIPLE_INHERITANCE = 2<<16;
const LLVMDIFlags DI_FLAG_VIRTUAL_INHERITANCE = 3<<16;
const LLVMDIFlags DI_FLAG_INTRODUCED_VIRTUAL = 1<<18;
const LLVMDIFlags DI_FLAG_BIT_FIELD = 1<<19;
const LLVMDIFlags DI_FLAG_NO_RETURN = 1<<20;
const LLVMDIFlags DI_FLAG_TYPE_PASS_BY_VALUE = 1<<22;
const LLVMDIFlags DI_FLAG_TYPE_PASS_BY_REFERENCE = 1<<23;
const LLVMDIFlags DI_FLAG_ENUM_CLASS = 1<<24;
const LLVMDIFlags DI_FLAG_FIXED_ENUM = DI_FLAG_ENUM_CLASS;
const LLVMDIFlags DI_FLAG_THUNK = 1<<25;
const LLVMDIFlags DI_FLAG_NON_TRIVIAL = 1<<26;
const LLVMDIFlags DI_FLAG_BIG_ENDIAN = 1<<27;
const LLVMDIFlags DI_FLAG_LITTLE_ENDIAN = 1<<28;
const LLVMDIFlags DI_FLAG_INDIRECT_VIRTUAL_BASE = (1<<2)|(1<<5);
const LLVMDIFlags DI_FLAG_ACCESSIBILITY = DI_FLAG_PRIVATE|DI_FLAG_PROTECTED|DI_FLAG_PUBLIC;
const LLVMDIFlags DI_FLAG_PTR_TO_MEMBER_REP = DI_FLAG_SINGLE_INHERITANCE|DI_FLAG_MULTIPLE_INHERITANCE|DI_FLAG_VIRTUAL_INHERITANCE;

typedef LLVMDWARFSourceLanguage = inline CUInt;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_C_89 = 0;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_C = 1;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_ADA_83 = 2;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_C_PLUS_PLUS = 3;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_COBOL_74 = 4;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_COBOL_85 = 5;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_FORTRAN_77 = 6;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_FORTRAN_90 = 7;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_PASCAL_83 = 8;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_MODULA_2 = 9;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_JAVA = 10;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_C_99 = 11;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_ADA_95 = 12;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_FORTRAN_95 = 13;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_PLI = 14;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_OBJ_C = 15;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_OBJ_C_PLUS_PLUS = 16;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_UPC = 17;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_D = 18;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_PYTHON = 19;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_OPEN_CL = 20;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_GO = 21;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_MODULA_3 = 22;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_HASKELL = 23;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_C_PLUS_PLUS__03 = 24;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_C_PLUS_PLUS__11 = 25;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_O_CAML = 26;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_RUST = 27;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_C_11 = 28;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_SWIFT = 29;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_JULIA = 30;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_DYLAN = 31;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_C_PLUS_PLUS__14 = 32;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_FORTRAN_03 = 33;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_FORTRAN_08 = 34;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_RENDER_SCRIPT = 35;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_BLISS = 36;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_KOTLIN = 37;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_ZIG = 38;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_CRYSTAL = 39;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_C_PLUS_PLUS__17 = 40;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_C_PLUS_PLUS__20 = 41;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_C_17 = 42;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_FORTRAN_18 = 43;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_ADA_2005 = 44;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_ADA_2012 = 45;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_HIP = 46;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_ASSEMBLY = 47;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_C_SHARP = 48;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_MOJO = 49;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_GLSL = 50;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_GLS_L__ES = 51;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_HLSL = 52;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_OPEN_C_L__CPP = 53;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_CP_P_FOR__OPEN_CL = 54;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_SYCL = 55;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_RUBY = 56;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_MOVE = 57;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_HYLO = 58;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_METAL = 59;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_MIPS__ASSEMBLER = 60;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_GOOGL_E__RENDER_SCRIPT = 61;
const LLVMDWARFSourceLanguage DWARF_SOURCE_LANGUAGE_BORLAN_D__DELPHI = 62;

typedef LLVMDWARFEmissionKind = inline CUInt;
const LLVMDWARFEmissionKind DWARF_EMISSION_NONE = 0;
const LLVMDWARFEmissionKind DWARF_EMISSION_FULL = 1;
const LLVMDWARFEmissionKind DWARF_EMISSION_LINE_TABLES_ONLY = 2;
const CUInt MD_STRING_METADATA_KIND = 0;
const CUInt CONSTANT_AS_METADATA_METADATA_KIND = 1;
const CUInt LOCAL_AS_METADATA_METADATA_KIND = 2;
const CUInt DISTINCT_MD_OPERAND_PLACEHOLDER_METADATA_KIND = 3;
const CUInt MD_TUPLE_METADATA_KIND = 4;
const CUInt DI_LOCATION_METADATA_KIND = 5;
const CUInt DI_EXPRESSION_METADATA_KIND = 6;
const CUInt DI_GLOBAL_VARIABLE_EXPRESSION_METADATA_KIND = 7;
const CUInt GENERIC_DI_NODE_METADATA_KIND = 8;
const CUInt DI_SUBRANGE_METADATA_KIND = 9;
const CUInt DI_ENUMERATOR_METADATA_KIND = 10;
const CUInt DI_BASIC_TYPE_METADATA_KIND = 11;
const CUInt DI_DERIVED_TYPE_METADATA_KIND = 12;
const CUInt DI_COMPOSITE_TYPE_METADATA_KIND = 13;
const CUInt DI_SUBROUTINE_TYPE_METADATA_KIND = 14;
const CUInt DI_FILE_METADATA_KIND = 15;
const CUInt DI_COMPILE_UNIT_METADATA_KIND = 16;
const CUInt DI_SUBPROGRAM_METADATA_KIND = 17;
const CUInt DI_LEXICAL_BLOCK_METADATA_KIND = 18;
const CUInt DI_LEXICAL_BLOCK_FILE_METADATA_KIND = 19;
const CUInt DI_NAMESPACE_METADATA_KIND = 20;
const CUInt DI_MODULE_METADATA_KIND = 21;
const CUInt DI_TEMPLATE_TYPE_PARAMETER_METADATA_KIND = 22;
const CUInt DI_TEMPLATE_VALUE_PARAMETER_METADATA_KIND = 23;
const CUInt DI_GLOBAL_VARIABLE_METADATA_KIND = 24;
const CUInt DI_LOCAL_VARIABLE_METADATA_KIND = 25;
const CUInt DI_LABEL_METADATA_KIND = 26;
const CUInt DI_OBJ_C_PROPERTY_METADATA_KIND = 27;
const CUInt DI_IMPORTED_ENTITY_METADATA_KIND = 28;
const CUInt DI_MACRO_METADATA_KIND = 29;
const CUInt DI_MACRO_FILE_METADATA_KIND = 30;
const CUInt DI_COMMON_BLOCK_METADATA_KIND = 31;
const CUInt DI_STRING_TYPE_METADATA_KIND = 32;
const CUInt DI_GENERIC_SUBRANGE_METADATA_KIND = 33;
const CUInt DI_ARG_LIST_METADATA_KIND = 34;
const CUInt DI_ASSIGN_ID_METADATA_KIND = 35;

alias LLVMMetadataKind = CUInt;

alias LLVMDWARFTypeEncoding = CUInt;

typedef LLVMDWARFMacinfoRecordType = inline CUInt;
const LLVMDWARFMacinfoRecordType DWARF_MACINFO_RECORD_TYPE_DEFINE = 0x01;
const LLVMDWARFMacinfoRecordType DWARF_MACINFO_RECORD_TYPE_MACRO = 0x02;
const LLVMDWARFMacinfoRecordType DWARF_MACINFO_RECORD_TYPE_START_FILE = 0x03;
const LLVMDWARFMacinfoRecordType DWARF_MACINFO_RECORD_TYPE_END_FILE = 0x04;
const LLVMDWARFMacinfoRecordType DWARF_MACINFO_RECORD_TYPE_VENDOR_EXT = 0xff;

fn CUInt debugMetadataVersion()
@extern("LLVMDebugMetadataVersion");

fn CUInt getModuleDebugMetadataVersion(
  LLVMModuleRef module_)
@extern("LLVMGetModuleDebugMetadataVersion");

fn LLVMBool stripModuleDebugInfo(
  LLVMModuleRef module_)
@extern("LLVMStripModuleDebugInfo");

fn LLVMDIBuilderRef createDIBuilderDisallowUnresolved(
  LLVMModuleRef m)
@extern("LLVMCreateDIBuilderDisallowUnresolved");

fn LLVMDIBuilderRef createDIBuilder(
  LLVMModuleRef m)
@extern("LLVMCreateDIBuilder");

fn void disposeDIBuilder(
  LLVMDIBuilderRef builder)
@extern("LLVMDisposeDIBuilder");

fn void dIBuilderFinalize(
  LLVMDIBuilderRef builder)
@extern("LLVMDIBuilderFinalize");

fn void dIBuilderFinalizeSubprogram(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef subprogram)
@extern("LLVMDIBuilderFinalizeSubprogram");

fn LLVMMetadataRef dIBuilderCreateCompileUnit(
  LLVMDIBuilderRef builder, 
  LLVMDWARFSourceLanguage lang, 
  LLVMMetadataRef file_ref, 
  CChar* producer, 
  usz producer_len, 
  LLVMBool is_optimized, 
  CChar* flags, 
  usz flags_len, 
  CUInt runtime_ver, 
  CChar* split_name, 
  usz split_name_len, 
  LLVMDWARFEmissionKind kind, 
  CUInt dwo_id, 
  LLVMBool split_debug_inlining, 
  LLVMBool debug_info_for_profiling, 
  CChar* sys_root, 
  usz sys_root_len, 
  CChar* sdk, 
  usz sdk_len)
@extern("LLVMDIBuilderCreateCompileUnit");

fn LLVMMetadataRef dIBuilderCreateFile(
  LLVMDIBuilderRef builder, 
  CChar* filename, 
  usz filename_len, 
  CChar* directory, 
  usz directory_len)
@extern("LLVMDIBuilderCreateFile");

fn LLVMMetadataRef dIBuilderCreateModule(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef parent_scope, 
  CChar* name, 
  usz name_len, 
  CChar* config_macros, 
  usz config_macros_len, 
  CChar* include_path, 
  usz include_path_len, 
  CChar* api_notes_file, 
  usz api_notes_file_len)
@extern("LLVMDIBuilderCreateModule");

fn LLVMMetadataRef dIBuilderCreateNameSpace(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef parent_scope, 
  CChar* name, 
  usz name_len, 
  LLVMBool export_symbols)
@extern("LLVMDIBuilderCreateNameSpace");

fn LLVMMetadataRef dIBuilderCreateFunction(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef scope, 
  CChar* name, 
  usz name_len, 
  CChar* linkage_name, 
  usz linkage_name_len, 
  LLVMMetadataRef file, 
  CUInt line_no, 
  LLVMMetadataRef ty, 
  LLVMBool is_local_to_unit, 
  LLVMBool is_definition, 
  CUInt scope_line, 
  LLVMDIFlags flags, 
  LLVMBool is_optimized)
@extern("LLVMDIBuilderCreateFunction");

fn LLVMMetadataRef dIBuilderCreateLexicalBlock(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef scope, 
  LLVMMetadataRef file, 
  CUInt line, 
  CUInt column)
@extern("LLVMDIBuilderCreateLexicalBlock");

fn LLVMMetadataRef dIBuilderCreateLexicalBlockFile(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef scope, 
  LLVMMetadataRef file, 
  CUInt discriminator)
@extern("LLVMDIBuilderCreateLexicalBlockFile");

fn LLVMMetadataRef dIBuilderCreateImportedModuleFromNamespace(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef scope, 
  LLVMMetadataRef ns, 
  LLVMMetadataRef file, 
  CUInt line)
@extern("LLVMDIBuilderCreateImportedModuleFromNamespace");

fn LLVMMetadataRef dIBuilderCreateImportedModuleFromAlias(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef scope, 
  LLVMMetadataRef imported_entity, 
  LLVMMetadataRef file, 
  CUInt line, 
  LLVMMetadataRef* elements, 
  CUInt num_elements)
@extern("LLVMDIBuilderCreateImportedModuleFromAlias");

fn LLVMMetadataRef dIBuilderCreateImportedModuleFromModule(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef scope, 
  LLVMMetadataRef m, 
  LLVMMetadataRef file, 
  CUInt line, 
  LLVMMetadataRef* elements, 
  CUInt num_elements)
@extern("LLVMDIBuilderCreateImportedModuleFromModule");

fn LLVMMetadataRef dIBuilderCreateImportedDeclaration(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef scope, 
  LLVMMetadataRef decl, 
  LLVMMetadataRef file, 
  CUInt line, 
  CChar* name, 
  usz name_len, 
  LLVMMetadataRef* elements, 
  CUInt num_elements)
@extern("LLVMDIBuilderCreateImportedDeclaration");

fn LLVMMetadataRef dIBuilderCreateDebugLocation(
  LLVMContextRef ctx, 
  CUInt line, 
  CUInt column, 
  LLVMMetadataRef scope, 
  LLVMMetadataRef inlined_at)
@extern("LLVMDIBuilderCreateDebugLocation");

fn CUInt dILocationGetLine(
  LLVMMetadataRef location)
@extern("LLVMDILocationGetLine");

fn CUInt dILocationGetColumn(
  LLVMMetadataRef location)
@extern("LLVMDILocationGetColumn");

fn LLVMMetadataRef dILocationGetScope(
  LLVMMetadataRef location)
@extern("LLVMDILocationGetScope");

fn LLVMMetadataRef dILocationGetInlinedAt(
  LLVMMetadataRef location)
@extern("LLVMDILocationGetInlinedAt");

fn LLVMMetadataRef dIScopeGetFile(
  LLVMMetadataRef scope)
@extern("LLVMDIScopeGetFile");

fn CChar* dIFileGetDirectory(
  LLVMMetadataRef file, 
  CUInt* len)
@extern("LLVMDIFileGetDirectory");

fn CChar* dIFileGetFilename(
  LLVMMetadataRef file, 
  CUInt* len)
@extern("LLVMDIFileGetFilename");

fn CChar* dIFileGetSource(
  LLVMMetadataRef file, 
  CUInt* len)
@extern("LLVMDIFileGetSource");

fn LLVMMetadataRef dIBuilderGetOrCreateTypeArray(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef* data, 
  usz num_elements)
@extern("LLVMDIBuilderGetOrCreateTypeArray");

fn LLVMMetadataRef dIBuilderCreateSubroutineType(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef file, 
  LLVMMetadataRef* parameter_types, 
  CUInt num_parameter_types, 
  LLVMDIFlags flags)
@extern("LLVMDIBuilderCreateSubroutineType");

fn LLVMMetadataRef dIBuilderCreateMacro(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef parent_macro_file, 
  CUInt line, 
  LLVMDWARFMacinfoRecordType record_type, 
  CChar* name, 
  usz name_len, 
  CChar* value, 
  usz value_len)
@extern("LLVMDIBuilderCreateMacro");

fn LLVMMetadataRef dIBuilderCreateTempMacroFile(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef parent_macro_file, 
  CUInt line, 
  LLVMMetadataRef file)
@extern("LLVMDIBuilderCreateTempMacroFile");

fn LLVMMetadataRef dIBuilderCreateEnumerator(
  LLVMDIBuilderRef builder, 
  CChar* name, 
  usz name_len, 
  long value, 
  LLVMBool is_unsigned)
@extern("LLVMDIBuilderCreateEnumerator");

fn LLVMMetadataRef dIBuilderCreateEnumerationType(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef scope, 
  CChar* name, 
  usz name_len, 
  LLVMMetadataRef file, 
  CUInt line_number, 
  ulong size_in_bits, 
  uint align_in_bits, 
  LLVMMetadataRef* elements, 
  CUInt num_elements, 
  LLVMMetadataRef class_ty)
@extern("LLVMDIBuilderCreateEnumerationType");

fn LLVMMetadataRef dIBuilderCreateUnionType(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef scope, 
  CChar* name, 
  usz name_len, 
  LLVMMetadataRef file, 
  CUInt line_number, 
  ulong size_in_bits, 
  uint align_in_bits, 
  LLVMDIFlags flags, 
  LLVMMetadataRef* elements, 
  CUInt num_elements, 
  CUInt run_time_lang, 
  CChar* unique_id, 
  usz unique_id_len)
@extern("LLVMDIBuilderCreateUnionType");

fn LLVMMetadataRef dIBuilderCreateArrayType(
  LLVMDIBuilderRef builder, 
  ulong size, 
  uint align_in_bits, 
  LLVMMetadataRef ty, 
  LLVMMetadataRef* subscripts, 
  CUInt num_subscripts)
@extern("LLVMDIBuilderCreateArrayType");

fn LLVMMetadataRef dIBuilderCreateVectorType(
  LLVMDIBuilderRef builder, 
  ulong size, 
  uint align_in_bits, 
  LLVMMetadataRef ty, 
  LLVMMetadataRef* subscripts, 
  CUInt num_subscripts)
@extern("LLVMDIBuilderCreateVectorType");

fn LLVMMetadataRef dIBuilderCreateUnspecifiedType(
  LLVMDIBuilderRef builder, 
  CChar* name, 
  usz name_len)
@extern("LLVMDIBuilderCreateUnspecifiedType");

fn LLVMMetadataRef dIBuilderCreateBasicType(
  LLVMDIBuilderRef builder, 
  CChar* name, 
  usz name_len, 
  ulong size_in_bits, 
  LLVMDWARFTypeEncoding encoding, 
  LLVMDIFlags flags)
@extern("LLVMDIBuilderCreateBasicType");

fn LLVMMetadataRef dIBuilderCreatePointerType(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef pointee_ty, 
  ulong size_in_bits, 
  uint align_in_bits, 
  CUInt address_space, 
  CChar* name, 
  usz name_len)
@extern("LLVMDIBuilderCreatePointerType");

fn LLVMMetadataRef dIBuilderCreateStructType(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef scope, 
  CChar* name, 
  usz name_len, 
  LLVMMetadataRef file, 
  CUInt line_number, 
  ulong size_in_bits, 
  uint align_in_bits, 
  LLVMDIFlags flags, 
  LLVMMetadataRef derived_from, 
  LLVMMetadataRef* elements, 
  CUInt num_elements, 
  CUInt run_time_lang, 
  LLVMMetadataRef v_table_holder, 
  CChar* unique_id, 
  usz unique_id_len)
@extern("LLVMDIBuilderCreateStructType");

fn LLVMMetadataRef dIBuilderCreateMemberType(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef scope, 
  CChar* name, 
  usz name_len, 
  LLVMMetadataRef file, 
  CUInt line_no, 
  ulong size_in_bits, 
  uint align_in_bits, 
  ulong offset_in_bits, 
  LLVMDIFlags flags, 
  LLVMMetadataRef ty)
@extern("LLVMDIBuilderCreateMemberType");

fn LLVMMetadataRef dIBuilderCreateStaticMemberType(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef scope, 
  CChar* name, 
  usz name_len, 
  LLVMMetadataRef file, 
  CUInt line_number, 
  LLVMMetadataRef type, 
  LLVMDIFlags flags, 
  LLVMValueRef constant_val, 
  uint align_in_bits)
@extern("LLVMDIBuilderCreateStaticMemberType");

fn LLVMMetadataRef dIBuilderCreateMemberPointerType(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef pointee_type, 
  LLVMMetadataRef class_type, 
  ulong size_in_bits, 
  uint align_in_bits, 
  LLVMDIFlags flags)
@extern("LLVMDIBuilderCreateMemberPointerType");

fn LLVMMetadataRef dIBuilderCreateObjCIVar(
  LLVMDIBuilderRef builder, 
  CChar* name, 
  usz name_len, 
  LLVMMetadataRef file, 
  CUInt line_no, 
  ulong size_in_bits, 
  uint align_in_bits, 
  ulong offset_in_bits, 
  LLVMDIFlags flags, 
  LLVMMetadataRef ty, 
  LLVMMetadataRef property_node)
@extern("LLVMDIBuilderCreateObjCIVar");

fn LLVMMetadataRef dIBuilderCreateObjCProperty(
  LLVMDIBuilderRef builder, 
  CChar* name, 
  usz name_len, 
  LLVMMetadataRef file, 
  CUInt line_no, 
  CChar* getter_name, 
  usz getter_name_len, 
  CChar* setter_name, 
  usz setter_name_len, 
  CUInt property_attributes, 
  LLVMMetadataRef ty)
@extern("LLVMDIBuilderCreateObjCProperty");

fn LLVMMetadataRef dIBuilderCreateObjectPointerType(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef type, 
  LLVMBool implicit)
@extern("LLVMDIBuilderCreateObjectPointerType");

fn LLVMMetadataRef dIBuilderCreateQualifiedType(
  LLVMDIBuilderRef builder, 
  CUInt tag, 
  LLVMMetadataRef type)
@extern("LLVMDIBuilderCreateQualifiedType");

fn LLVMMetadataRef dIBuilderCreateReferenceType(
  LLVMDIBuilderRef builder, 
  CUInt tag, 
  LLVMMetadataRef type)
@extern("LLVMDIBuilderCreateReferenceType");

fn LLVMMetadataRef dIBuilderCreateNullPtrType(
  LLVMDIBuilderRef builder)
@extern("LLVMDIBuilderCreateNullPtrType");

fn LLVMMetadataRef dIBuilderCreateTypedef(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef type, 
  CChar* name, 
  usz name_len, 
  LLVMMetadataRef file, 
  CUInt line_no, 
  LLVMMetadataRef scope, 
  uint align_in_bits)
@extern("LLVMDIBuilderCreateTypedef");

fn LLVMMetadataRef dIBuilderCreateInheritance(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef ty, 
  LLVMMetadataRef base_ty, 
  ulong base_offset, 
  uint vb_ptr_offset, 
  LLVMDIFlags flags)
@extern("LLVMDIBuilderCreateInheritance");

fn LLVMMetadataRef dIBuilderCreateForwardDecl(
  LLVMDIBuilderRef builder, 
  CUInt tag, 
  CChar* name, 
  usz name_len, 
  LLVMMetadataRef scope, 
  LLVMMetadataRef file, 
  CUInt line, 
  CUInt runtime_lang, 
  ulong size_in_bits, 
  uint align_in_bits, 
  CChar* unique_identifier, 
  usz unique_identifier_len)
@extern("LLVMDIBuilderCreateForwardDecl");

fn LLVMMetadataRef dIBuilderCreateReplaceableCompositeType(
  LLVMDIBuilderRef builder, 
  CUInt tag, 
  CChar* name, 
  usz name_len, 
  LLVMMetadataRef scope, 
  LLVMMetadataRef file, 
  CUInt line, 
  CUInt runtime_lang, 
  ulong size_in_bits, 
  uint align_in_bits, 
  LLVMDIFlags flags, 
  CChar* unique_identifier, 
  usz unique_identifier_len)
@extern("LLVMDIBuilderCreateReplaceableCompositeType");

fn LLVMMetadataRef dIBuilderCreateBitFieldMemberType(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef scope, 
  CChar* name, 
  usz name_len, 
  LLVMMetadataRef file, 
  CUInt line_number, 
  ulong size_in_bits, 
  ulong offset_in_bits, 
  ulong storage_offset_in_bits, 
  LLVMDIFlags flags, 
  LLVMMetadataRef type)
@extern("LLVMDIBuilderCreateBitFieldMemberType");

fn LLVMMetadataRef dIBuilderCreateClassType(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef scope, 
  CChar* name, 
  usz name_len, 
  LLVMMetadataRef file, 
  CUInt line_number, 
  ulong size_in_bits, 
  uint align_in_bits, 
  ulong offset_in_bits, 
  LLVMDIFlags flags, 
  LLVMMetadataRef derived_from, 
  LLVMMetadataRef* elements, 
  CUInt num_elements, 
  LLVMMetadataRef v_table_holder, 
  LLVMMetadataRef template_params_node, 
  CChar* unique_identifier, 
  usz unique_identifier_len)
@extern("LLVMDIBuilderCreateClassType");

fn LLVMMetadataRef dIBuilderCreateArtificialType(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef type)
@extern("LLVMDIBuilderCreateArtificialType");

fn CChar* dITypeGetName(
  LLVMMetadataRef d_type, 
  usz* length)
@extern("LLVMDITypeGetName");

fn ulong dITypeGetSizeInBits(
  LLVMMetadataRef d_type)
@extern("LLVMDITypeGetSizeInBits");

fn ulong dITypeGetOffsetInBits(
  LLVMMetadataRef d_type)
@extern("LLVMDITypeGetOffsetInBits");

fn uint dITypeGetAlignInBits(
  LLVMMetadataRef d_type)
@extern("LLVMDITypeGetAlignInBits");

fn CUInt dITypeGetLine(
  LLVMMetadataRef d_type)
@extern("LLVMDITypeGetLine");

fn LLVMDIFlags dITypeGetFlags(
  LLVMMetadataRef d_type)
@extern("LLVMDITypeGetFlags");

fn LLVMMetadataRef dIBuilderGetOrCreateSubrange(
  LLVMDIBuilderRef builder, 
  long lower_bound, 
  long count)
@extern("LLVMDIBuilderGetOrCreateSubrange");

fn LLVMMetadataRef dIBuilderGetOrCreateArray(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef* data, 
  usz num_elements)
@extern("LLVMDIBuilderGetOrCreateArray");

fn LLVMMetadataRef dIBuilderCreateExpression(
  LLVMDIBuilderRef builder, 
  ulong* addr, 
  usz length)
@extern("LLVMDIBuilderCreateExpression");

fn LLVMMetadataRef dIBuilderCreateConstantValueExpression(
  LLVMDIBuilderRef builder, 
  ulong value)
@extern("LLVMDIBuilderCreateConstantValueExpression");

fn LLVMMetadataRef dIBuilderCreateGlobalVariableExpression(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef scope, 
  CChar* name, 
  usz name_len, 
  CChar* linkage, 
  usz link_len, 
  LLVMMetadataRef file, 
  CUInt line_no, 
  LLVMMetadataRef ty, 
  LLVMBool local_to_unit, 
  LLVMMetadataRef expr, 
  LLVMMetadataRef decl, 
  uint align_in_bits)
@extern("LLVMDIBuilderCreateGlobalVariableExpression");

fn ushort getDINodeTag(
  LLVMMetadataRef md)
@extern("LLVMGetDINodeTag");

fn LLVMMetadataRef dIGlobalVariableExpressionGetVariable(
  LLVMMetadataRef gve)
@extern("LLVMDIGlobalVariableExpressionGetVariable");

fn LLVMMetadataRef dIGlobalVariableExpressionGetExpression(
  LLVMMetadataRef gve)
@extern("LLVMDIGlobalVariableExpressionGetExpression");

fn LLVMMetadataRef dIVariableGetFile(
  LLVMMetadataRef var_)
@extern("LLVMDIVariableGetFile");

fn LLVMMetadataRef dIVariableGetScope(
  LLVMMetadataRef var_)
@extern("LLVMDIVariableGetScope");

fn CUInt dIVariableGetLine(
  LLVMMetadataRef var_)
@extern("LLVMDIVariableGetLine");

fn LLVMMetadataRef temporaryMDNode(
  LLVMContextRef ctx, 
  LLVMMetadataRef* data, 
  usz num_elements)
@extern("LLVMTemporaryMDNode");

fn void disposeTemporaryMDNode(
  LLVMMetadataRef temp_node)
@extern("LLVMDisposeTemporaryMDNode");

fn void metadataReplaceAllUsesWith(
  LLVMMetadataRef temp_target_metadata, 
  LLVMMetadataRef replacement)
@extern("LLVMMetadataReplaceAllUsesWith");

fn LLVMMetadataRef dIBuilderCreateTempGlobalVariableFwdDecl(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef scope, 
  CChar* name, 
  usz name_len, 
  CChar* linkage, 
  usz lnk_len, 
  LLVMMetadataRef file, 
  CUInt line_no, 
  LLVMMetadataRef ty, 
  LLVMBool local_to_unit, 
  LLVMMetadataRef decl, 
  uint align_in_bits)
@extern("LLVMDIBuilderCreateTempGlobalVariableFwdDecl");

fn LLVMDbgRecordRef dIBuilderInsertDeclareRecordBefore(
  LLVMDIBuilderRef builder, 
  LLVMValueRef storage, 
  LLVMMetadataRef var_info, 
  LLVMMetadataRef expr, 
  LLVMMetadataRef debug_loc, 
  LLVMValueRef instr)
@extern("LLVMDIBuilderInsertDeclareRecordBefore");

fn LLVMDbgRecordRef dIBuilderInsertDeclareRecordAtEnd(
  LLVMDIBuilderRef builder, 
  LLVMValueRef storage, 
  LLVMMetadataRef var_info, 
  LLVMMetadataRef expr, 
  LLVMMetadataRef debug_loc, 
  LLVMBasicBlockRef block)
@extern("LLVMDIBuilderInsertDeclareRecordAtEnd");

fn LLVMDbgRecordRef dIBuilderInsertDbgValueRecordBefore(
  LLVMDIBuilderRef builder, 
  LLVMValueRef val, 
  LLVMMetadataRef var_info, 
  LLVMMetadataRef expr, 
  LLVMMetadataRef debug_loc, 
  LLVMValueRef instr)
@extern("LLVMDIBuilderInsertDbgValueRecordBefore");

fn LLVMDbgRecordRef dIBuilderInsertDbgValueRecordAtEnd(
  LLVMDIBuilderRef builder, 
  LLVMValueRef val, 
  LLVMMetadataRef var_info, 
  LLVMMetadataRef expr, 
  LLVMMetadataRef debug_loc, 
  LLVMBasicBlockRef block)
@extern("LLVMDIBuilderInsertDbgValueRecordAtEnd");

fn LLVMMetadataRef dIBuilderCreateAutoVariable(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef scope, 
  CChar* name, 
  usz name_len, 
  LLVMMetadataRef file, 
  CUInt line_no, 
  LLVMMetadataRef ty, 
  LLVMBool always_preserve, 
  LLVMDIFlags flags, 
  uint align_in_bits)
@extern("LLVMDIBuilderCreateAutoVariable");

fn LLVMMetadataRef dIBuilderCreateParameterVariable(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef scope, 
  CChar* name, 
  usz name_len, 
  CUInt arg_no, 
  LLVMMetadataRef file, 
  CUInt line_no, 
  LLVMMetadataRef ty, 
  LLVMBool always_preserve, 
  LLVMDIFlags flags)
@extern("LLVMDIBuilderCreateParameterVariable");

fn LLVMMetadataRef getSubprogram(
  LLVMValueRef func)
@extern("LLVMGetSubprogram");

fn void setSubprogram(
  LLVMValueRef func, 
  LLVMMetadataRef sp)
@extern("LLVMSetSubprogram");

fn CUInt dISubprogramGetLine(
  LLVMMetadataRef subprogram)
@extern("LLVMDISubprogramGetLine");

fn LLVMMetadataRef instructionGetDebugLoc(
  LLVMValueRef inst)
@extern("LLVMInstructionGetDebugLoc");

fn void instructionSetDebugLoc(
  LLVMValueRef inst, 
  LLVMMetadataRef loc)
@extern("LLVMInstructionSetDebugLoc");

fn LLVMMetadataRef dIBuilderCreateLabel(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef context, 
  CChar* name, 
  usz name_len, 
  LLVMMetadataRef file, 
  CUInt line_no, 
  LLVMBool always_preserve)
@extern("LLVMDIBuilderCreateLabel");

fn LLVMDbgRecordRef dIBuilderInsertLabelBefore(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef label_info, 
  LLVMMetadataRef location, 
  LLVMValueRef insert_before)
@extern("LLVMDIBuilderInsertLabelBefore");

fn LLVMDbgRecordRef dIBuilderInsertLabelAtEnd(
  LLVMDIBuilderRef builder, 
  LLVMMetadataRef label_info, 
  LLVMMetadataRef location, 
  LLVMBasicBlockRef insert_at_end)
@extern("LLVMDIBuilderInsertLabelAtEnd");

fn LLVMMetadataKind getMetadataKind(
  LLVMMetadataRef metadata)
@extern("LLVMGetMetadataKind");

alias LLVMDisasmContextRef = void*;

alias LLVMOpInfoCallback = fn CInt(
  void* dis_info, 
  ulong pc, 
  ulong offset, 
  ulong op_size, 
  ulong inst_size, 
  CInt tag_type, 
  void* tag_buf);

struct LLVMOpInfoSymbol1 {
  ulong present;
  CChar* name;
  ulong value;
}

struct LLVMOpInfo1 {
  LLVMOpInfoSymbol1 add_symbol;
  LLVMOpInfoSymbol1 subtract_symbol;
  ulong value;
  ulong variant_kind;
}

alias LLVMSymbolLookupCallback = fn CChar*(
  void* dis_info, 
  ulong reference_value, 
  ulong* reference_type, 
  ulong reference_pc, 
  CChar** reference_name);

fn LLVMDisasmContextRef createDisasm(
  CChar* triple_name, 
  void* dis_info, 
  CInt tag_type, 
  LLVMOpInfoCallback get_op_info, 
  LLVMSymbolLookupCallback symbol_look_up)
@extern("LLVMCreateDisasm");

fn LLVMDisasmContextRef createDisasmCPU(
  CChar* triple, 
  CChar* cpu, 
  void* dis_info, 
  CInt tag_type, 
  LLVMOpInfoCallback get_op_info, 
  LLVMSymbolLookupCallback symbol_look_up)
@extern("LLVMCreateDisasmCPU");

fn LLVMDisasmContextRef createDisasmCPUFeatures(
  CChar* triple, 
  CChar* cpu, 
  CChar* features, 
  void* dis_info, 
  CInt tag_type, 
  LLVMOpInfoCallback get_op_info, 
  LLVMSymbolLookupCallback symbol_look_up)
@extern("LLVMCreateDisasmCPUFeatures");

fn CInt setDisasmOptions(
  LLVMDisasmContextRef dc, 
  ulong options)
@extern("LLVMSetDisasmOptions");

fn void disasmDispose(
  LLVMDisasmContextRef dc)
@extern("LLVMDisasmDispose");

fn usz disasmInstruction(
  LLVMDisasmContextRef dc, 
  char* bytes, 
  ulong bytes_size, 
  ulong pc, 
  CChar* out_string, 
  usz out_string_size)
@extern("LLVMDisasmInstruction");

typedef LLVMOpaqueError = void;

alias LLVMErrorRef = LLVMOpaqueError*;

alias LLVMErrorTypeId = void*;

fn LLVMErrorTypeId getErrorTypeId(
  LLVMErrorRef err)
@extern("LLVMGetErrorTypeId");

fn void consumeError(
  LLVMErrorRef err)
@extern("LLVMConsumeError");

fn void cantFail(
  LLVMErrorRef err)
@extern("LLVMCantFail");

fn CChar* getErrorMessage(
  LLVMErrorRef err)
@extern("LLVMGetErrorMessage");

fn void disposeErrorMessage(
  CChar* err_msg)
@extern("LLVMDisposeErrorMessage");

fn LLVMErrorTypeId getStringErrorTypeId()
@extern("LLVMGetStringErrorTypeId");

fn LLVMErrorRef createStringError(
  CChar* err_msg)
@extern("LLVMCreateStringError");

typedef LLVMByteOrdering = inline CUInt;
const LLVMByteOrdering BIG_ENDIAN = 0;
const LLVMByteOrdering LITTLE_ENDIAN = 1;

typedef LLVMOpaqueTargetData = void;

alias LLVMTargetDataRef = LLVMOpaqueTargetData*;

typedef LLVMOpaqueTargetLibraryInfotData = void;

alias LLVMTargetLibraryInfoRef = LLVMOpaqueTargetLibraryInfotData*;

fn void initializeAllTargetInfos()
@extern("LLVMInitializeAllTargetInfos");

fn void initializeAllTargets()
@extern("LLVMInitializeAllTargets");

fn void initializeAllTargetMCs()
@extern("LLVMInitializeAllTargetMCs");

fn void initializeAllAsmPrinters()
@extern("LLVMInitializeAllAsmPrinters");

fn void initializeAllAsmParsers()
@extern("LLVMInitializeAllAsmParsers");

fn void initializeAllDisassemblers()
@extern("LLVMInitializeAllDisassemblers");

fn LLVMBool initializeNativeTarget()
@extern("LLVMInitializeNativeTarget");

fn LLVMBool initializeNativeAsmParser()
@extern("LLVMInitializeNativeAsmParser");

fn LLVMBool initializeNativeAsmPrinter()
@extern("LLVMInitializeNativeAsmPrinter");

fn LLVMBool initializeNativeDisassembler()
@extern("LLVMInitializeNativeDisassembler");

fn LLVMTargetDataRef getModuleDataLayout(
  LLVMModuleRef m)
@extern("LLVMGetModuleDataLayout");

fn void setModuleDataLayout(
  LLVMModuleRef m, 
  LLVMTargetDataRef dl)
@extern("LLVMSetModuleDataLayout");

fn LLVMTargetDataRef createTargetData(
  CChar* string_rep)
@extern("LLVMCreateTargetData");

fn void disposeTargetData(
  LLVMTargetDataRef td)
@extern("LLVMDisposeTargetData");

fn void addTargetLibraryInfo(
  LLVMTargetLibraryInfoRef tli, 
  LLVMPassManagerRef pm)
@extern("LLVMAddTargetLibraryInfo");

fn CChar* copyStringRepOfTargetData(
  LLVMTargetDataRef td)
@extern("LLVMCopyStringRepOfTargetData");

fn LLVMByteOrdering byteOrder(
  LLVMTargetDataRef td)
@extern("LLVMByteOrder");

fn CUInt pointerSize(
  LLVMTargetDataRef td)
@extern("LLVMPointerSize");

fn CUInt pointerSizeForAS(
  LLVMTargetDataRef td, 
  CUInt as)
@extern("LLVMPointerSizeForAS");

fn LLVMTypeRef intPtrType(
  LLVMTargetDataRef td)
@extern("LLVMIntPtrType");

fn LLVMTypeRef intPtrTypeForAS(
  LLVMTargetDataRef td, 
  CUInt as)
@extern("LLVMIntPtrTypeForAS");

fn LLVMTypeRef intPtrTypeInContext(
  LLVMContextRef c, 
  LLVMTargetDataRef td)
@extern("LLVMIntPtrTypeInContext");

fn LLVMTypeRef intPtrTypeForASInContext(
  LLVMContextRef c, 
  LLVMTargetDataRef td, 
  CUInt as)
@extern("LLVMIntPtrTypeForASInContext");

fn CULongLong sizeOfTypeInBits(
  LLVMTargetDataRef td, 
  LLVMTypeRef ty)
@extern("LLVMSizeOfTypeInBits");

fn CULongLong storeSizeOfType(
  LLVMTargetDataRef td, 
  LLVMTypeRef ty)
@extern("LLVMStoreSizeOfType");

fn CULongLong aBISizeOfType(
  LLVMTargetDataRef td, 
  LLVMTypeRef ty)
@extern("LLVMABISizeOfType");

fn CUInt aBIAlignmentOfType(
  LLVMTargetDataRef td, 
  LLVMTypeRef ty)
@extern("LLVMABIAlignmentOfType");

fn CUInt callFrameAlignmentOfType(
  LLVMTargetDataRef td, 
  LLVMTypeRef ty)
@extern("LLVMCallFrameAlignmentOfType");

fn CUInt preferredAlignmentOfType(
  LLVMTargetDataRef td, 
  LLVMTypeRef ty)
@extern("LLVMPreferredAlignmentOfType");

fn CUInt preferredAlignmentOfGlobal(
  LLVMTargetDataRef td, 
  LLVMValueRef global_var)
@extern("LLVMPreferredAlignmentOfGlobal");

fn CUInt elementAtOffset(
  LLVMTargetDataRef td, 
  LLVMTypeRef struct_ty, 
  CULongLong offset)
@extern("LLVMElementAtOffset");

fn CULongLong offsetOfElement(
  LLVMTargetDataRef td, 
  LLVMTypeRef struct_ty, 
  CUInt element)
@extern("LLVMOffsetOfElement");

typedef LLVMOpaqueTargetMachineOptions = void;

alias LLVMTargetMachineOptionsRef = LLVMOpaqueTargetMachineOptions*;

typedef LLVMOpaqueTargetMachine = void;

alias LLVMTargetMachineRef = LLVMOpaqueTargetMachine*;

typedef LLVMTarget = void;

alias LLVMTargetRef = LLVMTarget*;

typedef LLVMCodeGenOptLevel = inline CUInt;
const LLVMCodeGenOptLevel CODE_GEN_LEVEL_NONE = 0;
const LLVMCodeGenOptLevel CODE_GEN_LEVEL_LESS = 1;
const LLVMCodeGenOptLevel CODE_GEN_LEVEL_DEFAULT = 2;
const LLVMCodeGenOptLevel CODE_GEN_LEVEL_AGGRESSIVE = 3;

typedef LLVMRelocMode = inline CUInt;
const LLVMRelocMode RELOC_DEFAULT = 0;
const LLVMRelocMode RELOC_STATIC = 1;
const LLVMRelocMode RELOC_PIC = 2;
const LLVMRelocMode RELOC_DYNAMIC_NO_PIC = 3;
const LLVMRelocMode RELOC_ROPI = 4;
const LLVMRelocMode RELOC_RWPI = 5;
const LLVMRelocMode RELOC_ROP_I__RWPI = 6;

typedef LLVMCodeModel = inline CUInt;
const LLVMCodeModel CODE_MODEL_DEFAULT = 0;
const LLVMCodeModel CODE_MODEL_JIT_DEFAULT = 1;
const LLVMCodeModel CODE_MODEL_TINY = 2;
const LLVMCodeModel CODE_MODEL_SMALL = 3;
const LLVMCodeModel CODE_MODEL_KERNEL = 4;
const LLVMCodeModel CODE_MODEL_MEDIUM = 5;
const LLVMCodeModel CODE_MODEL_LARGE = 6;

typedef LLVMCodeGenFileType = inline CUInt;
const LLVMCodeGenFileType ASSEMBLY_FILE = 0;
const LLVMCodeGenFileType OBJECT_FILE = 1;

typedef LLVMGlobalISelAbortMode = inline CUInt;
const LLVMGlobalISelAbortMode GLOBAL_I_SEL_ABORT_ENABLE = 0;
const LLVMGlobalISelAbortMode GLOBAL_I_SEL_ABORT_DISABLE = 1;
const LLVMGlobalISelAbortMode GLOBAL_I_SEL_ABORT_DISABLE_WITH_DIAG = 2;

fn LLVMTargetRef getFirstTarget()
@extern("LLVMGetFirstTarget");

fn LLVMTargetRef getNextTarget(
  LLVMTargetRef t)
@extern("LLVMGetNextTarget");

fn LLVMTargetRef getTargetFromName(
  CChar* name)
@extern("LLVMGetTargetFromName");

fn LLVMBool getTargetFromTriple(
  CChar* triple, 
  LLVMTargetRef* t, 
  CChar** error_message)
@extern("LLVMGetTargetFromTriple");

fn CChar* getTargetName(
  LLVMTargetRef t)
@extern("LLVMGetTargetName");

fn CChar* getTargetDescription(
  LLVMTargetRef t)
@extern("LLVMGetTargetDescription");

fn LLVMBool targetHasJIT(
  LLVMTargetRef t)
@extern("LLVMTargetHasJIT");

fn LLVMBool targetHasTargetMachine(
  LLVMTargetRef t)
@extern("LLVMTargetHasTargetMachine");

fn LLVMBool targetHasAsmBackend(
  LLVMTargetRef t)
@extern("LLVMTargetHasAsmBackend");

fn LLVMTargetMachineOptionsRef createTargetMachineOptions()
@extern("LLVMCreateTargetMachineOptions");

fn void disposeTargetMachineOptions(
  LLVMTargetMachineOptionsRef options)
@extern("LLVMDisposeTargetMachineOptions");

fn void targetMachineOptionsSetCPU(
  LLVMTargetMachineOptionsRef options, 
  CChar* cpu)
@extern("LLVMTargetMachineOptionsSetCPU");

fn void targetMachineOptionsSetFeatures(
  LLVMTargetMachineOptionsRef options, 
  CChar* features)
@extern("LLVMTargetMachineOptionsSetFeatures");

fn void targetMachineOptionsSetABI(
  LLVMTargetMachineOptionsRef options, 
  CChar* abi)
@extern("LLVMTargetMachineOptionsSetABI");

fn void targetMachineOptionsSetCodeGenOptLevel(
  LLVMTargetMachineOptionsRef options, 
  LLVMCodeGenOptLevel level)
@extern("LLVMTargetMachineOptionsSetCodeGenOptLevel");

fn void targetMachineOptionsSetRelocMode(
  LLVMTargetMachineOptionsRef options, 
  LLVMRelocMode reloc)
@extern("LLVMTargetMachineOptionsSetRelocMode");

fn void targetMachineOptionsSetCodeModel(
  LLVMTargetMachineOptionsRef options, 
  LLVMCodeModel code_model)
@extern("LLVMTargetMachineOptionsSetCodeModel");

fn LLVMTargetMachineRef createTargetMachineWithOptions(
  LLVMTargetRef t, 
  CChar* triple, 
  LLVMTargetMachineOptionsRef options)
@extern("LLVMCreateTargetMachineWithOptions");

fn LLVMTargetMachineRef createTargetMachine(
  LLVMTargetRef t, 
  CChar* triple, 
  CChar* cpu, 
  CChar* features, 
  LLVMCodeGenOptLevel level, 
  LLVMRelocMode reloc, 
  LLVMCodeModel code_model)
@extern("LLVMCreateTargetMachine");

fn void disposeTargetMachine(
  LLVMTargetMachineRef t)
@extern("LLVMDisposeTargetMachine");

fn LLVMTargetRef getTargetMachineTarget(
  LLVMTargetMachineRef t)
@extern("LLVMGetTargetMachineTarget");

fn CChar* getTargetMachineTriple(
  LLVMTargetMachineRef t)
@extern("LLVMGetTargetMachineTriple");

fn CChar* getTargetMachineCPU(
  LLVMTargetMachineRef t)
@extern("LLVMGetTargetMachineCPU");

fn CChar* getTargetMachineFeatureString(
  LLVMTargetMachineRef t)
@extern("LLVMGetTargetMachineFeatureString");

fn LLVMTargetDataRef createTargetDataLayout(
  LLVMTargetMachineRef t)
@extern("LLVMCreateTargetDataLayout");

fn void setTargetMachineAsmVerbosity(
  LLVMTargetMachineRef t, 
  LLVMBool verbose_asm)
@extern("LLVMSetTargetMachineAsmVerbosity");

fn void setTargetMachineFastISel(
  LLVMTargetMachineRef t, 
  LLVMBool enable)
@extern("LLVMSetTargetMachineFastISel");

fn void setTargetMachineGlobalISel(
  LLVMTargetMachineRef t, 
  LLVMBool enable)
@extern("LLVMSetTargetMachineGlobalISel");

fn void setTargetMachineGlobalISelAbort(
  LLVMTargetMachineRef t, 
  LLVMGlobalISelAbortMode mode)
@extern("LLVMSetTargetMachineGlobalISelAbort");

fn void setTargetMachineMachineOutliner(
  LLVMTargetMachineRef t, 
  LLVMBool enable)
@extern("LLVMSetTargetMachineMachineOutliner");

fn LLVMBool targetMachineEmitToFile(
  LLVMTargetMachineRef t, 
  LLVMModuleRef m, 
  CChar* filename, 
  LLVMCodeGenFileType codegen, 
  CChar** error_message)
@extern("LLVMTargetMachineEmitToFile");

fn LLVMBool targetMachineEmitToMemoryBuffer(
  LLVMTargetMachineRef t, 
  LLVMModuleRef m, 
  LLVMCodeGenFileType codegen, 
  CChar** error_message, 
  LLVMMemoryBufferRef* out_mem_buf)
@extern("LLVMTargetMachineEmitToMemoryBuffer");

fn CChar* getDefaultTargetTriple()
@extern("LLVMGetDefaultTargetTriple");

fn CChar* normalizeTargetTriple(
  CChar* triple)
@extern("LLVMNormalizeTargetTriple");

fn CChar* getHostCPUName()
@extern("LLVMGetHostCPUName");

fn CChar* getHostCPUFeatures()
@extern("LLVMGetHostCPUFeatures");

fn void addAnalysisPasses(
  LLVMTargetMachineRef t, 
  LLVMPassManagerRef pm)
@extern("LLVMAddAnalysisPasses");

fn void linkInMCJIT()
@extern("LLVMLinkInMCJIT");

fn void linkInInterpreter()
@extern("LLVMLinkInInterpreter");

typedef LLVMOpaqueGenericValue = void;

alias LLVMGenericValueRef = LLVMOpaqueGenericValue*;

typedef LLVMOpaqueExecutionEngine = void;

alias LLVMExecutionEngineRef = LLVMOpaqueExecutionEngine*;

typedef LLVMOpaqueMCJITMemoryManager = void;

alias LLVMMCJITMemoryManagerRef = LLVMOpaqueMCJITMemoryManager*;

struct LLVMMCJITCompilerOptions {
  CUInt opt_level;
  LLVMCodeModel code_model;
  LLVMBool no_frame_pointer_elim;
  LLVMBool enable_fast_i_sel;
  LLVMMCJITMemoryManagerRef mcjmm;
}

fn LLVMGenericValueRef createGenericValueOfInt(
  LLVMTypeRef ty, 
  CULongLong n, 
  LLVMBool is_signed)
@extern("LLVMCreateGenericValueOfInt");

fn LLVMGenericValueRef createGenericValueOfPointer(
  void* p)
@extern("LLVMCreateGenericValueOfPointer");

fn LLVMGenericValueRef createGenericValueOfFloat(
  LLVMTypeRef ty, 
  double n)
@extern("LLVMCreateGenericValueOfFloat");

fn CUInt genericValueIntWidth(
  LLVMGenericValueRef gen_val_ref)
@extern("LLVMGenericValueIntWidth");

fn CULongLong genericValueToInt(
  LLVMGenericValueRef gen_val, 
  LLVMBool is_signed)
@extern("LLVMGenericValueToInt");

fn void* genericValueToPointer(
  LLVMGenericValueRef gen_val)
@extern("LLVMGenericValueToPointer");

fn double genericValueToFloat(
  LLVMTypeRef ty_ref, 
  LLVMGenericValueRef gen_val)
@extern("LLVMGenericValueToFloat");

fn void disposeGenericValue(
  LLVMGenericValueRef gen_val)
@extern("LLVMDisposeGenericValue");

fn LLVMBool createExecutionEngineForModule(
  LLVMExecutionEngineRef* out_ee, 
  LLVMModuleRef m, 
  CChar** out_error)
@extern("LLVMCreateExecutionEngineForModule");

fn LLVMBool createInterpreterForModule(
  LLVMExecutionEngineRef* out_interp, 
  LLVMModuleRef m, 
  CChar** out_error)
@extern("LLVMCreateInterpreterForModule");

fn LLVMBool createJITCompilerForModule(
  LLVMExecutionEngineRef* out_jit, 
  LLVMModuleRef m, 
  CUInt opt_level, 
  CChar** out_error)
@extern("LLVMCreateJITCompilerForModule");

fn void initializeMCJITCompilerOptions(
  LLVMMCJITCompilerOptions* options, 
  usz size_of_options)
@extern("LLVMInitializeMCJITCompilerOptions");

fn LLVMBool createMCJITCompilerForModule(
  LLVMExecutionEngineRef* out_jit, 
  LLVMModuleRef m, 
  LLVMMCJITCompilerOptions* options, 
  usz size_of_options, 
  CChar** out_error)
@extern("LLVMCreateMCJITCompilerForModule");

fn void disposeExecutionEngine(
  LLVMExecutionEngineRef ee)
@extern("LLVMDisposeExecutionEngine");

fn void runStaticConstructors(
  LLVMExecutionEngineRef ee)
@extern("LLVMRunStaticConstructors");

fn void runStaticDestructors(
  LLVMExecutionEngineRef ee)
@extern("LLVMRunStaticDestructors");

fn CInt runFunctionAsMain(
  LLVMExecutionEngineRef ee, 
  LLVMValueRef f, 
  CUInt arg_c, 
  CChar** arg_v, 
  CChar** env_p)
@extern("LLVMRunFunctionAsMain");

fn LLVMGenericValueRef runFunction(
  LLVMExecutionEngineRef ee, 
  LLVMValueRef f, 
  CUInt num_args, 
  LLVMGenericValueRef* args)
@extern("LLVMRunFunction");

fn void freeMachineCodeForFunction(
  LLVMExecutionEngineRef ee, 
  LLVMValueRef f)
@extern("LLVMFreeMachineCodeForFunction");

fn void addModule(
  LLVMExecutionEngineRef ee, 
  LLVMModuleRef m)
@extern("LLVMAddModule");

fn LLVMBool removeModule(
  LLVMExecutionEngineRef ee, 
  LLVMModuleRef m, 
  LLVMModuleRef* out_mod, 
  CChar** out_error)
@extern("LLVMRemoveModule");

fn LLVMBool findFunction(
  LLVMExecutionEngineRef ee, 
  CChar* name, 
  LLVMValueRef* out_fn)
@extern("LLVMFindFunction");

fn void* recompileAndRelinkFunction(
  LLVMExecutionEngineRef ee, 
  LLVMValueRef fn_)
@extern("LLVMRecompileAndRelinkFunction");

fn LLVMTargetDataRef getExecutionEngineTargetData(
  LLVMExecutionEngineRef ee)
@extern("LLVMGetExecutionEngineTargetData");

fn LLVMTargetMachineRef getExecutionEngineTargetMachine(
  LLVMExecutionEngineRef ee)
@extern("LLVMGetExecutionEngineTargetMachine");

fn void addGlobalMapping(
  LLVMExecutionEngineRef ee, 
  LLVMValueRef global, 
  void* addr)
@extern("LLVMAddGlobalMapping");

fn void* getPointerToGlobal(
  LLVMExecutionEngineRef ee, 
  LLVMValueRef global)
@extern("LLVMGetPointerToGlobal");

fn ulong getGlobalValueAddress(
  LLVMExecutionEngineRef ee, 
  CChar* name)
@extern("LLVMGetGlobalValueAddress");

fn ulong getFunctionAddress(
  LLVMExecutionEngineRef ee, 
  CChar* name)
@extern("LLVMGetFunctionAddress");

fn LLVMBool executionEngineGetErrMsg(
  LLVMExecutionEngineRef ee, 
  CChar** out_error)
@extern("LLVMExecutionEngineGetErrMsg");

alias LLVMMemoryManagerAllocateCodeSectionCallback = fn char*(
  void* opaque, 
  uptr size, 
  CUInt alignment, 
  CUInt section_id, 
  CChar* section_name);

alias LLVMMemoryManagerAllocateDataSectionCallback = fn char*(
  void* opaque, 
  uptr size, 
  CUInt alignment, 
  CUInt section_id, 
  CChar* section_name, 
  LLVMBool is_read_only);

alias LLVMMemoryManagerFinalizeMemoryCallback = fn LLVMBool(
  void* opaque, 
  CChar** err_msg);

alias LLVMMemoryManagerDestroyCallback = fn void(
  void* opaque);

fn LLVMMCJITMemoryManagerRef createSimpleMCJITMemoryManager(
  void* opaque, 
  LLVMMemoryManagerAllocateCodeSectionCallback allocate_code_section, 
  LLVMMemoryManagerAllocateDataSectionCallback allocate_data_section, 
  LLVMMemoryManagerFinalizeMemoryCallback finalize_memory, 
  LLVMMemoryManagerDestroyCallback destroy)
@extern("LLVMCreateSimpleMCJITMemoryManager");

fn void disposeMCJITMemoryManager(
  LLVMMCJITMemoryManagerRef mm)
@extern("LLVMDisposeMCJITMemoryManager");

fn LLVMJITEventListenerRef createGDBRegistrationListener()
@extern("LLVMCreateGDBRegistrationListener");

fn LLVMJITEventListenerRef createIntelJITEventListener()
@extern("LLVMCreateIntelJITEventListener");

fn LLVMJITEventListenerRef createOProfileJITEventListener()
@extern("LLVMCreateOProfileJITEventListener");

fn LLVMJITEventListenerRef createPerfJITEventListener()
@extern("LLVMCreatePerfJITEventListener");

fn LLVMBool parseIRInContext(
  LLVMContextRef context_ref, 
  LLVMMemoryBufferRef mem_buf, 
  LLVMModuleRef* out_m, 
  CChar** out_message)
@extern("LLVMParseIRInContext");

alias LLVMOrcJITTargetAddress = ulong;

alias LLVMOrcExecutorAddress = ulong;

typedef LLVMJITSymbolGenericFlags = inline CUInt;
const LLVMJITSymbolGenericFlags JIT_SYMBOL_GENERIC_FLAGS_NONE = 0;
const LLVMJITSymbolGenericFlags JIT_SYMBOL_GENERIC_FLAGS_EXPORTED = 1U<<0;
const LLVMJITSymbolGenericFlags JIT_SYMBOL_GENERIC_FLAGS_WEAK = 1U<<1;
const LLVMJITSymbolGenericFlags JIT_SYMBOL_GENERIC_FLAGS_CALLABLE = 1U<<2;
const LLVMJITSymbolGenericFlags JIT_SYMBOL_GENERIC_FLAGS_MATERIALIZATION_SIDE_EFFECTS_ONLY = 1U<<3;

alias LLVMJITSymbolTargetFlags = char;

struct LLVMJITSymbolFlags {
  char generic_flags;
  char target_flags;
}

struct LLVMJITEvaluatedSymbol {
  LLVMOrcExecutorAddress address;
  LLVMJITSymbolFlags flags;
}

typedef LLVMOrcOpaqueExecutionSession = void;

alias LLVMOrcExecutionSessionRef = LLVMOrcOpaqueExecutionSession*;

alias LLVMOrcErrorReporterFunction = fn void(
  void* ctx, 
  LLVMErrorRef err);

typedef LLVMOrcOpaqueSymbolStringPool = void;

alias LLVMOrcSymbolStringPoolRef = LLVMOrcOpaqueSymbolStringPool*;

typedef LLVMOrcOpaqueSymbolStringPoolEntry = void;

alias LLVMOrcSymbolStringPoolEntryRef = LLVMOrcOpaqueSymbolStringPoolEntry*;

struct LLVMOrcCSymbolFlagsMapPair {
  LLVMOrcSymbolStringPoolEntryRef name;
  LLVMJITSymbolFlags flags;
}

alias LLVMOrcCSymbolFlagsMapPairs = LLVMOrcCSymbolFlagsMapPair*;

struct LLVMOrcCSymbolMapPair {
  LLVMOrcSymbolStringPoolEntryRef name;
  LLVMJITEvaluatedSymbol sym;
}

alias LLVMOrcCSymbolMapPairs = LLVMOrcCSymbolMapPair*;

struct LLVMOrcCSymbolAliasMapEntry {
  LLVMOrcSymbolStringPoolEntryRef name;
  LLVMJITSymbolFlags flags;
}

struct LLVMOrcCSymbolAliasMapPair {
  LLVMOrcSymbolStringPoolEntryRef name;
  LLVMOrcCSymbolAliasMapEntry entry;
}

alias LLVMOrcCSymbolAliasMapPairs = LLVMOrcCSymbolAliasMapPair*;

typedef LLVMOrcOpaqueJITDylib = void;

alias LLVMOrcJITDylibRef = LLVMOrcOpaqueJITDylib*;

struct LLVMOrcCSymbolsList {
  LLVMOrcSymbolStringPoolEntryRef* symbols;
  usz length;
}

struct LLVMOrcCDependenceMapPair {
  LLVMOrcJITDylibRef jd;
  LLVMOrcCSymbolsList names;
}

alias LLVMOrcCDependenceMapPairs = LLVMOrcCDependenceMapPair*;

struct LLVMOrcCSymbolDependenceGroup {
  LLVMOrcCSymbolsList symbols;
  LLVMOrcCDependenceMapPairs dependencies;
  usz num_dependencies;
}

typedef LLVMOrcLookupKind = inline CUInt;
const LLVMOrcLookupKind ORC_LOOKUP_KIND_STATIC = 0;
const LLVMOrcLookupKind ORC_LOOKUP_KIND_DL_SYM = 1;

typedef LLVMOrcJITDylibLookupFlags = inline CUInt;
const LLVMOrcJITDylibLookupFlags ORC_JIT_DYLIB_LOOKUP_FLAGS_MATCH_EXPORTED_SYMBOLS_ONLY = 0;
const LLVMOrcJITDylibLookupFlags ORC_JIT_DYLIB_LOOKUP_FLAGS_MATCH_ALL_SYMBOLS = 1;

struct LLVMOrcCJITDylibSearchOrderElement {
  LLVMOrcJITDylibRef jd;
  LLVMOrcJITDylibLookupFlags jd_lookup_flags;
}

alias LLVMOrcCJITDylibSearchOrder = LLVMOrcCJITDylibSearchOrderElement*;

typedef LLVMOrcSymbolLookupFlags = inline CUInt;
const LLVMOrcSymbolLookupFlags ORC_SYMBOL_LOOKUP_FLAGS_REQUIRED_SYMBOL = 0;
const LLVMOrcSymbolLookupFlags ORC_SYMBOL_LOOKUP_FLAGS_WEAKLY_REFERENCED_SYMBOL = 1;

struct LLVMOrcCLookupSetElement {
  LLVMOrcSymbolStringPoolEntryRef name;
  LLVMOrcSymbolLookupFlags lookup_flags;
}

alias LLVMOrcCLookupSet = LLVMOrcCLookupSetElement*;

typedef LLVMOrcOpaqueMaterializationUnit = void;

alias LLVMOrcMaterializationUnitRef = LLVMOrcOpaqueMaterializationUnit*;

typedef LLVMOrcOpaqueMaterializationResponsibility = void;

alias LLVMOrcMaterializationResponsibilityRef = LLVMOrcOpaqueMaterializationResponsibility*;

alias LLVMOrcMaterializationUnitMaterializeFunction = fn void(
  void* ctx, 
  LLVMOrcMaterializationResponsibilityRef mr);

alias LLVMOrcMaterializationUnitDiscardFunction = fn void(
  void* ctx, 
  LLVMOrcJITDylibRef jd, 
  LLVMOrcSymbolStringPoolEntryRef symbol);

alias LLVMOrcMaterializationUnitDestroyFunction = fn void(
  void* ctx);

typedef LLVMOrcOpaqueResourceTracker = void;

alias LLVMOrcResourceTrackerRef = LLVMOrcOpaqueResourceTracker*;

typedef LLVMOrcOpaqueDefinitionGenerator = void;

alias LLVMOrcDefinitionGeneratorRef = LLVMOrcOpaqueDefinitionGenerator*;

typedef LLVMOrcOpaqueLookupState = void;

alias LLVMOrcLookupStateRef = LLVMOrcOpaqueLookupState*;

alias LLVMOrcCAPIDefinitionGeneratorTryToGenerateFunction = fn LLVMErrorRef(
  LLVMOrcDefinitionGeneratorRef generator_obj, 
  void* ctx, 
  LLVMOrcLookupStateRef* lookup_state, 
  LLVMOrcLookupKind kind, 
  LLVMOrcJITDylibRef jd, 
  LLVMOrcJITDylibLookupFlags jd_lookup_flags, 
  LLVMOrcCLookupSet lookup_set, 
  usz lookup_set_size);

alias LLVMOrcDisposeCAPIDefinitionGeneratorFunction = fn void(
  void* ctx);

alias LLVMOrcSymbolPredicate = fn CInt(
  void* ctx, 
  LLVMOrcSymbolStringPoolEntryRef sym);

typedef LLVMOrcOpaqueThreadSafeContext = void;

alias LLVMOrcThreadSafeContextRef = LLVMOrcOpaqueThreadSafeContext*;

typedef LLVMOrcOpaqueThreadSafeModule = void;

alias LLVMOrcThreadSafeModuleRef = LLVMOrcOpaqueThreadSafeModule*;

alias LLVMOrcGenericIRModuleOperationFunction = fn LLVMErrorRef(
  void* ctx, 
  LLVMModuleRef m);

typedef LLVMOrcOpaqueJITTargetMachineBuilder = void;

alias LLVMOrcJITTargetMachineBuilderRef = LLVMOrcOpaqueJITTargetMachineBuilder*;

typedef LLVMOrcOpaqueObjectLayer = void;

alias LLVMOrcObjectLayerRef = LLVMOrcOpaqueObjectLayer*;

typedef LLVMOrcOpaqueObjectLinkingLayer = void;

alias LLVMOrcObjectLinkingLayerRef = LLVMOrcOpaqueObjectLinkingLayer*;

typedef LLVMOrcOpaqueIRTransformLayer = void;

alias LLVMOrcIRTransformLayerRef = LLVMOrcOpaqueIRTransformLayer*;

alias LLVMOrcIRTransformLayerTransformFunction = fn LLVMErrorRef(
  void* ctx, 
  LLVMOrcThreadSafeModuleRef* mod_in_out, 
  LLVMOrcMaterializationResponsibilityRef mr);

typedef LLVMOrcOpaqueObjectTransformLayer = void;

alias LLVMOrcObjectTransformLayerRef = LLVMOrcOpaqueObjectTransformLayer*;

alias LLVMOrcObjectTransformLayerTransformFunction = fn LLVMErrorRef(
  void* ctx, 
  LLVMMemoryBufferRef* obj_in_out);

typedef LLVMOrcOpaqueIndirectStubsManager = void;

alias LLVMOrcIndirectStubsManagerRef = LLVMOrcOpaqueIndirectStubsManager*;

typedef LLVMOrcOpaqueLazyCallThroughManager = void;

alias LLVMOrcLazyCallThroughManagerRef = LLVMOrcOpaqueLazyCallThroughManager*;

typedef LLVMOrcOpaqueDumpObjects = void;

alias LLVMOrcDumpObjectsRef = LLVMOrcOpaqueDumpObjects*;

fn void orcExecutionSessionSetErrorReporter(
  LLVMOrcExecutionSessionRef es, 
  LLVMOrcErrorReporterFunction report_error, 
  void* ctx)
@extern("LLVMOrcExecutionSessionSetErrorReporter");

fn LLVMOrcSymbolStringPoolRef orcExecutionSessionGetSymbolStringPool(
  LLVMOrcExecutionSessionRef es)
@extern("LLVMOrcExecutionSessionGetSymbolStringPool");

fn void orcSymbolStringPoolClearDeadEntries(
  LLVMOrcSymbolStringPoolRef ssp)
@extern("LLVMOrcSymbolStringPoolClearDeadEntries");

fn LLVMOrcSymbolStringPoolEntryRef orcExecutionSessionIntern(
  LLVMOrcExecutionSessionRef es, 
  CChar* name)
@extern("LLVMOrcExecutionSessionIntern");

alias LLVMOrcExecutionSessionLookupHandleResultFunction = fn void(
  LLVMErrorRef err, 
  LLVMOrcCSymbolMapPairs result, 
  usz num_pairs, 
  void* ctx);

fn void orcExecutionSessionLookup(
  LLVMOrcExecutionSessionRef es, 
  LLVMOrcLookupKind k, 
  LLVMOrcCJITDylibSearchOrder search_order, 
  usz search_order_size, 
  LLVMOrcCLookupSet symbols, 
  usz symbols_size, 
  LLVMOrcExecutionSessionLookupHandleResultFunction handle_result, 
  void* ctx)
@extern("LLVMOrcExecutionSessionLookup");

fn void orcRetainSymbolStringPoolEntry(
  LLVMOrcSymbolStringPoolEntryRef s)
@extern("LLVMOrcRetainSymbolStringPoolEntry");

fn void orcReleaseSymbolStringPoolEntry(
  LLVMOrcSymbolStringPoolEntryRef s)
@extern("LLVMOrcReleaseSymbolStringPoolEntry");

fn CChar* orcSymbolStringPoolEntryStr(
  LLVMOrcSymbolStringPoolEntryRef s)
@extern("LLVMOrcSymbolStringPoolEntryStr");

fn void orcReleaseResourceTracker(
  LLVMOrcResourceTrackerRef rt)
@extern("LLVMOrcReleaseResourceTracker");

fn void orcResourceTrackerTransferTo(
  LLVMOrcResourceTrackerRef src_rt, 
  LLVMOrcResourceTrackerRef dst_rt)
@extern("LLVMOrcResourceTrackerTransferTo");

fn LLVMErrorRef orcResourceTrackerRemove(
  LLVMOrcResourceTrackerRef rt)
@extern("LLVMOrcResourceTrackerRemove");

fn void orcDisposeDefinitionGenerator(
  LLVMOrcDefinitionGeneratorRef dg)
@extern("LLVMOrcDisposeDefinitionGenerator");

fn void orcDisposeMaterializationUnit(
  LLVMOrcMaterializationUnitRef mu)
@extern("LLVMOrcDisposeMaterializationUnit");

fn LLVMOrcMaterializationUnitRef orcCreateCustomMaterializationUnit(
  CChar* name, 
  void* ctx, 
  LLVMOrcCSymbolFlagsMapPairs syms, 
  usz num_syms, 
  LLVMOrcSymbolStringPoolEntryRef init_sym, 
  LLVMOrcMaterializationUnitMaterializeFunction materialize, 
  LLVMOrcMaterializationUnitDiscardFunction discard, 
  LLVMOrcMaterializationUnitDestroyFunction destroy)
@extern("LLVMOrcCreateCustomMaterializationUnit");

fn LLVMOrcMaterializationUnitRef orcAbsoluteSymbols(
  LLVMOrcCSymbolMapPairs syms, 
  usz num_pairs)
@extern("LLVMOrcAbsoluteSymbols");

fn LLVMOrcMaterializationUnitRef orcLazyReexports(
  LLVMOrcLazyCallThroughManagerRef lctm, 
  LLVMOrcIndirectStubsManagerRef ism, 
  LLVMOrcJITDylibRef source_ref, 
  LLVMOrcCSymbolAliasMapPairs callable_aliases, 
  usz num_pairs)
@extern("LLVMOrcLazyReexports");

fn void orcDisposeMaterializationResponsibility(
  LLVMOrcMaterializationResponsibilityRef mr)
@extern("LLVMOrcDisposeMaterializationResponsibility");

fn LLVMOrcJITDylibRef orcMaterializationResponsibilityGetTargetDylib(
  LLVMOrcMaterializationResponsibilityRef mr)
@extern("LLVMOrcMaterializationResponsibilityGetTargetDylib");

fn LLVMOrcExecutionSessionRef orcMaterializationResponsibilityGetExecutionSession(
  LLVMOrcMaterializationResponsibilityRef mr)
@extern("LLVMOrcMaterializationResponsibilityGetExecutionSession");

fn LLVMOrcCSymbolFlagsMapPairs orcMaterializationResponsibilityGetSymbols(
  LLVMOrcMaterializationResponsibilityRef mr, 
  usz* num_pairs)
@extern("LLVMOrcMaterializationResponsibilityGetSymbols");

fn void orcDisposeCSymbolFlagsMap(
  LLVMOrcCSymbolFlagsMapPairs pairs)
@extern("LLVMOrcDisposeCSymbolFlagsMap");

fn LLVMOrcSymbolStringPoolEntryRef orcMaterializationResponsibilityGetInitializerSymbol(
  LLVMOrcMaterializationResponsibilityRef mr)
@extern("LLVMOrcMaterializationResponsibilityGetInitializerSymbol");

fn LLVMOrcSymbolStringPoolEntryRef* orcMaterializationResponsibilityGetRequestedSymbols(
  LLVMOrcMaterializationResponsibilityRef mr, 
  usz* num_symbols)
@extern("LLVMOrcMaterializationResponsibilityGetRequestedSymbols");

fn void orcDisposeSymbols(
  LLVMOrcSymbolStringPoolEntryRef* symbols)
@extern("LLVMOrcDisposeSymbols");

fn LLVMErrorRef orcMaterializationResponsibilityNotifyResolved(
  LLVMOrcMaterializationResponsibilityRef mr, 
  LLVMOrcCSymbolMapPairs symbols, 
  usz num_pairs)
@extern("LLVMOrcMaterializationResponsibilityNotifyResolved");

fn LLVMErrorRef orcMaterializationResponsibilityNotifyEmitted(
  LLVMOrcMaterializationResponsibilityRef mr, 
  LLVMOrcCSymbolDependenceGroup* symbol_dep_groups, 
  usz num_symbol_dep_groups)
@extern("LLVMOrcMaterializationResponsibilityNotifyEmitted");

fn LLVMErrorRef orcMaterializationResponsibilityDefineMaterializing(
  LLVMOrcMaterializationResponsibilityRef mr, 
  LLVMOrcCSymbolFlagsMapPairs pairs, 
  usz num_pairs)
@extern("LLVMOrcMaterializationResponsibilityDefineMaterializing");

fn void orcMaterializationResponsibilityFailMaterialization(
  LLVMOrcMaterializationResponsibilityRef mr)
@extern("LLVMOrcMaterializationResponsibilityFailMaterialization");

fn LLVMErrorRef orcMaterializationResponsibilityReplace(
  LLVMOrcMaterializationResponsibilityRef mr, 
  LLVMOrcMaterializationUnitRef mu)
@extern("LLVMOrcMaterializationResponsibilityReplace");

fn LLVMErrorRef orcMaterializationResponsibilityDelegate(
  LLVMOrcMaterializationResponsibilityRef mr, 
  LLVMOrcSymbolStringPoolEntryRef* symbols, 
  usz num_symbols, 
  LLVMOrcMaterializationResponsibilityRef* result)
@extern("LLVMOrcMaterializationResponsibilityDelegate");

fn LLVMOrcJITDylibRef orcExecutionSessionCreateBareJITDylib(
  LLVMOrcExecutionSessionRef es, 
  CChar* name)
@extern("LLVMOrcExecutionSessionCreateBareJITDylib");

fn LLVMErrorRef orcExecutionSessionCreateJITDylib(
  LLVMOrcExecutionSessionRef es, 
  LLVMOrcJITDylibRef* result, 
  CChar* name)
@extern("LLVMOrcExecutionSessionCreateJITDylib");

fn LLVMOrcJITDylibRef orcExecutionSessionGetJITDylibByName(
  LLVMOrcExecutionSessionRef es, 
  CChar* name)
@extern("LLVMOrcExecutionSessionGetJITDylibByName");

fn LLVMOrcResourceTrackerRef orcJITDylibCreateResourceTracker(
  LLVMOrcJITDylibRef jd)
@extern("LLVMOrcJITDylibCreateResourceTracker");

fn LLVMOrcResourceTrackerRef orcJITDylibGetDefaultResourceTracker(
  LLVMOrcJITDylibRef jd)
@extern("LLVMOrcJITDylibGetDefaultResourceTracker");

fn LLVMErrorRef orcJITDylibDefine(
  LLVMOrcJITDylibRef jd, 
  LLVMOrcMaterializationUnitRef mu)
@extern("LLVMOrcJITDylibDefine");

fn LLVMErrorRef orcJITDylibClear(
  LLVMOrcJITDylibRef jd)
@extern("LLVMOrcJITDylibClear");

fn void orcJITDylibAddGenerator(
  LLVMOrcJITDylibRef jd, 
  LLVMOrcDefinitionGeneratorRef dg)
@extern("LLVMOrcJITDylibAddGenerator");

fn LLVMOrcDefinitionGeneratorRef orcCreateCustomCAPIDefinitionGenerator(
  LLVMOrcCAPIDefinitionGeneratorTryToGenerateFunction f, 
  void* ctx, 
  LLVMOrcDisposeCAPIDefinitionGeneratorFunction dispose)
@extern("LLVMOrcCreateCustomCAPIDefinitionGenerator");

fn void orcLookupStateContinueLookup(
  LLVMOrcLookupStateRef s, 
  LLVMErrorRef err)
@extern("LLVMOrcLookupStateContinueLookup");

fn LLVMErrorRef orcCreateDynamicLibrarySearchGeneratorForProcess(
  LLVMOrcDefinitionGeneratorRef* result, 
  CChar global_prefx, 
  LLVMOrcSymbolPredicate filter, 
  void* filter_ctx)
@extern("LLVMOrcCreateDynamicLibrarySearchGeneratorForProcess");

fn LLVMErrorRef orcCreateDynamicLibrarySearchGeneratorForPath(
  LLVMOrcDefinitionGeneratorRef* result, 
  CChar* file_name, 
  CChar global_prefix, 
  LLVMOrcSymbolPredicate filter, 
  void* filter_ctx)
@extern("LLVMOrcCreateDynamicLibrarySearchGeneratorForPath");

fn LLVMErrorRef orcCreateStaticLibrarySearchGeneratorForPath(
  LLVMOrcDefinitionGeneratorRef* result, 
  LLVMOrcObjectLayerRef obj_layer, 
  CChar* file_name, 
  CChar* target_triple)
@extern("LLVMOrcCreateStaticLibrarySearchGeneratorForPath");

fn LLVMOrcThreadSafeContextRef orcCreateNewThreadSafeContext()
@extern("LLVMOrcCreateNewThreadSafeContext");

fn LLVMContextRef orcThreadSafeContextGetContext(
  LLVMOrcThreadSafeContextRef ts_ctx)
@extern("LLVMOrcThreadSafeContextGetContext");

fn void orcDisposeThreadSafeContext(
  LLVMOrcThreadSafeContextRef ts_ctx)
@extern("LLVMOrcDisposeThreadSafeContext");

fn LLVMOrcThreadSafeModuleRef orcCreateNewThreadSafeModule(
  LLVMModuleRef m, 
  LLVMOrcThreadSafeContextRef ts_ctx)
@extern("LLVMOrcCreateNewThreadSafeModule");

fn void orcDisposeThreadSafeModule(
  LLVMOrcThreadSafeModuleRef tsm)
@extern("LLVMOrcDisposeThreadSafeModule");

fn LLVMErrorRef orcThreadSafeModuleWithModuleDo(
  LLVMOrcThreadSafeModuleRef tsm, 
  LLVMOrcGenericIRModuleOperationFunction f, 
  void* ctx)
@extern("LLVMOrcThreadSafeModuleWithModuleDo");

fn LLVMErrorRef orcJITTargetMachineBuilderDetectHost(
  LLVMOrcJITTargetMachineBuilderRef* result)
@extern("LLVMOrcJITTargetMachineBuilderDetectHost");

fn LLVMOrcJITTargetMachineBuilderRef orcJITTargetMachineBuilderCreateFromTargetMachine(
  LLVMTargetMachineRef tm)
@extern("LLVMOrcJITTargetMachineBuilderCreateFromTargetMachine");

fn void orcDisposeJITTargetMachineBuilder(
  LLVMOrcJITTargetMachineBuilderRef jtmb)
@extern("LLVMOrcDisposeJITTargetMachineBuilder");

fn CChar* orcJITTargetMachineBuilderGetTargetTriple(
  LLVMOrcJITTargetMachineBuilderRef jtmb)
@extern("LLVMOrcJITTargetMachineBuilderGetTargetTriple");

fn void orcJITTargetMachineBuilderSetTargetTriple(
  LLVMOrcJITTargetMachineBuilderRef jtmb, 
  CChar* target_triple)
@extern("LLVMOrcJITTargetMachineBuilderSetTargetTriple");

fn LLVMErrorRef orcObjectLayerAddObjectFile(
  LLVMOrcObjectLayerRef obj_layer, 
  LLVMOrcJITDylibRef jd, 
  LLVMMemoryBufferRef obj_buffer)
@extern("LLVMOrcObjectLayerAddObjectFile");

fn LLVMErrorRef orcObjectLayerAddObjectFileWithRT(
  LLVMOrcObjectLayerRef obj_layer, 
  LLVMOrcResourceTrackerRef rt, 
  LLVMMemoryBufferRef obj_buffer)
@extern("LLVMOrcObjectLayerAddObjectFileWithRT");

fn void orcObjectLayerEmit(
  LLVMOrcObjectLayerRef obj_layer, 
  LLVMOrcMaterializationResponsibilityRef r, 
  LLVMMemoryBufferRef obj_buffer)
@extern("LLVMOrcObjectLayerEmit");

fn void orcDisposeObjectLayer(
  LLVMOrcObjectLayerRef obj_layer)
@extern("LLVMOrcDisposeObjectLayer");

fn void orcIRTransformLayerEmit(
  LLVMOrcIRTransformLayerRef ir_transform_layer, 
  LLVMOrcMaterializationResponsibilityRef mr, 
  LLVMOrcThreadSafeModuleRef tsm)
@extern("LLVMOrcIRTransformLayerEmit");

fn void orcIRTransformLayerSetTransform(
  LLVMOrcIRTransformLayerRef ir_transform_layer, 
  LLVMOrcIRTransformLayerTransformFunction transform_function, 
  void* ctx)
@extern("LLVMOrcIRTransformLayerSetTransform");

fn void orcObjectTransformLayerSetTransform(
  LLVMOrcObjectTransformLayerRef obj_transform_layer, 
  LLVMOrcObjectTransformLayerTransformFunction transform_function, 
  void* ctx)
@extern("LLVMOrcObjectTransformLayerSetTransform");

fn LLVMOrcIndirectStubsManagerRef orcCreateLocalIndirectStubsManager(
  CChar* target_triple)
@extern("LLVMOrcCreateLocalIndirectStubsManager");

fn void orcDisposeIndirectStubsManager(
  LLVMOrcIndirectStubsManagerRef ism)
@extern("LLVMOrcDisposeIndirectStubsManager");

fn LLVMErrorRef orcCreateLocalLazyCallThroughManager(
  CChar* target_triple, 
  LLVMOrcExecutionSessionRef es, 
  LLVMOrcJITTargetAddress error_handler_addr, 
  LLVMOrcLazyCallThroughManagerRef* lctm)
@extern("LLVMOrcCreateLocalLazyCallThroughManager");

fn void orcDisposeLazyCallThroughManager(
  LLVMOrcLazyCallThroughManagerRef lctm)
@extern("LLVMOrcDisposeLazyCallThroughManager");

fn LLVMOrcDumpObjectsRef orcCreateDumpObjects(
  CChar* dump_dir, 
  CChar* identifier_override)
@extern("LLVMOrcCreateDumpObjects");

fn void orcDisposeDumpObjects(
  LLVMOrcDumpObjectsRef dump_objects)
@extern("LLVMOrcDisposeDumpObjects");

fn LLVMErrorRef orcDumpObjects_CallOperator(
  LLVMOrcDumpObjectsRef dump_objects, 
  LLVMMemoryBufferRef* obj_buffer)
@extern("LLVMOrcDumpObjects_CallOperator");

alias LLVMOrcLLJITBuilderObjectLinkingLayerCreatorFunction = fn LLVMOrcObjectLayerRef(
  void* ctx, 
  LLVMOrcExecutionSessionRef es, 
  CChar* triple);

typedef LLVMOrcOpaqueLLJITBuilder = void;

alias LLVMOrcLLJITBuilderRef = LLVMOrcOpaqueLLJITBuilder*;

typedef LLVMOrcOpaqueLLJIT = void;

alias LLVMOrcLLJITRef = LLVMOrcOpaqueLLJIT*;

fn LLVMOrcLLJITBuilderRef orcCreateLLJITBuilder()
@extern("LLVMOrcCreateLLJITBuilder");

fn void orcDisposeLLJITBuilder(
  LLVMOrcLLJITBuilderRef builder)
@extern("LLVMOrcDisposeLLJITBuilder");

fn void orcLLJITBuilderSetJITTargetMachineBuilder(
  LLVMOrcLLJITBuilderRef builder, 
  LLVMOrcJITTargetMachineBuilderRef jtmb)
@extern("LLVMOrcLLJITBuilderSetJITTargetMachineBuilder");

fn void orcLLJITBuilderSetObjectLinkingLayerCreator(
  LLVMOrcLLJITBuilderRef builder, 
  LLVMOrcLLJITBuilderObjectLinkingLayerCreatorFunction f, 
  void* ctx)
@extern("LLVMOrcLLJITBuilderSetObjectLinkingLayerCreator");

fn LLVMErrorRef orcCreateLLJIT(
  LLVMOrcLLJITRef* result, 
  LLVMOrcLLJITBuilderRef builder)
@extern("LLVMOrcCreateLLJIT");

fn LLVMErrorRef orcDisposeLLJIT(
  LLVMOrcLLJITRef j)
@extern("LLVMOrcDisposeLLJIT");

fn LLVMOrcExecutionSessionRef orcLLJITGetExecutionSession(
  LLVMOrcLLJITRef j)
@extern("LLVMOrcLLJITGetExecutionSession");

fn LLVMOrcJITDylibRef orcLLJITGetMainJITDylib(
  LLVMOrcLLJITRef j)
@extern("LLVMOrcLLJITGetMainJITDylib");

fn CChar* orcLLJITGetTripleString(
  LLVMOrcLLJITRef j)
@extern("LLVMOrcLLJITGetTripleString");

fn CChar orcLLJITGetGlobalPrefix(
  LLVMOrcLLJITRef j)
@extern("LLVMOrcLLJITGetGlobalPrefix");

fn LLVMOrcSymbolStringPoolEntryRef orcLLJITMangleAndIntern(
  LLVMOrcLLJITRef j, 
  CChar* unmangled_name)
@extern("LLVMOrcLLJITMangleAndIntern");

fn LLVMErrorRef orcLLJITAddObjectFile(
  LLVMOrcLLJITRef j, 
  LLVMOrcJITDylibRef jd, 
  LLVMMemoryBufferRef obj_buffer)
@extern("LLVMOrcLLJITAddObjectFile");

fn LLVMErrorRef orcLLJITAddObjectFileWithRT(
  LLVMOrcLLJITRef j, 
  LLVMOrcResourceTrackerRef rt, 
  LLVMMemoryBufferRef obj_buffer)
@extern("LLVMOrcLLJITAddObjectFileWithRT");

fn LLVMErrorRef orcLLJITAddLLVMIRModule(
  LLVMOrcLLJITRef j, 
  LLVMOrcJITDylibRef jd, 
  LLVMOrcThreadSafeModuleRef tsm)
@extern("LLVMOrcLLJITAddLLVMIRModule");

fn LLVMErrorRef orcLLJITAddLLVMIRModuleWithRT(
  LLVMOrcLLJITRef j, 
  LLVMOrcResourceTrackerRef jd, 
  LLVMOrcThreadSafeModuleRef tsm)
@extern("LLVMOrcLLJITAddLLVMIRModuleWithRT");

fn LLVMErrorRef orcLLJITLookup(
  LLVMOrcLLJITRef j, 
  LLVMOrcExecutorAddress* result, 
  CChar* name)
@extern("LLVMOrcLLJITLookup");

fn LLVMOrcObjectLayerRef orcLLJITGetObjLinkingLayer(
  LLVMOrcLLJITRef j)
@extern("LLVMOrcLLJITGetObjLinkingLayer");

fn LLVMOrcObjectTransformLayerRef orcLLJITGetObjTransformLayer(
  LLVMOrcLLJITRef j)
@extern("LLVMOrcLLJITGetObjTransformLayer");

fn LLVMOrcIRTransformLayerRef orcLLJITGetIRTransformLayer(
  LLVMOrcLLJITRef j)
@extern("LLVMOrcLLJITGetIRTransformLayer");

fn CChar* orcLLJITGetDataLayoutStr(
  LLVMOrcLLJITRef j)
@extern("LLVMOrcLLJITGetDataLayoutStr");

fn LLVMErrorRef orcLLJITEnableDebugSupport(
  LLVMOrcLLJITRef j)
@extern("LLVMOrcLLJITEnableDebugSupport");

typedef LLVMLinkerMode = inline CUInt;
const LLVMLinkerMode LINKER_DESTROY_SOURCE = 0;
const LLVMLinkerMode LINKER_PRESERVE_SOURCE__REMOVED = 1;

fn LLVMBool linkModules2(
  LLVMModuleRef dest, 
  LLVMModuleRef src)
@extern("LLVMLinkModules2");

typedef LLVMOpaqueSectionIterator = void;

alias LLVMSectionIteratorRef = LLVMOpaqueSectionIterator*;

typedef LLVMOpaqueSymbolIterator = void;

alias LLVMSymbolIteratorRef = LLVMOpaqueSymbolIterator*;

typedef LLVMOpaqueRelocationIterator = void;

alias LLVMRelocationIteratorRef = LLVMOpaqueRelocationIterator*;

typedef LLVMBinaryType = inline CUInt;
const LLVMBinaryType BINARY_TYPE_ARCHIVE = 0;
const LLVMBinaryType BINARY_TYPE_MACH_O_UNIVERSAL_BINARY = 1;
const LLVMBinaryType BINARY_TYPE_COFF_IMPORT_FILE = 2;
const LLVMBinaryType BINARY_TYPE_IR = 3;
const LLVMBinaryType BINARY_TYPE_WIN_RES = 4;
const LLVMBinaryType BINARY_TYPE_COFF = 5;
const LLVMBinaryType BINARY_TYPE_EL_F_32_L = 6;
const LLVMBinaryType BINARY_TYPE_EL_F_32_B = 7;
const LLVMBinaryType BINARY_TYPE_EL_F_64_L = 8;
const LLVMBinaryType BINARY_TYPE_EL_F_64_B = 9;
const LLVMBinaryType BINARY_TYPE_MACH_O_32_L = 10;
const LLVMBinaryType BINARY_TYPE_MACH_O_32_B = 11;
const LLVMBinaryType BINARY_TYPE_MACH_O_64_L = 12;
const LLVMBinaryType BINARY_TYPE_MACH_O_64_B = 13;
const LLVMBinaryType BINARY_TYPE_WASM = 14;
const LLVMBinaryType BINARY_TYPE_OFFLOAD = 15;

fn LLVMBinaryRef createBinary(
  LLVMMemoryBufferRef mem_buf, 
  LLVMContextRef context, 
  CChar** error_message)
@extern("LLVMCreateBinary");

fn void disposeBinary(
  LLVMBinaryRef br)
@extern("LLVMDisposeBinary");

fn LLVMMemoryBufferRef binaryCopyMemoryBuffer(
  LLVMBinaryRef br)
@extern("LLVMBinaryCopyMemoryBuffer");

fn LLVMBinaryType binaryGetType(
  LLVMBinaryRef br)
@extern("LLVMBinaryGetType");

fn LLVMBinaryRef machOUniversalBinaryCopyObjectForArch(
  LLVMBinaryRef br, 
  CChar* arch, 
  usz arch_len, 
  CChar** error_message)
@extern("LLVMMachOUniversalBinaryCopyObjectForArch");

fn LLVMSectionIteratorRef objectFileCopySectionIterator(
  LLVMBinaryRef br)
@extern("LLVMObjectFileCopySectionIterator");

fn LLVMBool objectFileIsSectionIteratorAtEnd(
  LLVMBinaryRef br, 
  LLVMSectionIteratorRef si)
@extern("LLVMObjectFileIsSectionIteratorAtEnd");

fn LLVMSymbolIteratorRef objectFileCopySymbolIterator(
  LLVMBinaryRef br)
@extern("LLVMObjectFileCopySymbolIterator");

fn LLVMBool objectFileIsSymbolIteratorAtEnd(
  LLVMBinaryRef br, 
  LLVMSymbolIteratorRef si)
@extern("LLVMObjectFileIsSymbolIteratorAtEnd");

fn void disposeSectionIterator(
  LLVMSectionIteratorRef si)
@extern("LLVMDisposeSectionIterator");

fn void moveToNextSection(
  LLVMSectionIteratorRef si)
@extern("LLVMMoveToNextSection");

fn void moveToContainingSection(
  LLVMSectionIteratorRef sect, 
  LLVMSymbolIteratorRef sym)
@extern("LLVMMoveToContainingSection");

fn void disposeSymbolIterator(
  LLVMSymbolIteratorRef si)
@extern("LLVMDisposeSymbolIterator");

fn void moveToNextSymbol(
  LLVMSymbolIteratorRef si)
@extern("LLVMMoveToNextSymbol");

fn CChar* getSectionName(
  LLVMSectionIteratorRef si)
@extern("LLVMGetSectionName");

fn ulong getSectionSize(
  LLVMSectionIteratorRef si)
@extern("LLVMGetSectionSize");

fn CChar* getSectionContents(
  LLVMSectionIteratorRef si)
@extern("LLVMGetSectionContents");

fn ulong getSectionAddress(
  LLVMSectionIteratorRef si)
@extern("LLVMGetSectionAddress");

fn LLVMBool getSectionContainsSymbol(
  LLVMSectionIteratorRef si, 
  LLVMSymbolIteratorRef sym)
@extern("LLVMGetSectionContainsSymbol");

fn LLVMRelocationIteratorRef getRelocations(
  LLVMSectionIteratorRef section)
@extern("LLVMGetRelocations");

fn void disposeRelocationIterator(
  LLVMRelocationIteratorRef ri)
@extern("LLVMDisposeRelocationIterator");

fn LLVMBool isRelocationIteratorAtEnd(
  LLVMSectionIteratorRef section, 
  LLVMRelocationIteratorRef ri)
@extern("LLVMIsRelocationIteratorAtEnd");

fn void moveToNextRelocation(
  LLVMRelocationIteratorRef ri)
@extern("LLVMMoveToNextRelocation");

fn CChar* getSymbolName(
  LLVMSymbolIteratorRef si)
@extern("LLVMGetSymbolName");

fn ulong getSymbolAddress(
  LLVMSymbolIteratorRef si)
@extern("LLVMGetSymbolAddress");

fn ulong getSymbolSize(
  LLVMSymbolIteratorRef si)
@extern("LLVMGetSymbolSize");

fn ulong getRelocationOffset(
  LLVMRelocationIteratorRef ri)
@extern("LLVMGetRelocationOffset");

fn LLVMSymbolIteratorRef getRelocationSymbol(
  LLVMRelocationIteratorRef ri)
@extern("LLVMGetRelocationSymbol");

fn ulong getRelocationType(
  LLVMRelocationIteratorRef ri)
@extern("LLVMGetRelocationType");

fn CChar* getRelocationTypeName(
  LLVMRelocationIteratorRef ri)
@extern("LLVMGetRelocationTypeName");

fn CChar* getRelocationValueString(
  LLVMRelocationIteratorRef ri)
@extern("LLVMGetRelocationValueString");

typedef LLVMOpaqueObjectFile = void;

alias LLVMObjectFileRef = LLVMOpaqueObjectFile*;

fn LLVMObjectFileRef createObjectFile(
  LLVMMemoryBufferRef mem_buf)
@extern("LLVMCreateObjectFile");

fn void disposeObjectFile(
  LLVMObjectFileRef object_file)
@extern("LLVMDisposeObjectFile");

fn LLVMSectionIteratorRef getSections(
  LLVMObjectFileRef object_file)
@extern("LLVMGetSections");

fn LLVMBool isSectionIteratorAtEnd(
  LLVMObjectFileRef object_file, 
  LLVMSectionIteratorRef si)
@extern("LLVMIsSectionIteratorAtEnd");

fn LLVMSymbolIteratorRef getSymbols(
  LLVMObjectFileRef object_file)
@extern("LLVMGetSymbols");

fn LLVMBool isSymbolIteratorAtEnd(
  LLVMObjectFileRef object_file, 
  LLVMSymbolIteratorRef si)
@extern("LLVMIsSymbolIteratorAtEnd");

alias LLVMMemoryManagerCreateContextCallback = fn void*(
  void* ctx_ctx);

alias LLVMMemoryManagerNotifyTerminatingCallback = fn void(
  void* ctx_ctx);

fn LLVMOrcObjectLayerRef orcCreateRTDyldObjectLinkingLayerWithSectionMemoryManager(
  LLVMOrcExecutionSessionRef es)
@extern("LLVMOrcCreateRTDyldObjectLinkingLayerWithSectionMemoryManager");

fn LLVMOrcObjectLayerRef orcCreateRTDyldObjectLinkingLayerWithMCJITMemoryManagerLikeCallbacks(
  LLVMOrcExecutionSessionRef es, 
  void* create_context_ctx, 
  LLVMMemoryManagerCreateContextCallback create_context, 
  LLVMMemoryManagerNotifyTerminatingCallback notify_terminating, 
  LLVMMemoryManagerAllocateCodeSectionCallback allocate_code_section, 
  LLVMMemoryManagerAllocateDataSectionCallback allocate_data_section, 
  LLVMMemoryManagerFinalizeMemoryCallback finalize_memory, 
  LLVMMemoryManagerDestroyCallback destroy)
@extern("LLVMOrcCreateRTDyldObjectLinkingLayerWithMCJITMemoryManagerLikeCallbacks");

fn void orcRTDyldObjectLinkingLayerRegisterJITEventListener(
  LLVMOrcObjectLayerRef rt_dyld_obj_linking_layer, 
  LLVMJITEventListenerRef listener)
@extern("LLVMOrcRTDyldObjectLinkingLayerRegisterJITEventListener");

typedef LLVMRemarkType = inline CUInt;
const LLVMRemarkType REMARK_TYPE_UNKNOWN = 0;
const LLVMRemarkType REMARK_TYPE_PASSED = 1;
const LLVMRemarkType REMARK_TYPE_MISSED = 2;
const LLVMRemarkType REMARK_TYPE_ANALYSIS = 3;
const LLVMRemarkType REMARK_TYPE_ANALYSIS_FP_COMMUTE = 4;
const LLVMRemarkType REMARK_TYPE_ANALYSIS_ALIASING = 5;
const LLVMRemarkType REMARK_TYPE_FAILURE = 6;

typedef LLVMRemarkOpaqueString = void;

alias LLVMRemarkStringRef = LLVMRemarkOpaqueString*;

fn CChar* remarkStringGetData(
  LLVMRemarkStringRef string)
@extern("LLVMRemarkStringGetData");

fn uint remarkStringGetLen(
  LLVMRemarkStringRef string)
@extern("LLVMRemarkStringGetLen");

typedef LLVMRemarkOpaqueDebugLoc = void;

alias LLVMRemarkDebugLocRef = LLVMRemarkOpaqueDebugLoc*;

fn LLVMRemarkStringRef remarkDebugLocGetSourceFilePath(
  LLVMRemarkDebugLocRef dl)
@extern("LLVMRemarkDebugLocGetSourceFilePath");

fn uint remarkDebugLocGetSourceLine(
  LLVMRemarkDebugLocRef dl)
@extern("LLVMRemarkDebugLocGetSourceLine");

fn uint remarkDebugLocGetSourceColumn(
  LLVMRemarkDebugLocRef dl)
@extern("LLVMRemarkDebugLocGetSourceColumn");

typedef LLVMRemarkOpaqueArg = void;

alias LLVMRemarkArgRef = LLVMRemarkOpaqueArg*;

fn LLVMRemarkStringRef remarkArgGetKey(
  LLVMRemarkArgRef arg)
@extern("LLVMRemarkArgGetKey");

fn LLVMRemarkStringRef remarkArgGetValue(
  LLVMRemarkArgRef arg)
@extern("LLVMRemarkArgGetValue");

fn LLVMRemarkDebugLocRef remarkArgGetDebugLoc(
  LLVMRemarkArgRef arg)
@extern("LLVMRemarkArgGetDebugLoc");

typedef LLVMRemarkOpaqueEntry = void;

alias LLVMRemarkEntryRef = LLVMRemarkOpaqueEntry*;

fn void remarkEntryDispose(
  LLVMRemarkEntryRef remark)
@extern("LLVMRemarkEntryDispose");

fn LLVMRemarkType remarkEntryGetType(
  LLVMRemarkEntryRef remark)
@extern("LLVMRemarkEntryGetType");

fn LLVMRemarkStringRef remarkEntryGetPassName(
  LLVMRemarkEntryRef remark)
@extern("LLVMRemarkEntryGetPassName");

fn LLVMRemarkStringRef remarkEntryGetRemarkName(
  LLVMRemarkEntryRef remark)
@extern("LLVMRemarkEntryGetRemarkName");

fn LLVMRemarkStringRef remarkEntryGetFunctionName(
  LLVMRemarkEntryRef remark)
@extern("LLVMRemarkEntryGetFunctionName");

fn LLVMRemarkDebugLocRef remarkEntryGetDebugLoc(
  LLVMRemarkEntryRef remark)
@extern("LLVMRemarkEntryGetDebugLoc");

fn ulong remarkEntryGetHotness(
  LLVMRemarkEntryRef remark)
@extern("LLVMRemarkEntryGetHotness");

fn uint remarkEntryGetNumArgs(
  LLVMRemarkEntryRef remark)
@extern("LLVMRemarkEntryGetNumArgs");

fn LLVMRemarkArgRef remarkEntryGetFirstArg(
  LLVMRemarkEntryRef remark)
@extern("LLVMRemarkEntryGetFirstArg");

fn LLVMRemarkArgRef remarkEntryGetNextArg(
  LLVMRemarkArgRef it, 
  LLVMRemarkEntryRef remark)
@extern("LLVMRemarkEntryGetNextArg");

typedef LLVMRemarkOpaqueParser = void;

alias LLVMRemarkParserRef = LLVMRemarkOpaqueParser*;

fn LLVMRemarkParserRef remarkParserCreateYAML(
  void* buf, 
  ulong size)
@extern("LLVMRemarkParserCreateYAML");

fn LLVMRemarkParserRef remarkParserCreateBitstream(
  void* buf, 
  ulong size)
@extern("LLVMRemarkParserCreateBitstream");

fn LLVMRemarkEntryRef remarkParserGetNext(
  LLVMRemarkParserRef parser)
@extern("LLVMRemarkParserGetNext");

fn LLVMBool remarkParserHasError(
  LLVMRemarkParserRef parser)
@extern("LLVMRemarkParserHasError");

fn CChar* remarkParserGetErrorMessage(
  LLVMRemarkParserRef parser)
@extern("LLVMRemarkParserGetErrorMessage");

fn void remarkParserDispose(
  LLVMRemarkParserRef parser)
@extern("LLVMRemarkParserDispose");

fn uint remarkVersion()
@extern("LLVMRemarkVersion");

fn LLVMBool loadLibraryPermanently(
  CChar* filename)
@extern("LLVMLoadLibraryPermanently");

fn void parseCommandLineOptions(
  CInt argc, 
  CChar** argv, 
  CChar* overview)
@extern("LLVMParseCommandLineOptions");

fn void* searchForAddressOfSymbol(
  CChar* symbol_name)
@extern("LLVMSearchForAddressOfSymbol");

fn void addSymbol(
  CChar* symbol_name, 
  void* symbol_value)
@extern("LLVMAddSymbol");

struct LlvmBlake3ChunkState {
  uint[8] cv;
  ulong chunk_counter;
  char[64] buf;
  char buf_len;
  char blocks_compressed;
  char flags;
}

struct LlvmBlake3Hasher {
  uint[8] key;
  LlvmBlake3ChunkState chunk;
  char cv_stack_len;
  char[1760] cv_stack;
}

fn CChar* blake3Version()
@extern("llvm_blake3_version");

fn void blake3HasherInit(
  LlvmBlake3Hasher* self)
@extern("llvm_blake3_hasher_init");

fn void blake3HasherInitKeyed(
  LlvmBlake3Hasher* self, 
  char[32]* key)
@extern("llvm_blake3_hasher_init_keyed");

fn void blake3HasherInitDeriveKey(
  LlvmBlake3Hasher* self, 
  CChar* context)
@extern("llvm_blake3_hasher_init_derive_key");

fn void blake3HasherInitDeriveKeyRaw(
  LlvmBlake3Hasher* self, 
  void* context, 
  usz context_len)
@extern("llvm_blake3_hasher_init_derive_key_raw");

fn void blake3HasherUpdate(
  LlvmBlake3Hasher* self, 
  void* input, 
  usz input_len)
@extern("llvm_blake3_hasher_update");

fn void blake3HasherFinalize(
  LlvmBlake3Hasher* self, 
  char* out, 
  usz out_len)
@extern("llvm_blake3_hasher_finalize");

fn void blake3HasherFinalizeSeek(
  LlvmBlake3Hasher* self, 
  ulong seek, 
  char* out, 
  usz out_len)
@extern("llvm_blake3_hasher_finalize_seek");

fn void blake3HasherReset(
  LlvmBlake3Hasher* self)
@extern("llvm_blake3_hasher_reset");

alias LtoBoolT = bool;

typedef LtoSymbolAttributes = inline CUInt;
const LtoSymbolAttributes LTO_SYMBOL_ALIGNMENT_MASK = 0x0000001F;
const LtoSymbolAttributes LTO_SYMBOL_PERMISSIONS_MASK = 0x000000E0;
const LtoSymbolAttributes LTO_SYMBOL_PERMISSIONS_CODE = 0x000000A0;
const LtoSymbolAttributes LTO_SYMBOL_PERMISSIONS_DATA = 0x000000C0;
const LtoSymbolAttributes LTO_SYMBOL_PERMISSIONS_RODATA = 0x00000080;
const LtoSymbolAttributes LTO_SYMBOL_DEFINITION_MASK = 0x00000700;
const LtoSymbolAttributes LTO_SYMBOL_DEFINITION_REGULAR = 0x00000100;
const LtoSymbolAttributes LTO_SYMBOL_DEFINITION_TENTATIVE = 0x00000200;
const LtoSymbolAttributes LTO_SYMBOL_DEFINITION_WEAK = 0x00000300;
const LtoSymbolAttributes LTO_SYMBOL_DEFINITION_UNDEFINED = 0x00000400;
const LtoSymbolAttributes LTO_SYMBOL_DEFINITION_WEAKUNDEF = 0x00000500;
const LtoSymbolAttributes LTO_SYMBOL_SCOPE_MASK = 0x00003800;
const LtoSymbolAttributes LTO_SYMBOL_SCOPE_INTERNAL = 0x00000800;
const LtoSymbolAttributes LTO_SYMBOL_SCOPE_HIDDEN = 0x00001000;
const LtoSymbolAttributes LTO_SYMBOL_SCOPE_PROTECTED = 0x00002000;
const LtoSymbolAttributes LTO_SYMBOL_SCOPE_DEFAULT = 0x00001800;
const LtoSymbolAttributes LTO_SYMBOL_SCOPE_DEFAULT_CAN_BE_HIDDEN = 0x00002800;
const LtoSymbolAttributes LTO_SYMBOL_COMDAT = 0x00004000;
const LtoSymbolAttributes LTO_SYMBOL_ALIAS = 0x00008000;

typedef LtoDebugModel = inline CUInt;
const LtoDebugModel LTO_DEBUG_MODEL_NONE = 0;
const LtoDebugModel LTO_DEBUG_MODEL_DWARF = 1;

typedef LtoCodegenModel = inline CUInt;
const LtoCodegenModel LTO_CODEGEN_PIC_MODEL_STATIC = 0;
const LtoCodegenModel LTO_CODEGEN_PIC_MODEL_DYNAMIC = 1;
const LtoCodegenModel LTO_CODEGEN_PIC_MODEL_DYNAMIC_NO_PIC = 2;
const LtoCodegenModel LTO_CODEGEN_PIC_MODEL_DEFAULT = 3;

typedef LLVMOpaqueLTOModule = void;

alias LtoModuleT = LLVMOpaqueLTOModule*;

typedef LLVMOpaqueLTOCodeGenerator = void;

alias LtoCodeGenT = LLVMOpaqueLTOCodeGenerator*;

typedef LLVMOpaqueThinLTOCodeGenerator = void;

alias ThinltoCodeGenT = LLVMOpaqueThinLTOCodeGenerator*;

fn CChar* ltoGetVersion()
@extern("lto_get_version");

fn CChar* ltoGetErrorMessage()
@extern("lto_get_error_message");

fn LtoBoolT ltoModuleIsObjectFile(
  CChar* path)
@extern("lto_module_is_object_file");

fn LtoBoolT ltoModuleIsObjectFileForTarget(
  CChar* path, 
  CChar* target_triple_prefix)
@extern("lto_module_is_object_file_for_target");

fn LtoBoolT ltoModuleHasObjcCategory(
  void* mem, 
  usz length)
@extern("lto_module_has_objc_category");

fn LtoBoolT ltoModuleIsObjectFileInMemory(
  void* mem, 
  usz length)
@extern("lto_module_is_object_file_in_memory");

fn LtoBoolT ltoModuleIsObjectFileInMemoryForTarget(
  void* mem, 
  usz length, 
  CChar* target_triple_prefix)
@extern("lto_module_is_object_file_in_memory_for_target");

fn LtoModuleT ltoModuleCreate(
  CChar* path)
@extern("lto_module_create");

fn LtoModuleT ltoModuleCreateFromMemory(
  void* mem, 
  usz length)
@extern("lto_module_create_from_memory");

fn LtoModuleT ltoModuleCreateFromMemoryWithPath(
  void* mem, 
  usz length, 
  CChar* path)
@extern("lto_module_create_from_memory_with_path");

fn LtoModuleT ltoModuleCreateInLocalContext(
  void* mem, 
  usz length, 
  CChar* path)
@extern("lto_module_create_in_local_context");

fn LtoModuleT ltoModuleCreateInCodegenContext(
  void* mem, 
  usz length, 
  CChar* path, 
  LtoCodeGenT cg)
@extern("lto_module_create_in_codegen_context");

fn LtoModuleT ltoModuleCreateFromFd(
  CInt fd, 
  CChar* path, 
  usz file_size)
@extern("lto_module_create_from_fd");

fn LtoModuleT ltoModuleCreateFromFdAtOffset(
  CInt fd, 
  CChar* path, 
  usz file_size, 
  usz map_size, 
  isz offset)
@extern("lto_module_create_from_fd_at_offset");

fn void ltoModuleDispose(
  LtoModuleT mod)
@extern("lto_module_dispose");

fn CChar* ltoModuleGetTargetTriple(
  LtoModuleT mod)
@extern("lto_module_get_target_triple");

fn void ltoModuleSetTargetTriple(
  LtoModuleT mod, 
  CChar* triple)
@extern("lto_module_set_target_triple");

fn CUInt ltoModuleGetNumSymbols(
  LtoModuleT mod)
@extern("lto_module_get_num_symbols");

fn CChar* ltoModuleGetSymbolName(
  LtoModuleT mod, 
  CUInt index)
@extern("lto_module_get_symbol_name");

fn LtoSymbolAttributes ltoModuleGetSymbolAttribute(
  LtoModuleT mod, 
  CUInt index)
@extern("lto_module_get_symbol_attribute");

fn CChar* ltoModuleGetLinkeropts(
  LtoModuleT mod)
@extern("lto_module_get_linkeropts");

fn LtoBoolT ltoModuleGetMachoCputype(
  LtoModuleT mod, 
  CUInt* out_cputype, 
  CUInt* out_cpusubtype)
@extern("lto_module_get_macho_cputype");

fn LtoBoolT ltoModuleHasCtorDtor(
  LtoModuleT mod)
@extern("lto_module_has_ctor_dtor");

typedef LtoCodegenDiagnosticSeverityT = inline CUInt;
const LtoCodegenDiagnosticSeverityT LTO_DS_ERROR = 0;
const LtoCodegenDiagnosticSeverityT LTO_DS_WARNING = 1;
const LtoCodegenDiagnosticSeverityT LTO_DS_REMARK = 3;
const LtoCodegenDiagnosticSeverityT LTO_DS_NOTE = 2;

alias LtoDiagnosticHandlerT = fn void(
  LtoCodegenDiagnosticSeverityT severity, 
  CChar* diag, 
  void* ctxt);

fn void ltoCodegenSetDiagnosticHandler(
  LtoCodeGenT, 
  LtoDiagnosticHandlerT, 
  void*)
@extern("lto_codegen_set_diagnostic_handler");

fn LtoCodeGenT ltoCodegenCreate()
@extern("lto_codegen_create");

fn LtoCodeGenT ltoCodegenCreateInLocalContext()
@extern("lto_codegen_create_in_local_context");

fn void ltoCodegenDispose(
  LtoCodeGenT)
@extern("lto_codegen_dispose");

fn LtoBoolT ltoCodegenAddModule(
  LtoCodeGenT cg, 
  LtoModuleT mod)
@extern("lto_codegen_add_module");

fn void ltoCodegenSetModule(
  LtoCodeGenT cg, 
  LtoModuleT mod)
@extern("lto_codegen_set_module");

fn LtoBoolT ltoCodegenSetDebugModel(
  LtoCodeGenT cg, 
  LtoDebugModel)
@extern("lto_codegen_set_debug_model");

fn LtoBoolT ltoCodegenSetPicModel(
  LtoCodeGenT cg, 
  LtoCodegenModel)
@extern("lto_codegen_set_pic_model");

fn void ltoCodegenSetCpu(
  LtoCodeGenT cg, 
  CChar* cpu)
@extern("lto_codegen_set_cpu");

fn void ltoCodegenSetAssemblerPath(
  LtoCodeGenT cg, 
  CChar* path)
@extern("lto_codegen_set_assembler_path");

fn void ltoCodegenSetAssemblerArgs(
  LtoCodeGenT cg, 
  CChar** args, 
  CInt nargs)
@extern("lto_codegen_set_assembler_args");

fn void ltoCodegenAddMustPreserveSymbol(
  LtoCodeGenT cg, 
  CChar* symbol)
@extern("lto_codegen_add_must_preserve_symbol");

fn LtoBoolT ltoCodegenWriteMergedModules(
  LtoCodeGenT cg, 
  CChar* path)
@extern("lto_codegen_write_merged_modules");

fn void* ltoCodegenCompile(
  LtoCodeGenT cg, 
  usz* length)
@extern("lto_codegen_compile");

fn LtoBoolT ltoCodegenCompileToFile(
  LtoCodeGenT cg, 
  CChar** name)
@extern("lto_codegen_compile_to_file");

fn LtoBoolT ltoCodegenOptimize(
  LtoCodeGenT cg)
@extern("lto_codegen_optimize");

fn void* ltoCodegenCompileOptimized(
  LtoCodeGenT cg, 
  usz* length)
@extern("lto_codegen_compile_optimized");

fn CUInt ltoApiVersion()
@extern("lto_api_version");

fn void ltoSetDebugOptions(
  CChar** options, 
  CInt number)
@extern("lto_set_debug_options");

fn void ltoCodegenDebugOptions(
  LtoCodeGenT cg, 
  CChar*)
@extern("lto_codegen_debug_options");

fn void ltoCodegenDebugOptionsArray(
  LtoCodeGenT cg, 
  CChar**, 
  CInt number)
@extern("lto_codegen_debug_options_array");

fn void ltoInitializeDisassembler()
@extern("lto_initialize_disassembler");

fn void ltoCodegenSetShouldInternalize(
  LtoCodeGenT cg, 
  LtoBoolT should_internalize)
@extern("lto_codegen_set_should_internalize");

fn void ltoCodegenSetShouldEmbedUselists(
  LtoCodeGenT cg, 
  LtoBoolT should_embed_uselists)
@extern("lto_codegen_set_should_embed_uselists");

typedef LLVMOpaqueLTOInput = void;

alias LtoInputT = LLVMOpaqueLTOInput*;

fn LtoInputT ltoInputCreate(
  void* buffer, 
  usz buffer_size, 
  CChar* path)
@extern("lto_input_create");

fn void ltoInputDispose(
  LtoInputT input)
@extern("lto_input_dispose");

fn CUInt ltoInputGetNumDependentLibraries(
  LtoInputT input)
@extern("lto_input_get_num_dependent_libraries");

fn CChar* ltoInputGetDependentLibrary(
  LtoInputT input, 
  usz index, 
  usz* size)
@extern("lto_input_get_dependent_library");

fn CChar** ltoRuntimeLibSymbolsList(
  usz* size)
@extern("lto_runtime_lib_symbols_list");

struct LTOObjectBuffer {
  CChar* buffer;
  usz size;
}

fn ThinltoCodeGenT thinltoCreateCodegen()
@extern("thinlto_create_codegen");

fn void thinltoCodegenDispose(
  ThinltoCodeGenT cg)
@extern("thinlto_codegen_dispose");

fn void thinltoCodegenAddModule(
  ThinltoCodeGenT cg, 
  CChar* identifier, 
  CChar* data, 
  CInt length)
@extern("thinlto_codegen_add_module");

fn void thinltoCodegenProcess(
  ThinltoCodeGenT cg)
@extern("thinlto_codegen_process");

fn CUInt thinltoModuleGetNumObjects(
  ThinltoCodeGenT cg)
@extern("thinlto_module_get_num_objects");

fn LTOObjectBuffer thinltoModuleGetObject(
  ThinltoCodeGenT cg, 
  CUInt index)
@extern("thinlto_module_get_object");

fn CUInt thinltoModuleGetNumObjectFiles(
  ThinltoCodeGenT cg)
@extern("thinlto_module_get_num_object_files");

fn CChar* thinltoModuleGetObjectFile(
  ThinltoCodeGenT cg, 
  CUInt index)
@extern("thinlto_module_get_object_file");

fn LtoBoolT thinltoCodegenSetPicModel(
  ThinltoCodeGenT cg, 
  LtoCodegenModel)
@extern("thinlto_codegen_set_pic_model");

fn void thinltoCodegenSetSavetempsDir(
  ThinltoCodeGenT cg, 
  CChar* save_temps_dir)
@extern("thinlto_codegen_set_savetemps_dir");

fn void thinltoSetGeneratedObjectsDir(
  ThinltoCodeGenT cg, 
  CChar* save_temps_dir)
@extern("thinlto_set_generated_objects_dir");

fn void thinltoCodegenSetCpu(
  ThinltoCodeGenT cg, 
  CChar* cpu)
@extern("thinlto_codegen_set_cpu");

fn void thinltoCodegenDisableCodegen(
  ThinltoCodeGenT cg, 
  LtoBoolT disable)
@extern("thinlto_codegen_disable_codegen");

fn void thinltoCodegenSetCodegenOnly(
  ThinltoCodeGenT cg, 
  LtoBoolT codegen_only)
@extern("thinlto_codegen_set_codegen_only");

fn void thinltoDebugOptions(
  CChar** options, 
  CInt number)
@extern("thinlto_debug_options");

fn LtoBoolT ltoModuleIsThinlto(
  LtoModuleT mod)
@extern("lto_module_is_thinlto");

fn void thinltoCodegenAddMustPreserveSymbol(
  ThinltoCodeGenT cg, 
  CChar* name, 
  CInt length)
@extern("thinlto_codegen_add_must_preserve_symbol");

fn void thinltoCodegenAddCrossReferencedSymbol(
  ThinltoCodeGenT cg, 
  CChar* name, 
  CInt length)
@extern("thinlto_codegen_add_cross_referenced_symbol");

fn void thinltoCodegenSetCacheDir(
  ThinltoCodeGenT cg, 
  CChar* cache_dir)
@extern("thinlto_codegen_set_cache_dir");

fn void thinltoCodegenSetCachePruningInterval(
  ThinltoCodeGenT cg, 
  CInt interval)
@extern("thinlto_codegen_set_cache_pruning_interval");

fn void thinltoCodegenSetFinalCacheSizeRelativeToAvailableSpace(
  ThinltoCodeGenT cg, 
  CUInt percentage)
@extern("thinlto_codegen_set_final_cache_size_relative_to_available_space");

fn void thinltoCodegenSetCacheEntryExpiration(
  ThinltoCodeGenT cg, 
  CUInt expiration)
@extern("thinlto_codegen_set_cache_entry_expiration");

fn void thinltoCodegenSetCacheSizeBytes(
  ThinltoCodeGenT cg, 
  CUInt max_size_bytes)
@extern("thinlto_codegen_set_cache_size_bytes");

fn void thinltoCodegenSetCacheSizeMegabytes(
  ThinltoCodeGenT cg, 
  CUInt max_size_megabytes)
@extern("thinlto_codegen_set_cache_size_megabytes");

fn void thinltoCodegenSetCacheSizeFiles(
  ThinltoCodeGenT cg, 
  CUInt max_size_files)
@extern("thinlto_codegen_set_cache_size_files");
